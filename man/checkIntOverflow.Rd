% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/checkIntOverflow.R
\name{checkIntOverflow}
\alias{checkIntOverflow}
\title{Check a \code{GADSdat} for large labeled whole-number values.}
\usage{
checkIntOverflow(GADSdat)
}
\arguments{
\item{GADSdat}{A \code{GADSdat} object.}
}
\value{
Returns a \code{data.frame}, listing the affected \code{varName}s,
the large whole-number \code{value}s, their respective \code{missings} tags,
and whether they actually occur in the data (\code{empty}).
The \code{rownum}s of the affected rows in \code{GADSdat$labels} are also
provided in a separate column as a fail safe.
}
\description{
Check a \code{GADSdat} object for any occurrences of labeled whole-number values
 that would be too large for R to handle if they were coerced \code{as.integer()}.
}
\details{
According to its documentation, R can only handle \code{\link[base:integer]{integer}}
values of up to (roughly) \eqn{\pm 2 \times 10^9} (2,147,483,647 to be exact;
c.f. \code{\link[base:.Machine]{.Machine}$integer.max}).
This restriction is only relevant when exporting a \code{GADSdat} to \code{.dta}
and only when any value exceeding the limit is also labeled (or tagged as missing).
This is because Stata only accepts labeled \emph{integer} (not labeled \emph{floating-point};
c.f. \code{\link[checkLabeledFractionals()]{checkLabeledFractionals}} in this package)
values. \code{haven}'s \code{\link[haven:write_dta]{write_dta}} function will therefore
try to coerce any labeled values \code{as.integer()}. Unlabeled values, however, will
stay generic \code{numeric} values that have a higher limit.
}
\examples{
# Introduce a fractional value into meta data
pisa2 <- changeMissings(GADSdat = pisa,
                        varName = "schtype",
                        value = 9999999999,
                        missings = "miss")
checkIntOverflow(pisa2)

}
