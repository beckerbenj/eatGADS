[{"path":"https://beckerbenj.github.io/eatGADS/articles/createGADS.html","id":"importing-data","dir":"Articles","previous_headings":"","what":"Importing data","title":"`createGADS`: Creating a relational data base","text":"can import .sav (compressed .zsav) data set via import_spss() function. Checks variable names SQLite3 compliance performed automatically. Changes variable names reported console. next steps depend data structure: different hierarchy levels saved different source data sets (e.g. different .sav files) next section can skipped. However, sometimes data different hierarchy levels saved one data file. , splitting reshaping becomes necessary.","code":"library(eatGADS) sav_path <- system.file(\"extdata\", \"pisa.zsav\", package = \"eatGADS\") dat <- import_spss(sav_path)"},{"path":"https://beckerbenj.github.io/eatGADS/articles/createGADS.html","id":"splitting-and-reshaping","dir":"Articles","previous_headings":"","what":"Splitting and Reshaping","title":"`createGADS`: Creating a relational data base","text":"case, want split imported GADSdat object hierarchy levels (example: background data level 1 imputed competence data level 2). can achieved splitGADS() function. specify hierarchical structure list. , can extract separate GADSdat objects name via extractGADS() function. objects can used reshaping. reasons simplicity, example contains two hierarchy levels. practice, often hierarchy levels present. Splitting can performed many hierarchy levels desired. reshaping performed hierarchy level separately. reshaping data highly recommend R package tidyr. performance might less optimized example data.table package, however intuitive user friendly. example data set need reshape PVs wide long format separate resulting column two columns, containing dimension imputation number (imp) (Note: results data set different dimensions single student stored separate rows, columns). , directly access data GADSdat object via pvs_gads$dat. reshaping performed tidyr::pivot_longer(). tidyr::separate() used separate two additional identifier columns (dimension imp). Finally, clean imp column transform numeric.","code":"pvs <- grep(\"pv\", namesGADS(dat), value = T) splitted_gads <- splitGADS(dat, nameList = list(noImp = namesGADS(dat)[!namesGADS(dat) %in% pvs],                     PVs = c(\"idstud\", pvs))) # new Structure namesGADS(splitted_gads) #> $noImp #>   [1] \"idstud\"       \"idschool\"     \"idclass\"      \"schtype\"      \"sameteach\"    #>   [6] \"g8g9\"         \"ganztag\"      \"classsize\"    \"repeated\"     \"gender\"       #>  [11] \"age\"          \"language\"     \"migration\"    \"hisced\"       \"hisei\"        #>  [16] \"homepos\"      \"books\"        \"pared\"        \"computer_age\" \"internet_age\" #>  [21] \"int_use_a\"    \"int_use_b\"    \"truancy_a\"    \"truancy_b\"    \"truancy_c\"    #>  [26] \"int_a\"        \"int_b\"        \"int_c\"        \"int_d\"        \"instmot_a\"    #>  [31] \"instmot_b\"    \"instmot_c\"    \"instmot_d\"    \"norms_a\"      \"norms_b\"      #>  [36] \"norms_c\"      \"norms_d\"      \"norms_e\"      \"norms_f\"      \"anxiety_a\"    #>  [41] \"anxiety_b\"    \"anxiety_c\"    \"anxiety_d\"    \"anxiety_e\"    \"selfcon_a\"    #>  [46] \"selfcon_b\"    \"selfcon_c\"    \"selfcon_d\"    \"selfcon_e\"    \"worketh_a\"    #>  [51] \"worketh_b\"    \"worketh_c\"    \"worketh_d\"    \"worketh_e\"    \"worketh_f\"    #>  [56] \"worketh_g\"    \"worketh_h\"    \"worketh_i\"    \"intent_a\"     \"intent_b\"     #>  [61] \"intent_c\"     \"intent_d\"     \"intent_e\"     \"behav_a\"      \"behav_b\"      #>  [66] \"behav_c\"      \"behav_d\"      \"behav_e\"      \"behav_f\"      \"behav_g\"      #>  [71] \"behav_h\"      \"teach_a\"      \"teach_b\"      \"teach_c\"      \"teach_d\"      #>  [76] \"teach_e\"      \"cognact_a\"    \"cognact_b\"    \"cognact_c\"    \"cognact_d\"    #>  [81] \"cognact_e\"    \"cognact_f\"    \"cognact_g\"    \"cognact_h\"    \"cognact_i\"    #>  [86] \"discpline_a\"  \"discpline_b\"  \"discpline_c\"  \"discpline_d\"  \"discpline_e\"  #>  [91] \"relation_a\"   \"relation_b\"   \"relation_c\"   \"relation_d\"   \"relation_e\"   #>  [96] \"belong_a\"     \"belong_b\"     \"belong_c\"     \"belong_d\"     \"belong_e\"     #> [101] \"belong_f\"     \"belong_g\"     \"belong_h\"     \"belong_i\"     \"attitud_a\"    #> [106] \"attitud_b\"    \"attitud_c\"    \"attitud_d\"    \"attitud_e\"    \"attitud_f\"    #> [111] \"attitud_g\"    \"attitud_h\"    \"grade_de\"     \"grade_ma\"     \"grade_bio\"    #> [116] \"grade_che\"    \"grade_phy\"    \"grade_sci\"    #>  #> $PVs #>  [1] \"idstud\"  \"ma_pv1\"  \"ma_pv2\"  \"ma_pv3\"  \"ma_pv4\"  \"ma_pv5\"  \"rea_pv1\" #>  [8] \"rea_pv2\" \"rea_pv3\" \"rea_pv4\" \"rea_pv5\" \"sci_pv1\" \"sci_pv2\" \"sci_pv3\" #> [15] \"sci_pv4\" \"sci_pv5\"  # Extract GADSdat objects noImp_gads <- extractGADSdat(splitted_gads, \"noImp\") pvs_gads <- extractGADSdat(splitted_gads, \"PVs\") # Extract raw data from pv gads pvs_wide <- pvs_gads$dat  # Wide format head(pvs_wide) #>   idstud     ma_pv1     ma_pv2     ma_pv3      ma_pv4     ma_pv5    rea_pv1 #> 1      1  0.1537201 -0.0411933  0.5702895  0.01687233  0.3003968  0.4391437 #> 2      2 -0.3690980 -0.1201779 -0.2164011 -0.64099562 -0.3626861 -0.3471025 #> 3      3  1.7042239  2.2205527  1.7162633  2.78119427  2.6928097  0.8667544 #> 4      4  0.3490264  0.6069737  1.0037767  0.67002173  0.8012499 -0.7661811 #> 5      5 -0.6379547 -0.8142668 -0.6153099 -0.38015661 -0.1363339  0.1145925 #> 6      6 -1.5558856 -2.0435904 -0.7931236 -1.26866066 -1.1869012 -1.0732799 #>       rea_pv2     rea_pv3     rea_pv4    rea_pv5    sci_pv1    sci_pv2 #> 1  0.01991714  1.42848870 -0.06243637  0.8371030  0.1317762  0.6783006 #> 2  0.09553654  0.49335276  0.10951613  0.6657507 -0.8650453 -0.3834589 #> 3  0.61768689  1.17497378  1.12938438  1.3001419  1.1035166  1.2730882 #> 4  0.80961068  0.09573558 -0.23817788  0.2853083 -0.3049963  0.2290473 #> 5 -0.08762244  0.06418227  0.57376133 -0.5326255 -0.8032184 -0.6878142 #> 6 -1.18496034 -0.67843740 -0.06669544 -0.5332718 -0.9191711 -1.6379850 #>       sci_pv3     sci_pv4    sci_pv5 #> 1  1.46203909  0.61406429  0.4807234 #> 2 -0.54372393 -1.00303484 -0.8101605 #> 3  1.51685344  1.61485031  1.6091542 #> 4  0.18340247 -0.06804704  0.2677832 #> 5 -0.03322359  0.43998031  0.3998337 #> 6 -0.80060130 -0.43433496 -1.3110661  pvs_long1 <- tidyr::pivot_longer(pvs_wide, cols = all_of(pvs)) pvs_long2 <- tidyr::separate(pvs_long1, col = \"name\", sep = \"_\", into = c(\"dimension\", \"imp\")) pvs_long2$imp <- as.numeric(gsub(\"pv\", \"\", pvs_long2$imp))  # Finale long format head(as.data.frame(pvs_long2)) #>   idstud dimension imp       value #> 1      1        ma   1  0.15372011 #> 2      1        ma   2 -0.04119330 #> 3      1        ma   3  0.57028949 #> 4      1        ma   4  0.01687233 #> 5      1        ma   5  0.30039680 #> 6      1       rea   1  0.43914365"},{"path":"https://beckerbenj.github.io/eatGADS/articles/createGADS.html","id":"handling-meta-data","dir":"Articles","previous_headings":"","what":"Handling meta data","title":"`createGADS`: Creating a relational data base","text":"reshaping adapt meta data initial GADSdat object via updateMeta(). necessary, variables removed data set (e.g. \"ma_pv1\" etc.) new variables replaced (\"value\", \"dimension\", \"imp\"). Now add variable labels, old variable labels got lost due reshaping. extensive tutorial see vignette Handling Meta Data.","code":"pvs_gads2 <- updateMeta(pvs_gads, newDat = as.data.frame(pvs_long2)) #> Removing the following rows from meta data: ma_pv1, ma_pv2, ma_pv3, ma_pv4, ma_pv5, rea_pv1, rea_pv2, rea_pv3, rea_pv4, rea_pv5, sci_pv1, sci_pv2, sci_pv3, sci_pv4, sci_pv5 #> Adding meta data for the following variables: dimension, imp, value extractMeta(pvs_gads2) #>             varName   varLabel format display_width labeled value valLabel #> 1            idstud Student-ID   F8.0            NA      no    NA     <NA> #> dimension dimension       <NA>   <NA>            NA      no    NA     <NA> #> imp             imp       <NA>   <NA>            NA      no    NA     <NA> #> value         value       <NA>   <NA>            NA      no    NA     <NA> #>           missings #> 1             <NA> #> dimension     <NA> #> imp           <NA> #> value         <NA>  #  pvs_gads2 <- changeVarLabels(pvs_gads2, varName = c(\"dimension\", \"imp\", \"value\"),                 varLabel = c(\"Achievement dimension (math, reading, science)\",                              \"Number of imputation of plausible values\",                              \"Plausible Value\")) extractMeta(pvs_gads2) #>             varName                                       varLabel format #> 1            idstud                                     Student-ID   F8.0 #> dimension dimension Achievement dimension (math, reading, science)   <NA> #> imp             imp       Number of imputation of plausible values   <NA> #> value         value                                Plausible Value   <NA> #>           display_width labeled value valLabel missings #> 1                    NA      no    NA     <NA>     <NA> #> dimension            NA      no    NA     <NA>     <NA> #> imp                  NA      no    NA     <NA>     <NA> #> value                NA      no    NA     <NA>     <NA>"},{"path":"https://beckerbenj.github.io/eatGADS/articles/createGADS.html","id":"preparing-and-creating-the-data-base","dir":"Articles","previous_headings":"","what":"Preparing and Creating the data base","title":"`createGADS`: Creating a relational data base","text":"creation relational data base recreate initial hierarchical structure via mergeLabels() (performs reverse action extractGADS()). Furthermore, create two lists, primary key list (pkList) foreign key list (fkList). Primary keys variables uniquely identify row within every hierarchy level. Foreign keys variables allow merging different hierarchy levels. list foreign keys also specify another hierarchy level, hierarchy level connects. exception lowest hierarchy levels, serves basis. setting order foreign keys data base specify data merged together extract data . contrast conventional relational data bases, eatGADS data bases less flexible: package support modifying data base creation extracting data different merges specified set . Finally, create relational data base disc via createGADS() function. detailed tutorial use relational eatGADS data base see vignette getGADS: Using relational eatGADS data base.","code":"merged_gads <- mergeLabels(noImp = noImp_gads, PVs = pvs_gads2)  pkList <- list(noImp = \"idstud\",                PVs = c(\"idstud\", \"imp\", \"dimension\")) fkList <- list(noImp = list(References = NULL, Keys = NULL),                PVs = list(References = \"noImp\", Keys = \"idstud\")) temp_path <- paste0(tempfile(), \".db\")  createGADS(merged_gads, pkList = pkList, fkList = fkList,            filePath = temp_path) #> NULL"},{"path":"https://beckerbenj.github.io/eatGADS/articles/data_cleaning.html","id":"data-structure","dir":"Articles","previous_headings":"","what":"Data structure","title":"Comprehensive Data Cleaning Guide","text":"raw data GADSdat object represented raw, unlabeled values. can accessed via GADSdat$dat. extraction data suitable data analyses, see extractData2() function.","code":"pisa$dat[1:5, 1:5] #>   idstud idschool idclass schtype sameteach #> 1      1      127     392       2         2 #> 2      2       65     201       3         1 #> 3      3       10      34       1         1 #> 4      4      103     319       3         2 #> 5      5       57     179       2         2"},{"path":"https://beckerbenj.github.io/eatGADS/articles/data_cleaning.html","id":"meta-data-structure","dir":"Articles","previous_headings":"","what":"Meta data structure","title":"Comprehensive Data Cleaning Guide","text":"Meta data stored GADSdat object following structure: varLabel: variable label; describes variable data format: SPSS format variable; F represents numeric, represents character variables display_width: display width variable SPSS format labeled: variable contain value labels missing tags? value level, additional meta data can stored, namely: valLabel: value labels; labels describing, certain value certain variable represents missings: missing tags (sometimes also referred missing codes) indicating whether certain value represents valid (\"valid\") missing (\"miss\") value Via function extractMeta() existing meta data one, several variables GADSdat object can inspected. function used frequently throughout vignette check whether changes meta data performed successfully.","code":"#>    varName varLabel format display_width labeled value valLabel missings #> 17  gender   Gender   F8.0            NA     yes     1   Female    valid #> 18  gender   Gender   F8.0            NA     yes     2     Male    valid extractMeta(gads, vars = c(\"hisei\", \"schtype\")) #>    varName                             varLabel format display_width labeled value #> 5  schtype                         School track   F8.0            NA     yes     1 #> 6  schtype                         School track   F8.0            NA     yes     2 #> 7  schtype                         School track   F8.0            NA     yes     3 #> 39   hisei Highest parental occupational status   F8.2            NA      no    NA #>                                     valLabel missings #> 5                 Gymnasium (academic track)    valid #> 6                                 Realschule    valid #> 7  schools with several courses of education    valid #> 39                                      <NA>     <NA>"},{"path":"https://beckerbenj.github.io/eatGADS/articles/data_cleaning.html","id":"modifying-meta-data","dir":"Articles","previous_headings":"","what":"Modifying meta data","title":"Comprehensive Data Cleaning Guide","text":"section discusses changes meta data level, changes variable names labels.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/articles/data_cleaning.html","id":"changing-variable-names","dir":"Articles","previous_headings":"Modifying meta data","what":"Changing variable names","title":"Comprehensive Data Cleaning Guide","text":"Changes meta data variable level straightforward. Variable names can changed changeVarNames() function. old variable names overwritten. Multiple variable names can adjusted .","code":"# inspect original meta data extractMeta(gads, vars = \"hisei\") #>    varName                             varLabel format display_width labeled value valLabel #> 39   hisei Highest parental occupational status   F8.2            NA      no    NA     <NA> #>    missings #> 39     <NA>  # Change variable name gads_labeled <- changeVarNames(GADSdat = gads, oldNames = \"hisei\", newNames = \"hisei_new\")  # inspect modified meta data extractMeta(gads_labeled, vars = \"hisei_new\") #>      varName                             varLabel format display_width labeled value valLabel #> 39 hisei_new Highest parental occupational status   F8.2            NA      no    NA     <NA> #>    missings #> 39     <NA>"},{"path":"https://beckerbenj.github.io/eatGADS/articles/data_cleaning.html","id":"changing-variable-labels","dir":"Articles","previous_headings":"Modifying meta data","what":"Changing variable labels","title":"Comprehensive Data Cleaning Guide","text":"Variable labels can adjusted analogously via changeVarLabels() function. , multiple variable labels can adjusted .","code":"extractMeta(gads_labeled, vars = \"hisei_new\") #>      varName                             varLabel format display_width labeled value valLabel #> 39 hisei_new Highest parental occupational status   F8.2            NA      no    NA     <NA> #>    missings #> 39     <NA>  # Change variable label  gads_labeled <- changeVarLabels(GADSdat = gads_labeled, varName = \"hisei_new\",                                  varLabel = \"Parental occupational status (highest)\")  extractMeta(gads_labeled, vars = \"hisei_new\") #>      varName                               varLabel format display_width labeled value valLabel #> 39 hisei_new Parental occupational status (highest)   F8.2            NA      no    NA     <NA> #>    missings #> 39     <NA>"},{"path":"https://beckerbenj.github.io/eatGADS/articles/data_cleaning.html","id":"changing-spss-format","dir":"Articles","previous_headings":"Modifying meta data","what":"Changing SPSS format","title":"Comprehensive Data Cleaning Guide","text":"applies SPSS format variable using changeSPSSformat() function.","code":"extractMeta(gads_labeled, \"hisei_new\") #>      varName                               varLabel format display_width labeled value valLabel #> 39 hisei_new Parental occupational status (highest)   F8.2            NA      no    NA     <NA> #>    missings #> 39     <NA>  # Change SPSS format gads_labeled <- changeSPSSformat(GADSdat = gads_labeled, varName = \"hisei_new\",                                   format = \"F10.2\")  extractMeta(gads_labeled, \"hisei_new\") #>      varName                               varLabel format display_width labeled value valLabel #> 39 hisei_new Parental occupational status (highest)  F10.2            NA      no    NA     <NA> #>    missings #> 39     <NA>"},{"path":"https://beckerbenj.github.io/eatGADS/articles/data_cleaning.html","id":"changing-value-labels","dir":"Articles","previous_headings":"Modifying meta data","what":"Changing value labels","title":"Comprehensive Data Cleaning Guide","text":"Changes meta data value level follow principle. changeValLabels() function, value labels can added modified. Note value labels missing codes given numeric values, even variable character variable.","code":"# Adding value labels extractMeta(gads_labeled, \"hisei_new\") #>      varName                               varLabel format display_width labeled value valLabel #> 39 hisei_new Parental occupational status (highest)  F10.2            NA      no    NA     <NA> #>    missings #> 39     <NA> gads_labeled <- changeValLabels(GADSdat = gads_labeled, varName = \"hisei_new\",                                  value = c(-94, -99), valLabel = c(\"miss1\", \"miss2\")) extractMeta(gads_labeled, \"hisei_new\") #>      varName                               varLabel format display_width labeled value valLabel #> 38 hisei_new Parental occupational status (highest)  F10.2            NA     yes   -99    miss2 #> 39 hisei_new Parental occupational status (highest)  F10.2            NA     yes   -94    miss1 #>    missings #> 38    valid #> 39    valid  # Changing value labels gads_labeled <- changeValLabels(GADSdat = gads_labeled, varName = \"hisei_new\",                                  value = c(-94, -99),                                  valLabel = c(\"missing: Question omitted\",                                              \"missing: Not administered\")) extractMeta(gads_labeled, \"hisei_new\") #>      varName                               varLabel format display_width labeled value #> 38 hisei_new Parental occupational status (highest)  F10.2            NA     yes   -99 #> 39 hisei_new Parental occupational status (highest)  F10.2            NA     yes   -94 #>                     valLabel missings #> 38 missing: Not administered    valid #> 39 missing: Question omitted    valid"},{"path":"https://beckerbenj.github.io/eatGADS/articles/data_cleaning.html","id":"removing-value-labels","dir":"Articles","previous_headings":"Modifying meta data","what":"Removing value labels","title":"Comprehensive Data Cleaning Guide","text":"Value labels can deleted using removeValLabels() function.","code":"# Removing value labels extractMeta(gads_labeled, \"schtype\") #>   varName     varLabel format display_width labeled value                                  valLabel #> 4 schtype School track   F8.0            NA     yes     1                Gymnasium (academic track) #> 5 schtype School track   F8.0            NA     yes     2                                Realschule #> 6 schtype School track   F8.0            NA     yes     3 schools with several courses of education #>   missings #> 4    valid #> 5    valid #> 6    valid gads_labeled <- removeValLabels(GADSdat = gads_labeled, varName = \"schtype\",                                  value = 1:3) extractMeta(gads_labeled, \"schtype\") #>   varName     varLabel format display_width labeled value valLabel missings #> 4 schtype School track   F8.0            NA      no    NA     <NA>     <NA>"},{"path":"https://beckerbenj.github.io/eatGADS/articles/data_cleaning.html","id":"changing-missing-tags","dir":"Articles","previous_headings":"Modifying meta data","what":"Changing missing tags","title":"Comprehensive Data Cleaning Guide","text":"Missing tags (sometimes also referred missing codes) can modified using changeMissings() function. Valid entries missings \"miss\" \"valid\".","code":"# Defining missings extractMeta(gads_labeled, \"hisei_new\") #>      varName                               varLabel format display_width labeled value #> 38 hisei_new Parental occupational status (highest)  F10.2            NA     yes   -99 #> 39 hisei_new Parental occupational status (highest)  F10.2            NA     yes   -94 #>                     valLabel missings #> 38 missing: Not administered    valid #> 39 missing: Question omitted    valid gads_labeled <- changeMissings(GADSdat = gads_labeled, varName = \"hisei_new\",                                 value = c(-94, -99), missings = c(\"miss\", \"miss\")) extractMeta(gads_labeled, \"hisei_new\") #>      varName                               varLabel format display_width labeled value #> 36 hisei_new Parental occupational status (highest)  F10.2            NA     yes   -99 #> 37 hisei_new Parental occupational status (highest)  F10.2            NA     yes   -94 #>                     valLabel missings #> 36 missing: Not administered     miss #> 37 missing: Question omitted     miss"},{"path":"https://beckerbenj.github.io/eatGADS/articles/data_cleaning.html","id":"checking-and-adjusting-missing-tags-and-value-labels","dir":"Articles","previous_headings":"Modifying meta data","what":"Checking and adjusting missing tags and value labels","title":"Comprehensive Data Cleaning Guide","text":"Usually alignment value labels missing codes desirable. example, variable hisei_new value -94 received missing tag value label \"missing: Questions omitted\". make alignments easier, functions checkMissings() checkMissingsByValues() exist. checkMissings() allows searching regular expressions value labels comparing missing tags vice versa. Per default, missing codes automatically adjusted (addMissingCode = TRUE) value label mismatches just reported (addMissingLabel = FALSE). checkMissingsByValues() allows searching labeled values specific value range (e.g., -50:-99).","code":"# Creating a new value label for a missing value but leaving the missing code as valid gads_labeled <- changeValLabels(GADSdat = gads_labeled, varName = \"gender\",                                  value = -94, valLabel = \"missing: Question omitted\") # Creating a new missing code but leaving the value label empty gads_labeled <- changeMissings(GADSdat = gads_labeled, varName = \"gender\",                                  value = -99, missings = \"miss\")  # Checking value label and missing code alignment gads_labeled2 <- checkMissings(gads_labeled, missingLabel = \"missing\")  #> The following variables have value labels including the term 'missing' which are not coded as missing: #> gender #> 'miss' is inserted into column missings for 1 rows. #> The following variables have values coded as missings but value labels do not include the term 'missing': #> gender  # Checking missing tags for a certain value range gads_labeled <- checkMissingsByValues(gads_labeled, missingValues = -50:-99)  #> The following variables have values in the 'missingValues' range which are not coded as missing: #> gender #> 'miss' is inserted into column missings for 1 rows."},{"path":"https://beckerbenj.github.io/eatGADS/articles/data_cleaning.html","id":"reusing-meta-data","dir":"Articles","previous_headings":"Modifying meta data","what":"Reusing meta data","title":"Comprehensive Data Cleaning Guide","text":"Sometimes one variable already contains meta data added another variable. reuseMeta() can copy meta data one variable (other_varName) another variable (varName), even across different data sets. function allows us transfer complete meta data, value labels specific selection value labels (valid values missing codes). example transfer missing codes variable hisei_new variable age.","code":"extractMeta(gads_labeled, \"age\") #>    varName             varLabel format display_width labeled value valLabel missings #> 18     age Age of student at T1   F8.2            NA      no    NA     <NA>     <NA> gads_labeled <- reuseMeta(GADSdat = gads_labeled, varName = \"age\",                           other_GADSdat = gads_labeled, other_varName = \"hisei_new\",                           missingLabels = \"only\", addValueLabels = TRUE) extractMeta(gads_labeled, \"age\") #>    varName             varLabel format display_width labeled value                  valLabel #> 18     age Age of student at T1   F8.2            NA     yes   -99 missing: Not administered #> 19     age Age of student at T1   F8.2            NA     yes   -94 missing: Question omitted #>    missings #> 18     miss #> 19     miss"},{"path":"https://beckerbenj.github.io/eatGADS/articles/data_cleaning.html","id":"adding-and-removing-variables","dir":"Articles","previous_headings":"","what":"Adding and removing variables","title":"Comprehensive Data Cleaning Guide","text":"GADSdat objects, meta data stored alongside actual data set. Therefore, changes actual data often imply changes meta data. variable removed data set, meta data longer needed. new variable created, new meta data needs created. variable recoded, meta data entries need recoded accordingly.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/articles/data_cleaning.html","id":"selecting-or-removing-variables","dir":"Articles","previous_headings":"Adding and removing variables","what":"Selecting or removing variables","title":"Comprehensive Data Cleaning Guide","text":"certain subset variables GADSdat needed, individual variables can either extracted via extractVars() removed via removeVars().","code":"# Selecting variables gads_motint <- extractVars(gads_labeled,                             vars = c(\"int_a\", \"int_b\", \"int_c\", \"int_d\", \"instmot_a\")) #> Removing the following rows from meta data: idstud, idschool, idclass, schtype, sameteach, g8g9, ganztag, classsize, repeated, gender, age, language, migration, hisced, hisei_new, homepos, books, pared, computer_age, internet_age, int_use_a, int_use_b, truancy_a, truancy_b, truancy_c, instmot_b, instmot_c, instmot_d, norms_a, norms_b, norms_c, norms_d, norms_e, norms_f, anxiety_a, anxiety_b, anxiety_c, anxiety_d, anxiety_e, selfcon_a, selfcon_b, selfcon_c, selfcon_d, selfcon_e, worketh_a, worketh_b, worketh_c, worketh_d, worketh_e, worketh_f, worketh_g, worketh_h, worketh_i, intent_a, intent_b, intent_c, intent_d, intent_e, behav_a, behav_b, behav_c, behav_d, behav_e, behav_f, behav_g, behav_h, teach_a, teach_b, teach_c, teach_d, teach_e, cognact_a, cognact_b, cognact_c, cognact_d, cognact_e, cognact_f, cognact_g, cognact_h, cognact_i, discpline_a, discpline_b, discpline_c, discpline_d, discpline_e, relation_a, relation_b, relation_c, relation_d, relation_e, belong_a, belong_b, belong_c, belong_d, belong_e, belong_f, belong_g, belong_h, belong_i, attitud_a, attitud_b, attitud_c, attitud_d, attitud_e, attitud_f, attitud_g, attitud_h, grade_de, grade_ma, grade_bio, grade_che, grade_phy, grade_sci, ma_pv1, ma_pv2, ma_pv3, ma_pv4, ma_pv5, rea_pv1, rea_pv2, rea_pv3, rea_pv4, rea_pv5, sci_pv1, sci_pv2, sci_pv3, sci_pv4, sci_pv5 #> No rows added to meta data. namesGADS(gads_motint) #> [1] \"int_a\"     \"int_b\"     \"int_c\"     \"int_d\"     \"instmot_a\"  gads_int <- removeVars(gads_motint, vars = \"instmot_a\")  #> Removing the following rows from meta data: instmot_a #> No rows added to meta data. namesGADS(gads_int) #> [1] \"int_a\" \"int_b\" \"int_c\" \"int_d\""},{"path":"https://beckerbenj.github.io/eatGADS/articles/data_cleaning.html","id":"cloning-a-variable","dir":"Articles","previous_headings":"Adding and removing variables","what":"Cloning a variable","title":"Comprehensive Data Cleaning Guide","text":"variable can cloned using cloneVariable() function. data meta data cloned. function can helpful modified copy variable created. purpose, variable can cloned later modified (e.g., via recodeGADS).","code":"# Clone the variable \"sameteach\" gads_labeled <- cloneVariable(gads_labeled, varName = \"sameteach\", new_varName = \"sameteach2\")"},{"path":"https://beckerbenj.github.io/eatGADS/articles/data_cleaning.html","id":"adding-variables","dir":"Articles","previous_headings":"Adding and removing variables","what":"Adding variables","title":"Comprehensive Data Cleaning Guide","text":"Adding variables GADSdat object unfortunately straight forward requires utilizing underlying object structure. adding variables, dat object needs abstracted, new variables can added . Afterwards, meta data needs added using updateMeta() function.","code":"# Extract the data newDat <- gads_labeled$dat # Adding a variable newDat$classsize_kat <- ifelse(newDat$classsize > 15,                                           yes = \"big\", no = \"small\")  # Updating meta data gads_labeled2 <- updateMeta(gads_labeled, newDat = newDat) #> No rows removed from meta data. #> Adding meta data for the following variables: classsize_kat extractMeta(gads_labeled2, \"classsize_kat\") #>                     varName varLabel format display_width labeled value valLabel missings #> classsize_kat classsize_kat     <NA>   <NA>            NA      no    NA     <NA>     <NA>"},{"path":"https://beckerbenj.github.io/eatGADS/articles/data_cleaning.html","id":"recoding","dir":"Articles","previous_headings":"","what":"Recoding","title":"Comprehensive Data Cleaning Guide","text":"eatGADS provides functionality manual semi-automatic recoding variables.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/articles/data_cleaning.html","id":"removing-all-values-from-a-variable","dir":"Articles","previous_headings":"Recoding","what":"Removing all values from a variable","title":"Comprehensive Data Cleaning Guide","text":"instance purpose ensuring anonymity person data set, sometimes desirable empty sensitive variables. can performed using emptyTheseVariables() function.","code":"# Empty a variable completely gads_labeled <- emptyTheseVariables(gads_labeled, vars = \"idschool\") # Resulting frequency table table(gads_labeled$dat$idschool, useNA = \"ifany\") #>  #> <NA>  #>  500"},{"path":"https://beckerbenj.github.io/eatGADS/articles/data_cleaning.html","id":"manual-recoding","dir":"Articles","previous_headings":"Recoding","what":"Manual recoding","title":"Comprehensive Data Cleaning Guide","text":"function recodeGADS() allows manual recoding variable. Moreover, recodeGADS() allows recoding values without value labels even NA values.","code":"# Original data and meta data gads_labeled$dat$gender[1:10] #>  [1] 1 1 2 2 1 1 2 2 1 1 extractMeta(gads_labeled, \"gender\") #>    varName varLabel format display_width labeled value                  valLabel missings #> 14  gender   Gender   F8.0            NA     yes   -99                      <NA>     miss #> 15  gender   Gender   F8.0            NA     yes   -94 missing: Question omitted     miss #> 16  gender   Gender   F8.0            NA     yes     1                    Female    valid #> 17  gender   Gender   F8.0            NA     yes     2                      Male    valid # Recoding  gads_labeled <- recodeGADS(GADSdat = gads_labeled, varName = \"gender\",                             oldValues = c(1, 2), newValues = c(10, 20)) # New data and meta data gads_labeled$dat$gender[1:10] #>  [1] 10 10 20 20 10 10 20 20 10 10 extractMeta(gads_labeled, \"gender\") #>    varName varLabel format display_width labeled value                  valLabel missings #> 14  gender   Gender   F8.0            NA     yes   -99                      <NA>     miss #> 15  gender   Gender   F8.0            NA     yes   -94 missing: Question omitted     miss #> 16  gender   Gender   F8.0            NA     yes    10                    Female    valid #> 17  gender   Gender   F8.0            NA     yes    20                      Male    valid # Recoding of NA values  gads_labeled$dat$int_a[1:10] #>  [1]  2  2  3  2  1  2 NA NA NA NA gads_labeled <- recodeGADS(GADSdat = gads_labeled, varName = \"int_a\",                             oldValues = NA, newValues = -94) gads_labeled$dat$int_a[1:10] #>  [1]   2   2   3   2   1   2 -94 -94 -94 -94"},{"path":"https://beckerbenj.github.io/eatGADS/articles/data_cleaning.html","id":"setting-values-to-na","dir":"Articles","previous_headings":"Recoding","what":"Setting values to NA","title":"Comprehensive Data Cleaning Guide","text":"recoding specific values NA values, function recode2NA() exists. allows recoding specific value across multiple variables (recodeGADS() allows recoding multiple values single variable). Existing value labels specified values deleted. variable reported many cases recoded.","code":"# Recoding of values as Missing/NA gads_labeled$dat$schtype[1:10] #>  [1] 2 3 1 3 2 3 1 3 2 1 gads_labeled <- recode2NA(gads_labeled, recodeVars = c(\"hisei_new\", \"schtype\"),                            value = \"3\") #> Recodes in variable hisei_new: 0 #> Recodes in variable schtype: 111 gads_labeled$dat$schtype[1:10] #>  [1]  2 NA  1 NA  2 NA  1 NA  2  1"},{"path":"https://beckerbenj.github.io/eatGADS/articles/data_cleaning.html","id":"automatically-recoding-a-character-variable-to-a-labeled-numeric-variable","dir":"Articles","previous_headings":"Recoding","what":"Automatically recoding a character variable to a labeled numeric variable","title":"Comprehensive Data Cleaning Guide","text":"character variable can automatically recoded labeled numeric variable via multiChar2fac(). Via argument convertCase upper lower case can automatically adjusted.","code":"# Example data set test_df <- data.frame(id = 1:5, varChar = c(\"german\", \"English\",                                              \"english\", \"POLISH\", \"polish\"),                         stringsAsFactors = FALSE) test_gads <- import_DF(test_df)  # Recoding a character variable to numeric test_gads2 <- multiChar2fac(test_gads, vars = \"varChar\", var_suffix = \"_new\") extractMeta(test_gads2, \"varChar_new\") #>       varName  varLabel format display_width labeled value valLabel missings #> 3 varChar_new (recoded)  F10.0            NA     yes     1  english    valid #> 4 varChar_new (recoded)  F10.0            NA     yes     2  English    valid #> 5 varChar_new (recoded)  F10.0            NA     yes     3   german    valid #> 6 varChar_new (recoded)  F10.0            NA     yes     4   polish    valid #> 7 varChar_new (recoded)  F10.0            NA     yes     5   POLISH    valid # Recoding a character variable to numeric while simplying case test_gads2 <- multiChar2fac(test_gads, vars = \"varChar\", var_suffix = \"_new\",                             convertCase = \"upperFirst\") extractMeta(test_gads2, \"varChar_new\") #>       varName  varLabel format display_width labeled value valLabel missings #> 3 varChar_new (recoded)  F10.0            NA     yes     1  English    valid #> 4 varChar_new (recoded)  F10.0            NA     yes     2   German    valid #> 5 varChar_new (recoded)  F10.0            NA     yes     3   Polish    valid"},{"path":"https://beckerbenj.github.io/eatGADS/articles/data_cleaning.html","id":"automatically-recoding-a-variable-with-a-template","dir":"Articles","previous_headings":"Recoding","what":"Automatically recoding a variable with a template","title":"Comprehensive Data Cleaning Guide","text":"variable can automatically recoded labeled numeric variable via autoRecode(). can desirable, instance, recoding identifier variables.","code":"id_df <- data.frame(id = c(1101, 1102, 1103, 1104, 1105),                      varChar = c(\"german\", \"English\", \"english\", \"POLISH\", \"polish\"),                         stringsAsFactors = FALSE) id_gads <- import_DF(id_df)  # Recoding a character variable to numeric id_gads2 <- autoRecode(id_gads, var = \"id\", var_suffix = \"_new\") id_gads2$dat[, c(\"id\", \"id_new\")] #>     id id_new #> 1 1101      1 #> 2 1102      2 #> 3 1103      3 #> 4 1104      4 #> 5 1105      5"},{"path":"https://beckerbenj.github.io/eatGADS/articles/data_cleaning.html","id":"variable-sorting","dir":"Articles","previous_headings":"","what":"Variable sorting","title":"Comprehensive Data Cleaning Guide","text":"sorting variables GADSdat can adjusted individual variables complete set variables.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/articles/data_cleaning.html","id":"relocating-a-specific-variable","dir":"Articles","previous_headings":"Variable sorting","what":"Relocating a specific variable","title":"Comprehensive Data Cleaning Guide","text":"function relocateVariable() allows relocation single variable within GADSdat object.","code":"namesGADS(gads_labeled)[1:5] #> [1] \"idstud\"    \"idschool\"  \"idclass\"   \"schtype\"   \"sameteach\"  # Relocate a single variable within a the data set gads_labeled <- relocateVariable(GADSdat = gads_labeled, var = \"idschool\",                            after = \"schtype\") namesGADS(gads_labeled)[1:5] #> [1] \"idstud\"    \"idclass\"   \"schtype\"   \"idschool\"  \"sameteach\"  # Relocate a single variable to the beginning of the data set gads_labeled <- relocateVariable(GADSdat = gads_labeled, var = \"idschool\",                            after = NULL) namesGADS(gads_labeled)[1:5] #> [1] \"idschool\"  \"idstud\"    \"idclass\"   \"schtype\"   \"sameteach\""},{"path":"https://beckerbenj.github.io/eatGADS/articles/data_cleaning.html","id":"ordering-all-variables","dir":"Articles","previous_headings":"Variable sorting","what":"Ordering all variables","title":"Comprehensive Data Cleaning Guide","text":"function orderLike() allows reordering variables within GADSdat object.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/articles/data_cleaning.html","id":"changing-meta-data-and-data-via-an-excel-sheet","dir":"Articles","previous_headings":"","what":"Changing meta data (and data) via an Excel sheet","title":"Comprehensive Data Cleaning Guide","text":"far, introduced functions work well modifying meta data small data sets individual variables. However, frequently interested modifying meta data larger number variables simultaneously. purpose eatGADS provides workflow works well Excel spreadsheets. Thereby changes meta data divided two levels: variable value level.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/articles/data_cleaning.html","id":"variable-level","dir":"Articles","previous_headings":"Changing meta data (and data) via an Excel sheet","what":"Variable level","title":"Comprehensive Data Cleaning Guide","text":"start extracting change table via getChangeMeta() function. principle one modify change table directly R, convenient Excel. change table can written .xlsx via eatAnalysis::write_xlsx() function. perform changes, entries made corresponding “_new”-columns.      Excel file can read back R via readxl::read_xlsx(). applyChangeMeta() function applies meta data changes GADSdat object.","code":"# variable level meta_var <- getChangeMeta(GADSdat = pisa, level = \"variable\") # write to Excel eatAnalysis::write_xlsx(meta_var, row.names = FALSE, \"variable_changes.xlsx\") # write to Excel meta_var_changed <- readxl::read_excel(\"variable_changes.xlsx\", col_types = rep(\"text\", 8)) gads2 <- applyChangeMeta(meta_var_changed, GADSdat = pisa) extractMeta(gads2, vars = c(\"idstud\", \"idschool\", \"schoolType\")) #>      varName                    varLabel format display_width labeled value #> 2     idstud Student Identifier Variable   F8.0            NA      no    NA #> 3   idschool                   School-ID  F10.0            NA      no    NA #> 5 schoolType                School track   F8.0            NA     yes     1 #> 6 schoolType                School track   F8.0            NA     yes     2 #> 7 schoolType                School track   F8.0            NA     yes     3 #>                                    valLabel missings #> 2                                      <NA>     <NA> #> 3                                      <NA>     <NA> #> 5                Gymnasium (academic track)    valid #> 6                                Realschule    valid #> 7 schools with several courses of education    valid"},{"path":"https://beckerbenj.github.io/eatGADS/articles/data_cleaning.html","id":"value-level","dir":"Articles","previous_headings":"Changing meta data (and data) via an Excel sheet","what":"Value level","title":"Comprehensive Data Cleaning Guide","text":"value level, information value, value labels missings can changed. general workflow identical.     ","code":"# value level meta_val <- getChangeMeta(GADSdat = pisa, level = \"value\") # write to Excel eatAnalysis::write_xlsx(meta_val, row.names = FALSE, \"value_changes.xlsx\") # write to Excel meta_val_changed <- readxl::read_excel(\"value_changes.xlsx\",                                         col_types = c(\"text\", rep(c(\"numeric\", \"text\", \"text\"), 2))) gads3 <- applyChangeMeta(meta_val_changed, GADSdat = pisa) extractMeta(gads3, vars = c(\"schtype\", \"sameteach\")) #>     varName                               varLabel format display_width labeled value #> 4   schtype                           School track   F8.0            NA     yes     1 #> 5   schtype                           School track   F8.0            NA     yes     2 #> 6   schtype                           School track   F8.0            NA     yes     3 #> 7 sameteach Same math teacher in both school years   F8.0            NA     yes    10 #> 8 sameteach Same math teacher in both school years   F8.0            NA     yes    20 #>                                    valLabel missings #> 4                            Acamedic Track    valid #> 5                                Realschule    valid #> 6 schools with several courses of education    valid #> 7                                        No    valid #> 8                                       Yes    valid"},{"path":"https://beckerbenj.github.io/eatGADS/articles/getGADS.html","id":"why","dir":"Articles","previous_headings":"","what":"Why?","title":"`getGADS`: Using a relational eatGADS data base","text":"Relational data bases created eatGADS provide alternative way storing hierarchically structured data (e.g. educational large-scale assessments). Compared conventional approaches (one big multiple .sav/.Rdata files) yields following advantages: data set often smaller disk (especially compared .sav files) meta data can accessed without loading actual data need reshaping, different hierarchy levels can accessed independently saving working memory: often R struggles large data sets; eatGADS can choose variables load R flexible application value labels missing codes analyses R","code":""},{"path":"https://beckerbenj.github.io/eatGADS/articles/getGADS.html","id":"inspecting-the-data-base","dir":"Articles","previous_headings":"","what":"Inspecting the data base","title":"`getGADS`: Using a relational eatGADS data base","text":"can inspect data base structure namesGADS() function. function returns named list. Every list element represents hierarchy level. corresponding character vector contains variable names hierarchy level. example data base contains two hierarchy levels: student level (noImp) plausible value level (PVs). student level, row represents individual student. plausible value level, row represents imputation number specific domain individual student. can access meta information variables data set using extractMeta() function. supply variables names can also use named list nam extracted earlier. way, can extract meta information available hierarchy level. Commonly informative columns varLabel (containing variable labels), value (referencing labeled values), valLabel (containing value labels) missings (labeled value missing value (\"miss\") (\"valid\")).","code":"nam <- namesGADS(db_path) nam #> $noImp #>   [1] \"idstud\"       \"idschool\"     \"idclass\"      \"schtype\"      \"sameteach\"    #>   [6] \"g8g9\"         \"ganztag\"      \"classsize\"    \"repeated\"     \"gender\"       #>  [11] \"age\"          \"language\"     \"migration\"    \"hisced\"       \"hisei\"        #>  [16] \"homepos\"      \"books\"        \"pared\"        \"computer_age\" \"internet_age\" #>  [21] \"int_use_a\"    \"int_use_b\"    \"truancy_a\"    \"truancy_b\"    \"truancy_c\"    #>  [26] \"int_a\"        \"int_b\"        \"int_c\"        \"int_d\"        \"instmot_a\"    #>  [31] \"instmot_b\"    \"instmot_c\"    \"instmot_d\"    \"norms_a\"      \"norms_b\"      #>  [36] \"norms_c\"      \"norms_d\"      \"norms_e\"      \"norms_f\"      \"anxiety_a\"    #>  [41] \"anxiety_b\"    \"anxiety_c\"    \"anxiety_d\"    \"anxiety_e\"    \"selfcon_a\"    #>  [46] \"selfcon_b\"    \"selfcon_c\"    \"selfcon_d\"    \"selfcon_e\"    \"worketh_a\"    #>  [51] \"worketh_b\"    \"worketh_c\"    \"worketh_d\"    \"worketh_e\"    \"worketh_f\"    #>  [56] \"worketh_g\"    \"worketh_h\"    \"worketh_i\"    \"intent_a\"     \"intent_b\"     #>  [61] \"intent_c\"     \"intent_d\"     \"intent_e\"     \"behav_a\"      \"behav_b\"      #>  [66] \"behav_c\"      \"behav_d\"      \"behav_e\"      \"behav_f\"      \"behav_g\"      #>  [71] \"behav_h\"      \"teach_a\"      \"teach_b\"      \"teach_c\"      \"teach_d\"      #>  [76] \"teach_e\"      \"cognact_a\"    \"cognact_b\"    \"cognact_c\"    \"cognact_d\"    #>  [81] \"cognact_e\"    \"cognact_f\"    \"cognact_g\"    \"cognact_h\"    \"cognact_i\"    #>  [86] \"discpline_a\"  \"discpline_b\"  \"discpline_c\"  \"discpline_d\"  \"discpline_e\"  #>  [91] \"relation_a\"   \"relation_b\"   \"relation_c\"   \"relation_d\"   \"relation_e\"   #>  [96] \"belong_a\"     \"belong_b\"     \"belong_c\"     \"belong_d\"     \"belong_e\"     #> [101] \"belong_f\"     \"belong_g\"     \"belong_h\"     \"belong_i\"     \"attitud_a\"    #> [106] \"attitud_b\"    \"attitud_c\"    \"attitud_d\"    \"attitud_e\"    \"attitud_f\"    #> [111] \"attitud_g\"    \"attitud_h\"    \"grade_de\"     \"grade_ma\"     \"grade_bio\"    #> [116] \"grade_che\"    \"grade_phy\"    \"grade_sci\"    #>  #> $PVs #> [1] \"idstud\"    \"dimension\" \"imp\"       \"value\" # Meta data for one variable extractMeta(db_path, \"age\") #>   varName             varLabel format display_width labeled value valLabel #> 1     age Age of student at T1   F8.2            NA      no    NA     <NA> #>   missings data_table #> 1     <NA>      noImp extractMeta(db_path, nam$PVs) #>       varName                                       varLabel format #> 236    idstud                                     Student-ID   F8.0 #> 451    idstud                                     Student-ID   F8.0 #> 452 dimension Achievement dimension (math, reading, science)   <NA> #> 453 dimension Achievement dimension (math, reading, science)   <NA> #> 454 dimension Achievement dimension (math, reading, science)   <NA> #> 455       imp       Number of imputation of plausible values   <NA> #> 456     value                                Plausible Value   <NA> #>     display_width labeled value valLabel missings data_table #> 236            NA      no    NA     <NA>     <NA>      noImp #> 451            NA      no    NA     <NA>     <NA>        PVs #> 452            NA     yes     1       ma    valid        PVs #> 453            NA     yes     2      rea    valid        PVs #> 454            NA     yes     3      sci    valid        PVs #> 455            NA      no    NA     <NA>     <NA>        PVs #> 456            NA      no    NA     <NA>     <NA>        PVs # Meta data for manually chosen multiple variables extractMeta(db_path, c(\"idstud\", \"schtype\")) #>     varName     varLabel format display_width labeled value #> 236  idstud   Student-ID   F8.0            NA      no    NA #> 360 schtype School track   F8.0            NA     yes     1 #> 361 schtype School track   F8.0            NA     yes     2 #> 362 schtype School track   F8.0            NA     yes     3 #> 451  idstud   Student-ID   F8.0            NA      no    NA #>                                      valLabel missings data_table #> 236                                      <NA>     <NA>      noImp #> 360                Gymnasium (academic track)    valid      noImp #> 361                                Realschule    valid      noImp #> 362 schools with several courses of education    valid      noImp #> 451                                      <NA>     <NA>        PVs"},{"path":"https://beckerbenj.github.io/eatGADS/articles/getGADS.html","id":"extract-data-from-data-base","dir":"Articles","previous_headings":"","what":"Extract data from data base","title":"`getGADS`: Using a relational eatGADS data base","text":"extract data set data base, can use function getGADS(). data base stored server drive, getGADS_fast() provides identical functionality substantially increases performance. vSelect argument specify variable selection. important note getGADS() returns called GADSdat object. object type contains complex meta information (example also available SPSS data set), therefore directly usable data analysis. can, however, use extractMeta() function access meta data.","code":"gads1 <- getGADS(filePath = db_path, vSelect = c(\"idstud\", \"schtype\", \"gender\")) class(gads1) #> [1] \"GADSdat\" \"list\" extractMeta(gads1) #>     varName     varLabel format display_width labeled value #> 194  gender       Gender   F8.0            NA     yes     1 #> 195  gender       Gender   F8.0            NA     yes     2 #> 236  idstud   Student-ID   F8.0            NA      no    NA #> 360 schtype School track   F8.0            NA     yes     1 #> 361 schtype School track   F8.0            NA     yes     2 #> 362 schtype School track   F8.0            NA     yes     3 #>                                      valLabel missings #> 194                                    Female    valid #> 195                                      Male    valid #> 236                                      <NA>     <NA> #> 360                Gymnasium (academic track)    valid #> 361                                Realschule    valid #> 362 schools with several courses of education    valid"},{"path":"https://beckerbenj.github.io/eatGADS/articles/getGADS.html","id":"extract-data-from-gadsdat","dir":"Articles","previous_headings":"","what":"Extract data from GADSdat","title":"`getGADS`: Using a relational eatGADS data base","text":"want use data analyses R extract GADSdat object via function extractData2(). , make two important decisions: () values marked missing values treated (convertMiss)? (b) labeled values general treated (labels2character, labels2factor, labels2ordered, dropPartialLabels)? Per default, missing tags applied, meaning values tagged missing recoded NA (convertMiss == TRUE). Furthermore, per default, value labels dropped (labels2character = NULL, labels2factor = NULL, labels2ordered = NULL). specific variables, value labels applied resulting variable character variable, can specified via, example, setting labels2character = c(\"var1\", \"var2\"). general, recommend leaving labeled variables numeric converting values missing codes NA. required, value labels can always accessed via using extractMeta() GADSdat object data base.","code":"## leave all labeled variables as numeric, convert missings to NA dat1 <- extractData2(gads1) head(dat1) #>   idstud schtype gender #> 1      1       2      1 #> 2      2       3      1 #> 3      3       1      2 #> 4      4       3      2 #> 5      5       2      1 #> 6      6       3      1  ## convert selected labeled variable(s) to character, convert missings to NA dat2 <- extractData2(gads1, labels2character = c(\"schtype\")) head(dat2) #>   idstud                                   schtype gender #> 1      1                                Realschule      1 #> 2      2 schools with several courses of education      1 #> 3      3                Gymnasium (academic track)      2 #> 4      4 schools with several courses of education      2 #> 5      5                                Realschule      1 #> 6      6 schools with several courses of education      1  ## convert all labeled variables to character, convert missings to NA dat3 <- extractData2(gads1, labels2character = namesGADS(gads1)) head(dat3) #>   idstud                                   schtype gender #> 1      1                                Realschule Female #> 2      2 schools with several courses of education Female #> 3      3                Gymnasium (academic track)   Male #> 4      4 schools with several courses of education   Male #> 5      5                                Realschule Female #> 6      6 schools with several courses of education Female"},{"path":"https://beckerbenj.github.io/eatGADS/articles/getGADS.html","id":"selecting-different-hierarchy-levels","dir":"Articles","previous_headings":"","what":"Selecting different hierarchy levels","title":"`getGADS`: Using a relational eatGADS data base","text":"important feature eatGADS relational data bases data sets automatically returned correct hierarchy level. overview different data structures, see “Tidy Data” article explaining long wide format using repeated measures. educational large-scale assessments, data usually contain multiple imputations plausible values. Packages enable us analyzing types data (like eatRep) often require data long format. function getGADS() extracts data automatically appropriate structure, depending variable selection. select variables student level, data returned student level. student represented single row. additionally variables plausible Value data table extracted, returned data structure changes. PVs data table, data stored “student x dimension x plausible value number” level. returned data exactly structure. two examples highlight another feature getGADS(): variables substantial interest selected extraction. correct ID variables added automatically.","code":"gads1 <- getGADS(db_path, vSelect = c(\"schtype\", \"g8g9\")) dat1 <- extractData2(gads1) dim(dat1) #> [1] 500   3 head(dat1) #>   idstud schtype g8g9 #> 1      1       2   NA #> 2      2       3   NA #> 3      3       1    1 #> 4      4       3   NA #> 5      5       2   NA #> 6      6       3   NA gads2 <- getGADS(db_path, vSelect = c(\"schtype\", \"value\")) dat2 <- extractData2(gads2) dim(dat2) #> [1] 7500    5 head(dat2) #>   idstud schtype dimension imp       value #> 1      1       2         1   1  0.15372011 #> 2      1       2         2   1  0.43914365 #> 3      1       2         3   1  0.13177617 #> 4      1       2         1   2 -0.04119330 #> 5      1       2         2   2  0.01991714 #> 6      1       2         3   2  0.67830064"},{"path":"https://beckerbenj.github.io/eatGADS/articles/getGADS.html","id":"trend-data-bases","dir":"Articles","previous_headings":"","what":"Trend data bases","title":"`getGADS`: Using a relational eatGADS data base","text":"educational large-scale assessments, common challenge reporting longitudinal developments (trends). getTrendGADS allows extracting data multiple data bases identical variables . eatGADS comes three small trend data bases can used illustrative purposes.","code":"trend_path1 <- system.file(\"extdata\", \"trend_gads_2020.db\", package = \"eatGADS\") trend_path2 <- system.file(\"extdata\", \"trend_gads_2015.db\", package = \"eatGADS\") trend_path3 <- system.file(\"extdata\", \"trend_gads_2010.db\", package = \"eatGADS\") gads_trend <- getTrendGADS(filePaths = c(trend_path1, trend_path2, trend_path3),                             vSelect = c(\"idstud\", \"dimension\", \"score\"),                             years = c(2020, 2015, 2010), fast = FALSE) #>  -----  Loading GADS 2020 -----  #>  -----  Loading GADS 2015 -----  #>  -----  Loading GADS 2010 ----- dat_trend <- extractData2(gads_trend) head(dat_trend) #>   idstud dimension imp    score year #> 1     61         1   2 434.1060 2020 #> 2     61         2   2 434.1060 2020 #> 3     62         1   1 426.8199 2020 #> 4     62         2   1 426.8199 2020 #> 5     63         1   2 427.7327 2020 #> 6     63         2   2 427.7327 2020"},{"path":"https://beckerbenj.github.io/eatGADS/articles/import_raw.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Handling meta data","text":"package can installed GitHub. Note older R versions issues installations online repositories like GitHub. R version > 3.6.0 work without issues.","code":"devtools::install_github(\"beckerbenj/eatGADS\") # loading the package library(eatGADS)"},{"path":[]},{"path":"https://beckerbenj.github.io/eatGADS/articles/import_raw.html","id":"importing-from-spss","dir":"Articles","previous_headings":"Importing data into the GADSdat format","what":"Importing from SPSS","title":"Handling meta data","text":"R offers variety tools import data sorts data formats. SPSS data (.sav files) can imported directly GADSdat format, haven used backend. Note easiest way import data GADSdat format.","code":"# importing an SPSS file gads <- import_spss(\"path/example.sav\")"},{"path":"https://beckerbenj.github.io/eatGADS/articles/import_raw.html","id":"importing-from-excel-etc-","dir":"Articles","previous_headings":"Importing data into the GADSdat format","what":"Importing from Excel etc.","title":"Handling meta data","text":"file types imported R first supplied data.frames import_raw. small selection functions import data data.frames. extensive overview importing functions using package readr see also book chapter, package readxl explained detail [homepage] (https://readxl.tidyverse.org/). files plain data files, meta data supplied separate data sheets. Note none data.frames can contain variables class factor, constitutes meta data. using base R import data make sure use argument stringsAsFactors = FALSE. necessary, convert factors character via .character. import_raw takes three separate data.frames input. actual data set (df), variable labels (varLabels) value labels (valLabels). three objects supplied specific format. varLabels object contain two variables: varName, exactly correspond variable names df varLabels contain desired variable labels strings. Note data.frame contain many rows variables df. optional valLabels object contain four variables: varName, exactly correspond variable names df; values, correspond respective values df numeric vector (labels character vectors currently supported); valLabels, contain value labels strings; missings, column indicating whether value indicates missing value. Valid values missings \"valid\" = missing code \"miss\" = missing code. Note data.frame can contain varNames variables df. However, variables df occur valLabels.","code":"# importing text files input_txt <- read.table(\"path/example.txt\", stringsAsFactors = FALSE) # importing German csv files (; separated) input_csv <- read.csv2(\"path/example.csv\", stringsAsFactors = FALSE) # importing Excel files input_xlsx <- readxl::read_excel(\"path/example.xlsx\") # Example data set df <- data.frame(ID = 1:4, sex = c(0, 0, 1, 1),                   forename = c(\"Tim\", \"Bill\", \"Ann\", \"Chris\"), stringsAsFactors = FALSE) # Example variable labels varLabels <- data.frame(varName = c(\"ID\", \"sex\", \"forename\"),                          varLabel = c(\"Person Identifier\", \"Sex as self reported\",                                       \"first name as reported by teacher\"),                          stringsAsFactors = FALSE) # Example value labels valLabels <- data.frame(varName = rep(\"sex\", 3),                          value = c(0, 1, -99),                          valLabel = c(\"male\", \"female\", \"missing - omission\"),                          missings = c(\"valid\", \"valid\", \"miss\"), stringsAsFactors = FALSE)  df #>   ID sex forename #> 1  1   0      Tim #> 2  2   0     Bill #> 3  3   1      Ann #> 4  4   1    Chris varLabels #>    varName                          varLabel #> 1       ID                 Person Identifier #> 2      sex              Sex as self reported #> 3 forename first name as reported by teacher valLabels #>   varName value           valLabel missings #> 1     sex     0               male    valid #> 2     sex     1             female    valid #> 3     sex   -99 missing - omission     miss  # import  gads <- import_raw(df = df, varLabels = varLabels, valLabels = valLabels)"},{"path":"https://beckerbenj.github.io/eatGADS/articles/import_raw.html","id":"gadsdat-class","dir":"Articles","previous_headings":"","what":"GADSdat class","title":"Handling meta data","text":"resulting object class GADSdat contains data sheet meta data sheet.","code":"# Inpsect resulting object  gads  #> $dat #>   ID sex forename #> 1  1   0      Tim #> 2  2   0     Bill #> 3  3   1      Ann #> 4  4   1    Chris #>  #> $labels #>    varName                          varLabel format display_width labeled value #> 1       ID                 Person Identifier   <NA>            NA      no    NA #> 2      sex              Sex as self reported   <NA>            NA     yes   -99 #> 3      sex              Sex as self reported   <NA>            NA     yes     0 #> 4      sex              Sex as self reported   <NA>            NA     yes     1 #> 5 forename first name as reported by teacher   <NA>            NA      no    NA #>             valLabel missings #> 1               <NA>     <NA> #> 2 missing - omission     miss #> 3               male    valid #> 4             female    valid #> 5               <NA>     <NA> #>  #> attr(,\"class\") #> [1] \"GADSdat\" \"list\""},{"path":"https://beckerbenj.github.io/eatGADS/articles/import_raw.html","id":"saving-gadsdat-objects","dir":"Articles","previous_headings":"GADSdat class","what":"Saving GADSdat objects","title":"Handling meta data","text":"GADSdat objects, example, can saved RDS files. also preferred data format distributing GADSdat objects FDZ.","code":"# Inpsect resulting object  saveRDS(gads, \"path/gads.RDS\")"},{"path":"https://beckerbenj.github.io/eatGADS/articles/import_raw.html","id":"using-gadsdat-objects-in-r","dir":"Articles","previous_headings":"GADSdat class","what":"Using GADSdat objects in R","title":"Handling meta data","text":"eatGADS provides convenient functions extracting data meta data GADSdat objects. extractMeta used access meta data specific variables (variables, specific variable name provided). extractData used extract data. arguments structure resulting data can defined. convertMiss = TRUE, default, used, values listed missing codes recoded NAs. convertLabels argument can specified value labels used. set \"character\" labeled values recoded character, applies “factor”. set \"numeric\", value labels applied.","code":"# Inpsect resulting object  extractMeta(gads, vars = c(\"sex\")) #>   varName             varLabel format display_width labeled value #> 2     sex Sex as self reported   <NA>            NA     yes   -99 #> 3     sex Sex as self reported   <NA>            NA     yes     0 #> 4     sex Sex as self reported   <NA>            NA     yes     1 #>             valLabel missings #> 2 missing - omission     miss #> 3               male    valid #> 4             female    valid extractMeta(gads) #>    varName                          varLabel format display_width labeled value #> 1       ID                 Person Identifier   <NA>            NA      no    NA #> 2      sex              Sex as self reported   <NA>            NA     yes   -99 #> 3      sex              Sex as self reported   <NA>            NA     yes     0 #> 4      sex              Sex as self reported   <NA>            NA     yes     1 #> 5 forename first name as reported by teacher   <NA>            NA      no    NA #>             valLabel missings #> 1               <NA>     <NA> #> 2 missing - omission     miss #> 3               male    valid #> 4             female    valid #> 5               <NA>     <NA> # Extract data without applying labels dat1 <- extractData(gads, convertMiss = TRUE, convertLabels = \"numeric\") dat1 #>   ID sex forename #> 1  1   0      Tim #> 2  2   0     Bill #> 3  3   1      Ann #> 4  4   1    Chris  dat2 <- extractData(gads, convertMiss = TRUE, convertLabels = \"character\") dat2 #>   ID    sex forename #> 1  1   male      Tim #> 2  2   male     Bill #> 3  3 female      Ann #> 4  4 female    Chris"},{"path":"https://beckerbenj.github.io/eatGADS/articles/import_raw.html","id":"modifying-gadsdat-objects","dir":"Articles","previous_headings":"","what":"Modifying GADSdat objects","title":"Handling meta data","text":"GADSdat objects can also modified even though certain amount operations supported. smaller changes data meta data number convenience functions exists. functions allow modifying variable labels (changeVarLabels), modifying variable names (changeVarNames) recoding values (recodeGADS). simultaneous changes multiple variables set functions implemented extract table changes applies changes written change table. enable easier work flow change table also saved Excel file, modified via Excel imported R. See help pages respective functions details.","code":"### wrapper functions # Modify variable labels gads2 <- changeVarLabels(gads, varName = c(\"ID\"), varLabel = c(\"Test taker ID\")) extractMeta(gads2, vars = \"ID\") #>   varName      varLabel format display_width labeled value valLabel missings #> 1      ID Test taker ID   <NA>            NA      no    NA     <NA>     <NA>  # Modify variable name gads3 <- changeVarNames(gads, oldNames = c(\"ID\"), newNames = c(\"idstud\")) extractMeta(gads3, vars = \"idstud\") #>   varName          varLabel format display_width labeled value valLabel #> 1  idstud Person Identifier   <NA>            NA      no    NA     <NA> #>   missings #> 1     <NA> extractData(gads3) #>   idstud    sex forename #> 1      1   male      Tim #> 2      2   male     Bill #> 3      3 female      Ann #> 4      4 female    Chris  # recode GADS gads4 <- recodeGADS(gads, varName = \"sex\", oldValues = c(0, 1, -99), newValues = c(1, 2, 99)) extractMeta(gads4, vars = \"sex\") #>   varName             varLabel format display_width labeled value #> 2     sex Sex as self reported   <NA>            NA     yes     1 #> 3     sex Sex as self reported   <NA>            NA     yes     2 #> 4     sex Sex as self reported   <NA>            NA     yes    99 #>             valLabel missings #> 2               male    valid #> 3             female    valid #> 4 missing - omission     miss extractData(gads4, convertLabels = \"numeric\") #>   ID sex forename #> 1  1   1      Tim #> 2  2   1     Bill #> 3  3   2      Ann #> 4  4   2    Chris # extract changeTable varChanges <- getChangeMeta(gads, level = \"variable\") # modify changeTable varChanges[varChanges$varName == \"ID\", \"varLabel_new\"] <- \"Test taker ID\" # Apply changes gads5 <- applyChangeMeta(varChanges, gads) extractMeta(gads5, vars = \"ID\") #>   varName      varLabel format display_width labeled value valLabel missings #> 1      ID Test taker ID   <NA>            NA      no    NA     <NA>     <NA>"},{"path":"https://beckerbenj.github.io/eatGADS/articles/import_raw.html","id":"writing-spss-files","dir":"Articles","previous_headings":"","what":"Writing SPSS files","title":"Handling meta data","text":"Objects class GADSdat can also exported SPSS format, utilizing haven. Note function slightly experimental problems specific character strings might occur. haven format preferred working R, GADSdat object can also transformed equivalent tibble format, data imported SPSS via haven.","code":"write_spss(gads, \"path/example_out.sav\") haven_dat <- export_tibble(gads) haven_dat #> # A tibble: 4 × 3 #>      ID sex        forename #>   <dbl> <hvn_lbl_> <chr>    #> 1     1 0          Tim      #> 2     2 0          Bill     #> 3     3 1          Ann      #> 4     4 1          Chris lapply(haven_dat, attributes) #> $ID #> $ID$label #> [1] \"Person Identifier\" #>  #>  #> $sex #> $sex$label #> [1] \"Sex as self reported\" #>  #> $sex$na_values #> [1] -99 #>  #> $sex$class #> [1] \"haven_labelled_spss\" \"haven_labelled\"      #>  #> $sex$labels #> missing - omission               male             female  #>                -99                  0                  1  #>  #>  #> $forename #> $forename$label #> [1] \"first name as reported by teacher\" #>  #> $forename$na_values #> character(0)"},{"path":"https://beckerbenj.github.io/eatGADS/articles/import_spss.html","id":"importing","dir":"Articles","previous_headings":"","what":"Importing","title":"`import_spss`: Importing data from 'SPSS'","text":"can import .sav data set via import_spss() function. Checks variable names (data base compatibility) performed automatically. Changes variable names reported console. behavior can suppressed setting checkVarNames = FALSE.","code":"library(eatGADS) sav_path <- system.file(\"extdata\", \"pisa.zsav\", package = \"eatGADS\") gads_obj <- import_spss(sav_path)"},{"path":"https://beckerbenj.github.io/eatGADS/articles/import_spss.html","id":"gadsdat-objects","dir":"Articles","previous_headings":"","what":"GADSdat objects","title":"`import_spss`: Importing data from 'SPSS'","text":"resulting object class GADSdat. basically named list containing actual data (dat) meta data (labels). names variables GADSdat object can accessed via namesGADS() function. meta data variables can accessed via extractMeta() function. Commonly, informative columns varLabel (containing variable labels), value (referencing labeled values), valLabel (containing value labels) missings (missing tag: labeled value missing value (\"miss\") (\"valid\")).","code":"class(gads_obj) #> [1] \"GADSdat\" \"list\" names(gads_obj) #> [1] \"dat\"    \"labels\" namesGADS(gads_obj) #>   [1] \"idstud\"       \"idschool\"     \"idclass\"      \"schtype\"      \"sameteach\"    #>   [6] \"g8g9\"         \"ganztag\"      \"classsize\"    \"repeated\"     \"gender\"       #>  [11] \"age\"          \"language\"     \"migration\"    \"hisced\"       \"hisei\"        #>  [16] \"homepos\"      \"books\"        \"pared\"        \"computer_age\" \"internet_age\" #>  [21] \"int_use_a\"    \"int_use_b\"    \"truancy_a\"    \"truancy_b\"    \"truancy_c\"    #>  [26] \"int_a\"        \"int_b\"        \"int_c\"        \"int_d\"        \"instmot_a\"    #>  [31] \"instmot_b\"    \"instmot_c\"    \"instmot_d\"    \"norms_a\"      \"norms_b\"      #>  [36] \"norms_c\"      \"norms_d\"      \"norms_e\"      \"norms_f\"      \"anxiety_a\"    #>  [41] \"anxiety_b\"    \"anxiety_c\"    \"anxiety_d\"    \"anxiety_e\"    \"selfcon_a\"    #>  [46] \"selfcon_b\"    \"selfcon_c\"    \"selfcon_d\"    \"selfcon_e\"    \"worketh_a\"    #>  [51] \"worketh_b\"    \"worketh_c\"    \"worketh_d\"    \"worketh_e\"    \"worketh_f\"    #>  [56] \"worketh_g\"    \"worketh_h\"    \"worketh_i\"    \"intent_a\"     \"intent_b\"     #>  [61] \"intent_c\"     \"intent_d\"     \"intent_e\"     \"behav_a\"      \"behav_b\"      #>  [66] \"behav_c\"      \"behav_d\"      \"behav_e\"      \"behav_f\"      \"behav_g\"      #>  [71] \"behav_h\"      \"teach_a\"      \"teach_b\"      \"teach_c\"      \"teach_d\"      #>  [76] \"teach_e\"      \"cognact_a\"    \"cognact_b\"    \"cognact_c\"    \"cognact_d\"    #>  [81] \"cognact_e\"    \"cognact_f\"    \"cognact_g\"    \"cognact_h\"    \"cognact_i\"    #>  [86] \"discpline_a\"  \"discpline_b\"  \"discpline_c\"  \"discpline_d\"  \"discpline_e\"  #>  [91] \"relation_a\"   \"relation_b\"   \"relation_c\"   \"relation_d\"   \"relation_e\"   #>  [96] \"belong_a\"     \"belong_b\"     \"belong_c\"     \"belong_d\"     \"belong_e\"     #> [101] \"belong_f\"     \"belong_g\"     \"belong_h\"     \"belong_i\"     \"attitud_a\"    #> [106] \"attitud_b\"    \"attitud_c\"    \"attitud_d\"    \"attitud_e\"    \"attitud_f\"    #> [111] \"attitud_g\"    \"attitud_h\"    \"grade_de\"     \"grade_ma\"     \"grade_bio\"    #> [116] \"grade_che\"    \"grade_phy\"    \"grade_sci\"    \"ma_pv1\"       \"ma_pv2\"       #> [121] \"ma_pv3\"       \"ma_pv4\"       \"ma_pv5\"       \"rea_pv1\"      \"rea_pv2\"      #> [126] \"rea_pv3\"      \"rea_pv4\"      \"rea_pv5\"      \"sci_pv1\"      \"sci_pv2\"      #> [131] \"sci_pv3\"      \"sci_pv4\"      \"sci_pv5\" extractMeta(gads_obj, vars = c(\"schtype\", \"idschool\")) #>    varName     varLabel format display_width labeled value #> 2 idschool    School-ID   F8.0            NA      no    NA #> 4  schtype School track   F8.0            NA     yes     1 #> 5  schtype School track   F8.0            NA     yes     2 #> 6  schtype School track   F8.0            NA     yes     3 #>                                    valLabel missings #> 2                                      <NA>     <NA> #> 4                Gymnasium (academic track)    valid #> 5                                Realschule    valid #> 6 schools with several courses of education    valid"},{"path":"https://beckerbenj.github.io/eatGADS/articles/import_spss.html","id":"extracting-data-from-gadsdat","dir":"Articles","previous_headings":"","what":"Extracting data from GADSdat","title":"`import_spss`: Importing data from 'SPSS'","text":"want use data analyses R extract GADSdat object via function extractData2(). , make two important decisions: () values marked missing values treated (convertMiss)? (b) labeled values general treated (labels2character, labels2factor, labels2ordered, dropPartialLabels)? variable name provided labels2character, labels2factor, labels2ordered, value labels corresponding variable simply dropped. variable name provided labels2character, value labels corresponding variable applied resulting variable character variable. labels2factor converts variables factor labels2ordered converts variables ordered factors. See ?extractData2 details. general, recommend leaving labeled variables numeric converting values missing codes NA. default behavior extractData2(). required, value labels can always accessed via using extractMeta() GADSdat object data base.","code":"## convert all labeled variables to character dat1 <- extractData2(gads_obj, labels2character = namesGADS(gads_obj)) dat1[1:5, 1:10] #>   idstud idschool idclass                                   schtype sameteach #> 1      1      127     392                                Realschule       Yes #> 2      2       65     201 schools with several courses of education        No #> 3      3       10      34                Gymnasium (academic track)        No #> 4      4      103     319 schools with several courses of education       Yes #> 5      5       57     179                                Realschule       Yes #>                     g8g9 ganztag classsize               repeated gender #> 1                   <NA>      No         9 Did not repeat a grade Female #> 2                   <NA>      No        10 Did not repeat a grade Female #> 3 G8 - 8 years to abitur      No        28 Did not repeat a grade   Male #> 4                   <NA>      No        12 Did not repeat a grade   Male #> 5                   <NA>     Yes        25 Did not repeat a grade Female  ## leave labeled variables as numeric dat2 <- extractData2(gads_obj) dat2[1:5, 1:10] #>   idstud idschool idclass schtype sameteach g8g9 ganztag classsize repeated #> 1      1      127     392       2         2   NA       1         9        1 #> 2      2       65     201       3         1   NA       1        10        1 #> 3      3       10      34       1         1    1       1        28        1 #> 4      4      103     319       3         2   NA       1        12        1 #> 5      5       57     179       2         2   NA       2        25        1 #>   gender #> 1      1 #> 2      1 #> 3      2 #> 4      2 #> 5      1  ## leave labeled variables as numeric but convert some variables to character and some to factor dat3 <- extractData2(gads_obj, labels2character = c(\"gender\", \"language\"),                      labels2factor = c(\"schtype\", \"sameteach\")) dat3[1:5, 1:10] #>   idstud idschool idclass                                   schtype sameteach #> 1      1      127     392                                Realschule       Yes #> 2      2       65     201 schools with several courses of education        No #> 3      3       10      34                Gymnasium (academic track)        No #> 4      4      103     319 schools with several courses of education       Yes #> 5      5       57     179                                Realschule       Yes #>   g8g9 ganztag classsize repeated gender #> 1   NA       1         9        1 Female #> 2   NA       1        10        1 Female #> 3    1       1        28        1   Male #> 4   NA       1        12        1   Male #> 5   NA       2        25        1 Female"},{"path":"https://beckerbenj.github.io/eatGADS/articles/recoding_forcedChoice.html","id":"preparing-the-data-set","dir":"Articles","previous_headings":"","what":"Preparing the data set","title":"Recoding a forced choice item with a text field","text":"illustrated, data can loaded R GADSdat format via functions import_spss(), import_DF() import_raw(). Depending original format, omitted responses open text fields might stored empty strings instead NAs. cases, recode2NA() function used recode values NA. Per default, matching strings across variables data set recoded. Specific variables selection can specified using recodeVars argument. Note function performs recodings exact matches single, specific value (example \"\").","code":"gads <- recode2NA(gads, value = \"\") #> Recodes in variable ID: 0 #> Recodes in variable mcvar: 0 #> Recodes in variable stringvar: 3"},{"path":"https://beckerbenj.github.io/eatGADS/articles/recoding_forcedChoice.html","id":"creating-and-editing-a-lookup-table","dir":"Articles","previous_headings":"","what":"Creating and editing a lookup table","title":"Recoding a forced choice item with a text field","text":"createLookup(), can create lookup table allows recoding one multiple variables. can choose string variables GADSdat object like recode using recodeVars argument. resulting lookup table long format data.frame rows variable x value pairings. case want sort output make recoding easier, argument sort_by can used. Extra columns can added lookup table argument addCols (can also added later manually e.g. Excel). respective column names irrelevant just convenience purpose. Now add desired values recoding. use () existing value labels corresponding numerical, labeled variable (b) consistent new values can serve value labels later. Spelling mistakes within recoding result different values output! fill columns use R directly modify columns. Alternatively, recommend using eatAnalysis::write_xlsx() create Excel file can fill values.    filling Excel sheet lookup table might look like :      Excel file can read back R via readxl::read_xlsx(). Detailed information missing values recoded provided last section vignette. one person working variable want use templates, may 2 different possible recode values (example: new new2) . can fill lookup table choose one want prioritize later. use collapseColumns() function get correct layout final lookup table. function merges columns containing new values. using prioritize argument can decide column preferred. NA prioritized column, column used instead.","code":"lookup <- createLookup(GADSdat = gads, recodeVars = \"stringvar\", sort_by = 'value',                         addCols = c(\"new\", \"new2\"))  lookup #>    variable   value new new2 #> 1 stringvar    <NA>  NA   NA #> 2 stringvar     Eng  NA   NA #> 3 stringvar England  NA   NA #> 4 stringvar    Germ  NA   NA #> 5 stringvar  German  NA   NA #> 6 stringvar     Ita  NA   NA #> 7 stringvar   Italy  NA   NA # write lookup table to Excel eatAnalysis::write_xlsx(lookup, \"lookup_forcedChoice.xlsx\") # read lookup table back to R lookup <- readxl::read_xlsx(\"lookup_forcedChoice.xlsx\") lookup #>    variable   value     new    new2 #> 1 stringvar    <NA> missing    miss #> 2 stringvar     Eng England England #> 3 stringvar England    <NA> England #> 4 stringvar    Germ Germany    <NA> #> 5 stringvar  German Germany Germany #> 6 stringvar     Ita    <NA>   Italy #> 7 stringvar   Italy   Italy   Italy lookup_formatted <- collapseColumns(lookup = lookup, recodeVars = c(\"new\", \"new2\"),                                      prioritize = \"new\") lookup_formatted #>    variable   value value_new #> 1 stringvar    <NA>   missing #> 2 stringvar     Eng   England #> 3 stringvar England   England #> 4 stringvar    Germ   Germany #> 5 stringvar  German   Germany #> 6 stringvar     Ita     Italy #> 7 stringvar   Italy     Italy"},{"path":"https://beckerbenj.github.io/eatGADS/articles/recoding_forcedChoice.html","id":"apply-lookup-to-gadsdat","dir":"Articles","previous_headings":"","what":"Apply lookup to GADSdat","title":"Recoding a forced choice item with a text field","text":"perform actual data recoding using applyLookup() function. applies recodes defined lookup table. means lookup table created multiple variables, applyLookup() performs recoding variables simultaneously. define suffix, old variable(s) overwritten.","code":"gads_string <- applyLookup(GADSdat = gads, lookup = lookup_formatted, suffix = \"_r\") #> No rows removed from meta data. #> Adding meta data for the following variables: stringvar_r  gads_string$dat #>    ID mcvar stringvar stringvar_r #> 1   1     3      <NA>     missing #> 2   2     2     Italy       Italy #> 3   3     3   England     England #> 4   4     3       Ita       Italy #> 5   5     3       Eng     England #> 6   6    NA    German     Germany #> 7   7     1      Germ     Germany #> 8   8     2      <NA>     missing #> 9   9     3      <NA>     missing #> 10 10     3       Eng     England"},{"path":"https://beckerbenj.github.io/eatGADS/articles/recoding_forcedChoice.html","id":"integrate-character-and-numeric-variable","dir":"Articles","previous_headings":"","what":"Integrate character and numeric variable","title":"Recoding a forced choice item with a text field","text":"next step integrate string variable integer via collapseMC_Text() function. mc_var text_var specify variables used recoding. mc_code4text argument specify value label mc_var indicates text_var contains valid information (example \"\"). mc_var missing, text_var also utilized (e.g. row 6). valid value mc_var code mc_code4text, information text_var ignored (e.g. row 2). New value labels created entries text_var without corresponding value labels. new value labels ordered alphabetically inserted already existing ones. Additional information missings treated function can found last section vignette. Note contrast createLookup(), collapseColumns() applyLookup() function works single forced choice variable pair. Integrating multiple variable pairs performed separate steps. checkMissings() function automatically setting missing values GADSdat object. new values receive missing codes, checkMissings() necessary. However, example new values representing missings added, therefore function change GADSdat object.","code":"gads_final <- collapseMC_Text(GADSdat = gads_string, mc_var = \"mcvar\",                                text_var = \"stringvar_r\", mc_code4text = \"other\",                                var_suffix = \"_r\", label_suffix = \"(recoded)\") #> No rows removed from meta data. #> Adding meta data for the following variables: mcvar_r  gads_final$dat #>    ID mcvar stringvar stringvar_r mcvar_r #> 1   1     3      <NA>     missing     -99 #> 2   2     2     Italy       Italy       2 #> 3   3     3   England     England       4 #> 4   4     3       Ita       Italy       5 #> 5   5     3       Eng     England       4 #> 6   6    NA    German     Germany       1 #> 7   7     1      Germ     Germany       1 #> 8   8     2      <NA>     missing       2 #> 9   9     3      <NA>     missing     -99 #> 10 10     3       Eng     England       4 extractMeta(gads_final, \"mcvar_r\") #>    varName  varLabel format display_width labeled value valLabel missings #> 8  mcvar_r (recoded)   F8.2            NA     yes     1  Germany    valid #> 9  mcvar_r (recoded)   F8.2            NA     yes     2   Poland    valid #> 10 mcvar_r (recoded)   F8.2            NA     yes     3    other    valid #> 11 mcvar_r (recoded)   F8.2            NA     yes   -99  missing     miss #> 12 mcvar_r (recoded)   F8.2            NA     yes     4  England    valid #> 13 mcvar_r (recoded)   F8.2            NA     yes     5    Italy    valid gads_final <- checkMissings(GADSdat = gads_final, missingLabel = \"missing\",                              addMissingCode = TRUE, addMissingLabel = FALSE) extractMeta(gads_final, \"mcvar_r\") #>    varName  varLabel format display_width labeled value valLabel missings #> 8  mcvar_r (recoded)   F8.2            NA     yes     1  Germany    valid #> 9  mcvar_r (recoded)   F8.2            NA     yes     2   Poland    valid #> 10 mcvar_r (recoded)   F8.2            NA     yes     3    other    valid #> 11 mcvar_r (recoded)   F8.2            NA     yes   -99  missing     miss #> 12 mcvar_r (recoded)   F8.2            NA     yes     4  England    valid #> 13 mcvar_r (recoded)   F8.2            NA     yes     5    Italy    valid"},{"path":"https://beckerbenj.github.io/eatGADS/articles/recoding_forcedChoice.html","id":"remove-variables-from-gadsdat","dir":"Articles","previous_headings":"","what":"Remove variables from GADSdat","title":"Recoding a forced choice item with a text field","text":"last step can remove intermediate superfluous variables GADSdat object using function removeVars().","code":"gads_final <- removeVars(GADSdat = gads_final, vars = c(\"mcvar\", \"stringvar_r\")) #> Removing the following rows from meta data: mcvar, stringvar_r #> No rows added to meta data. gads_final$dat #>    ID stringvar mcvar_r #> 1   1      <NA>     -99 #> 2   2     Italy       2 #> 3   3   England       4 #> 4   4       Ita       5 #> 5   5       Eng       4 #> 6   6    German       1 #> 7   7      Germ       1 #> 8   8      <NA>       2 #> 9   9      <NA>     -99 #> 10 10       Eng       4"},{"path":"https://beckerbenj.github.io/eatGADS/articles/recoding_forcedChoice.html","id":"missing-value-codes","dir":"Articles","previous_headings":"","what":"Missing value codes","title":"Recoding a forced choice item with a text field","text":"scenarios, might conceptual differences missing codes data (e.g. invalid responses, item administered, omission). conceptual differences might require different integration two variables (numerical & labeled, character) depending type missing. section, illustrate collapseMC_Text() behaves depending missings defined data. illustrate described behavior, included additional SPSS data set package forced choice variable pair including possible value missing combinations. possible values string variable new valid, indicating arbitrary valid entry, NA indicating example omission special missing, indicating example invalid entry. variables valid contradicting entries, collapseMC_Text() prefers information numerical, labeled variable (e.g. row 2). entries missing, behavior collapseMC_Text() depends missing type character variable. missing indicated via explicit missing definition (special missing example), missing code preferred missing codes numerical, labeled variable (e.g. row 11). missing indicated via actual NA character variable, information numerical, labeled variable preferred (e.g. row 7).","code":"data_path_miss <- system.file(\"extdata\", \"forcedChoice_missings.sav\", package = \"eatGADS\") gads_miss <- import_spss(data_path_miss) gads_miss <- recode2NA(gads_miss, value = \"\") #> Recodes in variable ID: 0 #> Recodes in variable mc: 0 #> Recodes in variable string: 4  # Show example data set gads_miss #> $dat #>    ID  mc          string #> 1   1   2       new valid #> 2   2   1       new valid #> 3   3 -99       new valid #> 4   4 -98       new valid #> 5   5   2            <NA> #> 6   6   1            <NA> #> 7   7 -99            <NA> #> 8   8 -98            <NA> #> 9   9   2 special missing #> 10 10   1 special missing #> 11 11 -99 special missing #> 12 12 -98 special missing #>  #> $labels #>   varName varLabel format display_width labeled value        valLabel missings #> 1      ID     <NA>   F8.0            NA      no    NA            <NA>     <NA> #> 2      mc     <NA>   F8.2            NA     yes     1           valid    valid #> 3      mc     <NA>   F8.2            NA     yes     2           other    valid #> 4      mc     <NA>   F8.2            NA     yes   -99 missing omitted     miss #> 5      mc     <NA>   F8.2            NA     yes   -98 special missing     miss #> 6  string     <NA>    A15            NA      no    NA            <NA>     <NA> #>  #> attr(,\"class\") #> [1] \"GADSdat\" \"list\" # summarize numerical, labeled variable and character variable gads <- collapseMC_Text(gads_miss, \"mc\", \"string\", mc_code4text = \"other\", \"_r\", \"recoded\") #> No rows removed from meta data. #> Adding meta data for the following variables: mc_r gads$dat #>    ID  mc          string mc_r #> 1   1   2       new valid    3 #> 2   2   1       new valid    1 #> 3   3 -99       new valid    3 #> 4   4 -98       new valid    3 #> 5   5   2            <NA>    2 #> 6   6   1            <NA>    1 #> 7   7 -99            <NA>  -99 #> 8   8 -98            <NA>  -98 #> 9   9   2 special missing  -98 #> 10 10   1 special missing    1 #> 11 11 -99 special missing  -98 #> 12 12 -98 special missing  -98"},{"path":"https://beckerbenj.github.io/eatGADS/articles/recoding_multipleChoice.html","id":"preparing-the-data-set","dir":"Articles","previous_headings":"","what":"Preparing the data set","title":"Recoding a multiple choice item with a text field","text":"illustrated, data can loaded R GADSdat format via functions import_spss(),import_DF() import_raw(). Depending original format, omitted responses open text fields might stored empty strings instead NAs. cases, recode2NA() function used recode values NA. Per default, matching strings across variables data set recoded. Specific variables selection can specified using recodeVars argument. Note function performs recodings exact matches single, specific string (example \"\").","code":"gads <- recode2NA(gads, value = \"\") #> Recodes in variable ID: 0 #> Recodes in variable mcvar1: 0 #> Recodes in variable mcother: 0 #> Recodes in variable stringvar: 1"},{"path":"https://beckerbenj.github.io/eatGADS/articles/recoding_multipleChoice.html","id":"creating-and-editing-a-lookup-table","dir":"Articles","previous_headings":"","what":"Creating and editing a lookup table","title":"Recoding a multiple choice item with a text field","text":"createLookup(), can create lookup table allows recoding one multiple variables. can choose string variables GADSdat object like recode using recodeVars argument. resulting lookup table long format data.frame rows variable x value pairings. case want sort output make recoding easier, argument sort_by can used. Extra columns can added lookup table argument addCols (can also added later manually e.g. Excel). test takers can insert multiple languages text field, add multiple recode columns lookup table. respective column names irrelevant just convenience purpose. Now add desired values recoding. use () unique parts existing variable labels corresponding dummy variables (see next section explanation) (b) consistent new values can serve variable labels later. Spelling mistakes within recoding result additional columns final data set! less values columns can leave remaining columns NA. fill columns use R directly modify columns. Alternatively, recommend using eatAnalysis::write_xlsx() create Excel file can fill values.    filling Excel sheet lookup table might look like :      Excel file can read back R via readxl::read_xlsx(). want create specific missing codes, insert desired (numerical!) missing codes columns (e.g. -96 lookup table ). corresponding value labels assigned later step.","code":"lookup <- createLookup(GADSdat = gads, recodeVars = \"stringvar\", sort_by = 'value',                         addCols = c(\"language\", \"language2\", \"language3\"))  lookup #>     variable          value language language2 language3 #> 1  stringvar           <NA>       NA        NA        NA #> 2  stringvar            -99       NA        NA        NA #> 3  stringvar  Eng, Pol, Ita       NA        NA        NA #> 4  stringvar            Ger       NA        NA        NA #> 5  stringvar         German       NA        NA        NA #> 6  stringvar Pol, Ita, Germ       NA        NA        NA #> 7  stringvar      Star Trek       NA        NA        NA #> 8  stringvar       eng, ita       NA        NA        NA #> 9  stringvar      germ, pol       NA        NA        NA #> 10 stringvar         polish       NA        NA        NA # write lookup table to Excel eatAnalysis::write_xlsx(lookup, \"lookup_forcedChoice.xlsx\") # write lookup table to Excel eatAnalysis::write_xlsx(lookup, \"lookup_multipleChoice.xlsx\")  ### perform recodes in Excel sheet!  # read lookup table back to R lookup <- readxl::read_xlsx(\"lookup_multipleChoice.xlsx\") lookup #>     variable          value language language2 language3 #> 1  stringvar           <NA>     <NA>      <NA>      <NA> #> 2  stringvar            -99     <NA>      <NA>      <NA> #> 3  stringvar  Eng, Pol, Ita  English    Polish   Italian #> 4  stringvar            Ger   German      <NA>      <NA> #> 5  stringvar         German   German      <NA>      <NA> #> 6  stringvar Pol, Ita, Germ   Polish   Italian    German #> 7  stringvar      Star Trek      -96       -96       -96 #> 8  stringvar       eng, ita  English   Italian      <NA> #> 9  stringvar      germ, pol   German    Polish      <NA> #> 10 stringvar         polish   Polish      <NA>      <NA>"},{"path":"https://beckerbenj.github.io/eatGADS/articles/recoding_multipleChoice.html","id":"apply-lookup-to-gadsdat","dir":"Articles","previous_headings":"","what":"Apply lookup to GADSdat","title":"Recoding a multiple choice item with a text field","text":"perform actual data recoding using applyLookup_expandVar() function. applies recodes defined lookup table, thereby creating many character variables additional columns lookup table. Variable names generated automatically. cases might recoded values specific missing codes. missing codes now specified hand value labels treated missings. function changeValLabels() used give specific value labels function changeMissings() attaches missing codes. loop performs appropriate labeling missing coding three new string variables.","code":"gads_string <- applyLookup_expandVar(GADSdat = gads, lookup = lookup) #> Warning in check_lookup(lookup, GADSdat): Not all values have a recode value #> assigned (missings in value_new). #> No rows removed from meta data. #> Adding meta data for the following variables: stringvar_1 #> No rows removed from meta data. #> Adding meta data for the following variables: stringvar_2 #> No rows removed from meta data. #> Adding meta data for the following variables: stringvar_3  gads_string$dat #>    ID mcvar1 mcother      stringvar stringvar_1 stringvar_2 stringvar_3 #> 1   1      1     -94         German      German        <NA>        <NA> #> 2   2    -94       0            Ger      German        <NA>        <NA> #> 3   3      0       1            Ger      German        <NA>        <NA> #> 4   4      1     -94           <NA>        <NA>        <NA>        <NA> #> 5   5    -94       0  Eng, Pol, Ita     English      Polish     Italian #> 6   6      0       1 Pol, Ita, Germ      Polish     Italian      German #> 7   7      1     -94       eng, ita     English     Italian        <NA> #> 8   8    -94       0      germ, pol      German      Polish        <NA> #> 9   9      0       1         polish      Polish        <NA>        <NA> #> 10 10      1     -94       eng, ita     English     Italian        <NA> #> 11 11    -94       0            -99        <NA>        <NA>        <NA> #> 12 12      0       1      Star Trek         -96         -96         -96 for(nam in paste0(\"stringvar_\", 1:3)) {   gads_string <- changeValLabels(gads_string, varName = nam,                                   value = -96, valLabel = \"Missing: Not codeable\")   gads_string <- changeMissings(gads_string, varName = nam,                                  value = -96, missings = \"miss\") }  gads_string$labels #>        varName         varLabel format display_width labeled value #> 1           ID             <NA>   F8.0            NA      no    NA #> 2       mcvar1 Language: German   F8.2            NA     yes   -94 #> 3       mcvar1 Language: German   F8.2            NA     yes     0 #> 4       mcvar1 Language: German   F8.2            NA     yes     1 #> 5      mcother  Language: other   F8.2            NA     yes   -94 #> 6      mcother  Language: other   F8.2            NA     yes     0 #> 7      mcother  Language: other   F8.2            NA     yes     1 #> 8    stringvar   Language: text    A14            NA     yes   -99 #> 9  stringvar_1   Language: text    A14            NA     yes   -99 #> 10 stringvar_1   Language: text    A14            NA     yes   -96 #> 11 stringvar_2   Language: text    A14            NA     yes   -99 #> 12 stringvar_2   Language: text    A14            NA     yes   -96 #> 13 stringvar_3   Language: text    A14            NA     yes   -99 #> 14 stringvar_3   Language: text    A14            NA     yes   -96 #>                 valLabel missings #> 1                   <NA>     <NA> #> 2                missing     miss #> 3                     no    valid #> 4                    yes    valid #> 5                missing     miss #> 6                     no    valid #> 7                    yes    valid #> 8      missing by design    valid #> 9      missing by design    valid #> 10 Missing: Not codeable     miss #> 11     missing by design    valid #> 12 Missing: Not codeable     miss #> 13     missing by design    valid #> 14 Missing: Not codeable     miss"},{"path":"https://beckerbenj.github.io/eatGADS/articles/recoding_multipleChoice.html","id":"match-values-to-variable-labels","dir":"Articles","previous_headings":"","what":"Match values to variable labels","title":"Recoding a multiple choice item with a text field","text":"integrating character variables multiple dummy variables, clear correspondence values character variable dummy variables. eatGADS requires information named character vector dummy variable names values values text variable names. vector can automatically generated matchValues_varLabels() function. function takes character vector (values) input matches values vector variable labels dummy variables (mc_vars). provide content character variables input values argument possible new values. case every already existing variable label part lookup table can use label_by_hand argument. always case variable representing response option might necessary response options well. Alternatively, values added value_string well, enable automatic matching.","code":"value_string <- c(lookup$language, lookup$language2, lookup$language3) named_char_vec <- matchValues_varLabels(GADSdat = gads_string,                                          mc_vars = c(\"mcvar1\", \"mcother\"),                                          values = value_string,                                          label_by_hand = c(\"other\"=\"mcother\")) named_char_vec #>    German     other  #>  \"mcvar1\" \"mcother\""},{"path":"https://beckerbenj.github.io/eatGADS/articles/recoding_multipleChoice.html","id":"integrate-character-and-numeric-variables","dir":"Articles","previous_headings":"","what":"Integrate character and numeric variables","title":"Recoding a multiple choice item with a text field","text":"using expanded GADSdat object named character vector can collapse information strings already existing numeric variables. following coding binary numeric variables required: 1 = true 0 = false (recoding see recodeGADS()). names text variables specified text_vars. entry text variables matches one binary numeric variables, binary numeric variable set 1. variable indicates entries text variable (mc_var_4text) recoded accordingly. row entries text variable can recoded binary numeric variables, invalid_miss_code inserted text variables mc_var_4text changed 0. valid entries beside binary numeric variables mc_var_4text set 1. valid entries text_vars begin , mc_var_4text left . empty entries text_vars assigned missing codes (notext_miss_code).","code":"gads_string2 <- collapseMultiMC_Text(GADSdat = gads_string, mc_vars = named_char_vec,                                       text_vars = c(\"stringvar_1\", \"stringvar_2\", \"stringvar_3\"),                                       mc_var_4text = \"mcother\", var_suffix = \"_r\",                                       label_suffix = \"(recoded)\",                                      invalid_miss_code = -98,                                       invalid_miss_label = \"Missing: By intention\",                                      notext_miss_code = -99,                                       notext_miss_label = \"Missing: By intention\") #> No rows removed from meta data. #> Adding meta data for the following variables: mcvar1_r, mcother_r, stringvar_1_r, stringvar_2_r, stringvar_3_r  gads_string2$dat #>    ID mcvar1 mcother      stringvar stringvar_1 stringvar_2 stringvar_3 #> 1   1      1     -94         German      German        <NA>        <NA> #> 2   2    -94       0            Ger      German        <NA>        <NA> #> 3   3      0       1            Ger      German        <NA>        <NA> #> 4   4      1     -94           <NA>        <NA>        <NA>        <NA> #> 5   5    -94       0  Eng, Pol, Ita     English      Polish     Italian #> 6   6      0       1 Pol, Ita, Germ      Polish     Italian      German #> 7   7      1     -94       eng, ita     English     Italian        <NA> #> 8   8    -94       0      germ, pol      German      Polish        <NA> #> 9   9      0       1         polish      Polish        <NA>        <NA> #> 10 10      1     -94       eng, ita     English     Italian        <NA> #> 11 11    -94       0            -99        <NA>        <NA>        <NA> #> 12 12      0       1      Star Trek         -96         -96         -96 #>    mcvar1_r mcother_r stringvar_1_r stringvar_2_r stringvar_3_r #> 1         1         0           -98           -98           -98 #> 2         1         0           -98           -98           -98 #> 3         1         0           -98           -98           -98 #> 4         1       -94           -99           -99           -99 #> 5       -94         1       English        Polish       Italian #> 6         1         1        Polish       Italian           -99 #> 7         1         1       English       Italian           -99 #> 8         1         1        Polish           -99           -99 #> 9         0         1        Polish           -99           -99 #> 10        1         1       English       Italian           -99 #> 11      -94         0           -99           -99           -99 #> 12        0         1           -96           -96           -96"},{"path":"https://beckerbenj.github.io/eatGADS/articles/recoding_multipleChoice.html","id":"trim-down-variables","dir":"Articles","previous_headings":"","what":"Trim down variables","title":"Recoding a multiple choice item with a text field","text":"Sometimes number additional entries limited (theoretically can infinite additional entries). means number character variables ‘trimmed’. remove2NAchar() performs trimming. Via max_num maximum number text variables defined text variables number removed data set. row data set contains valid entries one removed variables, specific missing code (na_value) inserted row remaining text variables.","code":"gads_string3 <- remove2NAchar(GADSdat = gads_string2,                                vars = c(\"stringvar_1_r\", \"stringvar_2_r\", \"stringvar_3_r\"),                                max_num = 2, na_value = -97,                                na_label = \"missing: excessive answers\") #> Removing the following rows from meta data: stringvar_3_r #> No rows added to meta data.  gads_string3$dat #>    ID mcvar1 mcother      stringvar stringvar_1 stringvar_2 stringvar_3 #> 1   1      1     -94         German      German        <NA>        <NA> #> 2   2    -94       0            Ger      German        <NA>        <NA> #> 3   3      0       1            Ger      German        <NA>        <NA> #> 4   4      1     -94           <NA>        <NA>        <NA>        <NA> #> 5   5    -94       0  Eng, Pol, Ita     English      Polish     Italian #> 6   6      0       1 Pol, Ita, Germ      Polish     Italian      German #> 7   7      1     -94       eng, ita     English     Italian        <NA> #> 8   8    -94       0      germ, pol      German      Polish        <NA> #> 9   9      0       1         polish      Polish        <NA>        <NA> #> 10 10      1     -94       eng, ita     English     Italian        <NA> #> 11 11    -94       0            -99        <NA>        <NA>        <NA> #> 12 12      0       1      Star Trek         -96         -96         -96 #>    mcvar1_r mcother_r stringvar_1_r stringvar_2_r #> 1         1         0           -98           -98 #> 2         1         0           -98           -98 #> 3         1         0           -98           -98 #> 4         1       -94           -99           -99 #> 5       -94         1           -97           -97 #> 6         1         1        Polish       Italian #> 7         1         1       English       Italian #> 8         1         1        Polish           -99 #> 9         0         1        Polish           -99 #> 10        1         1       English       Italian #> 11      -94         0           -99           -99 #> 12        0         1           -96           -96"},{"path":"https://beckerbenj.github.io/eatGADS/articles/recoding_multipleChoice.html","id":"multiple-character-variables-to-labeled-integers","dir":"Articles","previous_headings":"","what":"Multiple character variables to labeled integers","title":"Recoding a multiple choice item with a text field","text":"using collapseMultiMC_Text() (remove2NAchar()), new, additional values left character variables. multiChar2fac() transforms remaining text variables numeric, labeled variables. resulting labeled variables share exact value labels, sorted alphabetically.","code":"gads_numeric <- multiChar2fac(GADSdat = gads_string3, vars = c(\"stringvar_1_r\", \"stringvar_2_r\"),                                var_suffix = \"_r\", label_suffix = \"(recoded)\")  gads_numeric$dat #>    ID mcvar1 mcother      stringvar stringvar_1 stringvar_2 stringvar_3 #> 1   1      1     -94         German      German        <NA>        <NA> #> 2   2    -94       0            Ger      German        <NA>        <NA> #> 3   3      0       1            Ger      German        <NA>        <NA> #> 4   4      1     -94           <NA>        <NA>        <NA>        <NA> #> 5   5    -94       0  Eng, Pol, Ita     English      Polish     Italian #> 6   6      0       1 Pol, Ita, Germ      Polish     Italian      German #> 7   7      1     -94       eng, ita     English     Italian        <NA> #> 8   8    -94       0      germ, pol      German      Polish        <NA> #> 9   9      0       1         polish      Polish        <NA>        <NA> #> 10 10      1     -94       eng, ita     English     Italian        <NA> #> 11 11    -94       0            -99        <NA>        <NA>        <NA> #> 12 12      0       1      Star Trek         -96         -96         -96 #>    mcvar1_r mcother_r stringvar_1_r stringvar_2_r stringvar_1_r_r #> 1         1         0           -98           -98             -98 #> 2         1         0           -98           -98             -98 #> 3         1         0           -98           -98             -98 #> 4         1       -94           -99           -99             -99 #> 5       -94         1           -97           -97             -97 #> 6         1         1        Polish       Italian               3 #> 7         1         1       English       Italian               1 #> 8         1         1        Polish           -99               3 #> 9         0         1        Polish           -99               3 #> 10        1         1       English       Italian               1 #> 11      -94         0           -99           -99             -99 #> 12        0         1           -96           -96             -96 #>    stringvar_2_r_r #> 1              -98 #> 2              -98 #> 3              -98 #> 4              -99 #> 5              -97 #> 6                2 #> 7                2 #> 8              -99 #> 9              -99 #> 10               2 #> 11             -99 #> 12             -96  gads_final <- gads_numeric extractMeta(gads_final)[, c(\"varName\", \"value\", \"valLabel\", \"missings\")] #>            varName value                   valLabel missings #> 1               ID    NA                       <NA>     <NA> #> 2           mcvar1   -94                    missing     miss #> 3           mcvar1     0                         no    valid #> 4           mcvar1     1                        yes    valid #> 5          mcother   -94                    missing     miss #> 6          mcother     0                         no    valid #> 7          mcother     1                        yes    valid #> 8        stringvar   -99          missing by design    valid #> 9      stringvar_1   -99          missing by design    valid #> 10     stringvar_1   -96      Missing: Not codeable     miss #> 11     stringvar_2   -99          missing by design    valid #> 12     stringvar_2   -96      Missing: Not codeable     miss #> 13     stringvar_3   -99          missing by design    valid #> 14     stringvar_3   -96      Missing: Not codeable     miss #> 15        mcvar1_r   -94                    missing     miss #> 16        mcvar1_r     0                         no    valid #> 17        mcvar1_r     1                        yes    valid #> 18       mcother_r   -94                    missing     miss #> 19       mcother_r     0                         no    valid #> 20       mcother_r     1                        yes    valid #> 21   stringvar_1_r   -99      Missing: By intention     miss #> 22   stringvar_1_r   -98      Missing: By intention     miss #> 23   stringvar_1_r   -97 missing: excessive answers     miss #> 24   stringvar_1_r   -96      Missing: Not codeable     miss #> 25   stringvar_2_r   -99      Missing: By intention     miss #> 26   stringvar_2_r   -98      Missing: By intention     miss #> 27   stringvar_2_r   -97 missing: excessive answers     miss #> 28   stringvar_2_r   -96      Missing: Not codeable     miss #> 29 stringvar_1_r_r   -99      Missing: By intention     miss #> 30 stringvar_1_r_r   -98      Missing: By intention     miss #> 31 stringvar_1_r_r   -97 missing: excessive answers     miss #> 32 stringvar_1_r_r   -96      Missing: Not codeable     miss #> 33 stringvar_1_r_r     1                    English    valid #> 34 stringvar_1_r_r     2                    Italian    valid #> 35 stringvar_1_r_r     3                     Polish    valid #> 36 stringvar_2_r_r   -99      Missing: By intention     miss #> 37 stringvar_2_r_r   -98      Missing: By intention     miss #> 38 stringvar_2_r_r   -97 missing: excessive answers     miss #> 39 stringvar_2_r_r   -96      Missing: Not codeable     miss #> 40 stringvar_2_r_r     1                    English    valid #> 41 stringvar_2_r_r     2                    Italian    valid #> 42 stringvar_2_r_r     3                     Polish    valid"},{"path":"https://beckerbenj.github.io/eatGADS/articles/recoding_multipleChoice.html","id":"clean-data-set","dir":"Articles","previous_headings":"","what":"Clean data set","title":"Recoding a multiple choice item with a text field","text":"last step can remove unnecessary variables GADSdat object using removeVars().","code":"gads_final2 <- removeVars(gads_final, vars = c(\"stringvar_1\", \"stringvar_2\", \"stringvar_3\",                                                \"stringvar_1_r\", \"stringvar_2_r\")) #> Removing the following rows from meta data: stringvar_1, stringvar_2, stringvar_3, stringvar_1_r, stringvar_2_r #> No rows added to meta data."},{"path":"https://beckerbenj.github.io/eatGADS/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Benjamin Becker. Author, maintainer. Karoline Sachse. Contributor. Johanna Busse. Contributor.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Becker B (2025). eatGADS: Data Management Large Hierarchical Data. R package version 1.1.1.9000, https://beckerbenj.github.io/eatGADS/, https://github.com/beckerbenj/eatGADS.","code":"@Manual{,   title = {eatGADS: Data Management of Large Hierarchical Data},   author = {Benjamin Becker},   year = {2025},   note = {R package version 1.1.1.9000,     https://beckerbenj.github.io/eatGADS/},   url = {https://github.com/beckerbenj/eatGADS}, }"},{"path":[]},{"path":"https://beckerbenj.github.io/eatGADS/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Data Management of Large Hierarchical Data","text":"eatGADS (educational assessment tools: Greatest Assumable Data Set) data management data handling tool used Institute Educational Quality Improvement Germany (IQB). strong focus (automated) handling processing meta data. eatGADS uses SQLite3 back end especially suited importing data stored SPSS files. eatDB used data base creation use, haven used importing SPSS files.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Data Management of Large Hierarchical Data","text":"","code":"# Install stable version from CRAN via install.packages(\"eatGADS\")  # Install development version from GitHub via remotes::install_github(\"beckerbenj/eatGADS\")"},{"path":"https://beckerbenj.github.io/eatGADS/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Data Management of Large Hierarchical Data","text":"functionality eatGADS extensively documented various vignettes. questions regarding existing functionality requests new features, contact package author.","code":"# import SPSS data sav_path <- system.file(\"extdata\", \"pisa.zsav\", package = \"eatGADS\") gads_obj <- import_spss(sav_path)  # see names of variables in the data set namesGADS(gads_obj)  # extract meta data for specific variables extractMeta(gads_obj, vars = c(\"schtype\", \"idschool\"))  # extract data for data analysis while applying missing tags and value labels dat1 <- extractData2(gads_obj)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/applyChangeMeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply Meta Data Changes. — applyChangeMeta","title":"Apply Meta Data Changes. — applyChangeMeta","text":"Function apply meta data changes GADSdat object specified change table extracted getChangeMeta.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/applyChangeMeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply Meta Data Changes. — applyChangeMeta","text":"","code":"applyChangeMeta(changeTable, GADSdat, ...)  # S3 method for class 'varChanges' applyChangeMeta(changeTable, GADSdat, checkVarNames = TRUE, ...)  # S3 method for class 'valChanges' applyChangeMeta(   changeTable,   GADSdat,   existingMeta = c(\"stop\", \"value\", \"value_new\", \"drop\", \"ignore\"),   ... )"},{"path":"https://beckerbenj.github.io/eatGADS/reference/applyChangeMeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply Meta Data Changes. — applyChangeMeta","text":"changeTable Change table provided getChangeMeta. GADSdat GADSdat object imported via eatGADS. ... arguments passed methods. checkVarNames Logical. new variable names checked checkVarNames? existingMeta values recoded, meta data used (see details)?","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/applyChangeMeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply Meta Data Changes. — applyChangeMeta","text":"Returns modified GADSdat object.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/applyChangeMeta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply Meta Data Changes. — applyChangeMeta","text":"Values change columns contain NA remain unchanged. changes performed value levels, recoding existing values can occur. cases, existingMeta determines resulting meta data conflicts handled, either raising error occur (\"stop\"), keeping original meta data value (\"value\"), using meta data changeTable , incomplete, recoded value (\"value_new\"), leaving respective meta data untouched (\"ignore\"). Furthermore, one might recode multiple old values new value. currently possible existingMeta = \"drop\", drops related meta data value level, existingMeta = \"ignore\", leaves related meta data value level untouched.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/applyChangeMeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply Meta Data Changes. — applyChangeMeta","text":"","code":"# Change a variable name and label varChangeTable <- getChangeMeta(pisa, level = \"variable\") varChangeTable[1, c(\"varName_new\", \"varLabel_new\")] <- c(\"IDstud\", \"Person ID\")  pisa2 <- applyChangeMeta(varChangeTable, GADSdat = pisa)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/applyLookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode via lookup table. — applyLookup","title":"Recode via lookup table. — applyLookup","text":"Recode one multiple variables based lookup table created via createLookup (potentially formatted collapseColumns).","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/applyLookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode via lookup table. — applyLookup","text":"","code":"applyLookup(GADSdat, lookup, suffix = NULL)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/applyLookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode via lookup table. — applyLookup","text":"GADSdat GADSdat object. lookup Lookup table created createLookup - necessary -  collapsed collapseColumns. Column names must c(\"variable\", \"value\", \"value_new\"). suffix Suffix add existing variable names. NULL, old variables overwritten.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/applyLookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recode via lookup table. — applyLookup","text":"Returns recoded GADSdat.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/applyLookup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recode via lookup table. — applyLookup","text":"missing values column value_new, NAs inserted new values warning issued. complete work flow using lookup table recode multiple variables GADSdat : (0) optional: Recode empty strings NA (necessary, look table written excel). (1) create lookup table createLookup. (2) Save lookup table .xlsx write_xlsx eatAnalysis. (3) fill lookup table via Excel. (4) Import lookup table back R via read_excel readxl. (5) Apply final lookup table applyLookup. See applyLookup_expandVar recoding single variable multiple variables.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/applyLookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recode via lookup table. — applyLookup","text":"","code":"## create an example GADSdat iris2 <- iris iris2$Species <- as.character(iris2$Species) gads <- import_DF(iris2) #> Sepal.Length has been renamed to Sepal_Length #> Sepal.Width has been renamed to Sepal_Width #> Petal.Length has been renamed to Petal_Length #> Petal.Width has been renamed to Petal_Width  ## create Lookup lu <- createLookup(gads, recodeVars = \"Species\") lu$value_new <- c(\"plant 1\", \"plant 2\", \"plant 3\")  ## apply lookup table gads2 <- applyLookup(gads, lookup = lu, suffix = \"_r\") #> No rows removed from meta data. #> Adding meta data for the following variables: Species_r  ## only recode some values lu2 <- createLookup(gads, recodeVars = \"Species\") lu2$value_new <- c(\"plant 1\", \"plant 2\", NA) gads3 <- applyLookup(gads, lookup = lu2, suffix = \"_r\") #> Warning: Not all values have a recode value assigned (missings in value_new). #> No rows removed from meta data. #> Adding meta data for the following variables: Species_r"},{"path":"https://beckerbenj.github.io/eatGADS/reference/applyLookup_expandVar.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode via lookup table into multiple variables. — applyLookup_expandVar","title":"Recode via lookup table into multiple variables. — applyLookup_expandVar","text":"Recode one multiple variables based lookup table created via createLookup. contrast applyLookup, function allows creation multiple resulting variables single input variable. variables lookup except variable value treated recode columns.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/applyLookup_expandVar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode via lookup table into multiple variables. — applyLookup_expandVar","text":"","code":"applyLookup_expandVar(GADSdat, lookup)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/applyLookup_expandVar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode via lookup table into multiple variables. — applyLookup_expandVar","text":"GADSdat GADSdat object. lookup Lookup table created createLookup.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/applyLookup_expandVar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recode via lookup table into multiple variables. — applyLookup_expandVar","text":"Returns recoded GADSdat.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/applyLookup_expandVar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recode via lookup table into multiple variables. — applyLookup_expandVar","text":"variable contains information split multiple variables via manual recoding, applyLookup_expandVar can used. missing values recode column, NAs inserted new values. warning issued first column. complete work flow using lookup table expand variables GADSdat based manual recoding : (1) create lookup table createLookup. (2) Save lookup table .xlsx write_xlsx eatAnalysis. (3) fill lookup table via Excel. (4) Import lookup table back R via read_excel readxl. (5) Apply final lookup table applyLookup_expandVar. See applyLookup simply recoding variables GADSdat.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/applyLookup_expandVar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recode via lookup table into multiple variables. — applyLookup_expandVar","text":"","code":"## create an example GADSdat example_df <- data.frame(ID = 1:6,                         citizenship = c(\"germ\", \"engl\", \"germ, usa\", \"china\",                                         \"austral, morocco\", \"nothin\"),                         stringsAsFactors = FALSE) gads <- import_DF(example_df)  ## create Lookup lu <- createLookup(gads, recodeVars = \"citizenship\", addCol = c(\"cit_1\", \"cit_2\")) lu$cit_1 <- c(\"German\", \"English\", \"German\", \"Chinese\", \"Australian\", NA) lu$cit_2 <- c(NA, NA, \"USA\", NA, \"Morocco\", NA)  ## apply lookup table gads2 <- applyLookup_expandVar(gads, lookup = lu) #> Warning: Not all values have a recode value assigned (missings in value_new). #> No rows removed from meta data. #> Adding meta data for the following variables: citizenship_1 #> No rows removed from meta data. #> Adding meta data for the following variables: citizenship_2"},{"path":"https://beckerbenj.github.io/eatGADS/reference/applyNumCheck.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply recodes according to a numerical check data.frame. — applyNumCheck","title":"Apply recodes according to a numerical check data.frame. — applyNumCheck","text":"Applies recodes specified numCheck data.frame, created createNumCheck.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/applyNumCheck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply recodes according to a numerical check data.frame. — applyNumCheck","text":"","code":"applyNumCheck(GADSdat, numCheck)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/applyNumCheck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply recodes according to a numerical check data.frame. — applyNumCheck","text":"GADSdat GADSdat object. numCheck data.frame created createNumCheck.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/applyNumCheck.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply recodes according to a numerical check data.frame. — applyNumCheck","text":"recoded GADSdat.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/applyNumCheck.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply recodes according to a numerical check data.frame. — applyNumCheck","text":"function currently development.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/applyNumCheck.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply recodes according to a numerical check data.frame. — applyNumCheck","text":"","code":"# tbd"},{"path":"https://beckerbenj.github.io/eatGADS/reference/assimilateValLabels.html","id":null,"dir":"Reference","previous_headings":"","what":"Assimilate value labels. — assimilateValLabels","title":"Assimilate value labels. — assimilateValLabels","text":"Assimilate value labels multiple variables part GADSdat all_GADSdat object.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/assimilateValLabels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assimilate value labels. — assimilateValLabels","text":"","code":"assimilateValLabels(GADSdat, varNames, lookup = NULL)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/assimilateValLabels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assimilate value labels. — assimilateValLabels","text":"GADSdat GADSdat object imported via eatGADS. varNames Character string variable name. lookup Look data.frame.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/assimilateValLabels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assimilate value labels. — assimilateValLabels","text":"Returns GADSdat object changed meta data recoded values.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/assimilateValLabels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assimilate value labels. — assimilateValLabels","text":"Assimilation can performed using existing value labels look table containing least existing value labels. Missing codes reused based meta data first variable varNames.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/assimilateValLabels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assimilate value labels. — assimilateValLabels","text":"","code":"# Example data set facs_df <- data.frame(id = 1:3, fac1 = c(\"Eng\", \"Aus\", \"Ger\"),                       fac2 = c(\"Ger\", \"Franz\", \"Ita\"),                       fac3 = c(\"Kor\", \"Chi\", \"Alg\"),                       stringsAsFactors = TRUE) facs_gads <- import_DF(facs_df)  assimilateValLabels(facs_gads, varNames = paste0(\"fac\", 1:3)) #> $dat #>   id fac1 fac2 fac3 #> 1  1    4    6    8 #> 2  2    2    5    3 #> 3  3    6    7    1 #>  #> $labels #>    varName varLabel format display_width labeled value valLabel missings #> 1       id     <NA>   <NA>            NA      no    NA     <NA>     <NA> #> 2     fac1     <NA>  F10.0            NA     yes     1      Alg    valid #> 3     fac1     <NA>  F10.0            NA     yes     2      Aus    valid #> 4     fac1     <NA>  F10.0            NA     yes     3      Chi    valid #> 5     fac1     <NA>  F10.0            NA     yes     4      Eng    valid #> 6     fac1     <NA>  F10.0            NA     yes     5    Franz    valid #> 7     fac1     <NA>  F10.0            NA     yes     6      Ger    valid #> 8     fac1     <NA>  F10.0            NA     yes     7      Ita    valid #> 9     fac1     <NA>  F10.0            NA     yes     8      Kor    valid #> 10    fac2     <NA>  F10.0            NA     yes     1      Alg    valid #> 11    fac2     <NA>  F10.0            NA     yes     2      Aus    valid #> 12    fac2     <NA>  F10.0            NA     yes     3      Chi    valid #> 13    fac2     <NA>  F10.0            NA     yes     4      Eng    valid #> 14    fac2     <NA>  F10.0            NA     yes     5    Franz    valid #> 15    fac2     <NA>  F10.0            NA     yes     6      Ger    valid #> 16    fac2     <NA>  F10.0            NA     yes     7      Ita    valid #> 17    fac2     <NA>  F10.0            NA     yes     8      Kor    valid #> 18    fac3     <NA>  F10.0            NA     yes     1      Alg    valid #> 19    fac3     <NA>  F10.0            NA     yes     2      Aus    valid #> 20    fac3     <NA>  F10.0            NA     yes     3      Chi    valid #> 21    fac3     <NA>  F10.0            NA     yes     4      Eng    valid #> 22    fac3     <NA>  F10.0            NA     yes     5    Franz    valid #> 23    fac3     <NA>  F10.0            NA     yes     6      Ger    valid #> 24    fac3     <NA>  F10.0            NA     yes     7      Ita    valid #> 25    fac3     <NA>  F10.0            NA     yes     8      Kor    valid #>  #> attr(,\"class\") #> [1] \"GADSdat\" \"list\""},{"path":"https://beckerbenj.github.io/eatGADS/reference/autoRecode.html","id":null,"dir":"Reference","previous_headings":"","what":"Auto recode a variable in a GADSdat. — autoRecode","title":"Auto recode a variable in a GADSdat. — autoRecode","text":"Auto recode variable GADSdat. look table created containing respective recode pairs. existing look table can utilized via template. function somewhat mirrors functionality provided SPSS function autorecode.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/autoRecode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auto recode a variable in a GADSdat. — autoRecode","text":"","code":"autoRecode(   GADSdat,   var,   var_suffix = \"\",   label_suffix = \"\",   csv_path = NULL,   template = NULL )"},{"path":"https://beckerbenj.github.io/eatGADS/reference/autoRecode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auto recode a variable in a GADSdat. — autoRecode","text":"GADSdat GADSdat object. var Character string variable name recoded. var_suffix Variable suffix newly created GADSdat. empty character, existing variables overwritten. label_suffix Suffix added variable label newly created variable GADSdat. csv_path Path .csv file look table. template Existing look table.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/autoRecode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Auto recode a variable in a GADSdat. — autoRecode","text":"Returns GADSdat object.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/autoRecode.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Auto recode a variable in a GADSdat. — autoRecode","text":"existing template used look table saved .csv file, resulting look table contain existing recodes plus additional recode pairs required data.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/autoRecode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Auto recode a variable in a GADSdat. — autoRecode","text":"","code":"gads <- import_DF(data.frame(v1 = letters))  # auto recode without saving look up table gads2 <- autoRecode(gads, var = \"v1\", var_suffix = \"_num\")  # auto recode with saving look up table f <- tempfile(fileext = \".csv\") gads2 <- autoRecode(gads, var = \"v1\", var_suffix = \"_num\", csv_path = f)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/calculateScale.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a scale. — calculateScale","title":"Calculate a scale. — calculateScale","text":"Calculate scale variable based multiple items.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/calculateScale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a scale. — calculateScale","text":"","code":"calculateScale(   GADSdat,   items,   scale,   maxNA = length(items),   reportDescr = FALSE )"},{"path":"https://beckerbenj.github.io/eatGADS/reference/calculateScale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a scale. — calculateScale","text":"GADSdat data.frame GADSdat object. items character vector item variable names. scale character vector scale name. maxNA Maximum number allowed NA values items. reportDescr descriptive statistics reported calculated scale.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/calculateScale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a scale. — calculateScale","text":"Returns GADSdat containing newly computed variable.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/calculateScale.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate a scale. — calculateScale","text":"Descriptive statistics (including Cronbach's alpha, credit psy package) calculated printed console. new scale variable automatically inserted right last item original GADSdat.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/calculateScale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a scale. — calculateScale","text":"","code":"## items <- paste0(\"norms_\", letters[1:6]) pisa_new <- calculateScale(pisa, items = items, scale = \"norms\")"},{"path":"https://beckerbenj.github.io/eatGADS/reference/cbind.GADSdat.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind two GADSdat objects into a single GADSdat object by columns. — cbind.GADSdat","title":"Bind two GADSdat objects into a single GADSdat object by columns. — cbind.GADSdat","text":"secure way cbind data meta data two GADSdat objects. Currently, limited merging options supported.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/cbind.GADSdat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind two GADSdat objects into a single GADSdat object by columns. — cbind.GADSdat","text":"","code":"# S3 method for class 'GADSdat' cbind(..., deparse.level = 1)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/cbind.GADSdat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind two GADSdat objects into a single GADSdat object by columns. — cbind.GADSdat","text":"... Multiple GADSdat objects imported via eatGADS. deparse.level Argument ignored method.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/cbind.GADSdat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bind two GADSdat objects into a single GADSdat object by columns. — cbind.GADSdat","text":"Returns GADSdat object.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/cbind.GADSdat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bind two GADSdat objects into a single GADSdat object by columns. — cbind.GADSdat","text":"duplicate variables (except variables specified argument), variables removed y. meta data joined remaining variables via rbind.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/changeMissings.html","id":null,"dir":"Reference","previous_headings":"","what":"Change missing code. — changeMissings","title":"Change missing code. — changeMissings","text":"Change add missing codes one multiple variables part GADSdat object.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/changeMissings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change missing code. — changeMissings","text":"","code":"changeMissings(GADSdat, varName, value, missings)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/changeMissings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change missing code. — changeMissings","text":"GADSdat GADSdat object imported via eatGADS. varName Character vector containing variable names. value Numeric values. missings Character vector new missing codes, either \"miss\" \"valid\". Missings tags applied ordering value.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/changeMissings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change missing code. — changeMissings","text":"Returns GADSdat object changed meta data.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/changeMissings.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Change missing code. — changeMissings","text":"Applied GADSdat all_GADSdat object, function wrapper  getChangeMeta applyChangeMeta. function supports changing multiple missing tags (missings) well missing tags multiple variables (varName) .","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/changeMissings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change missing code. — changeMissings","text":"","code":"# Set a specific value to missing pisa2 <- changeMissings(pisa, varName = \"computer_age\",                         value = 5, missings = \"miss\")  # Set multiple values to missing pisa3 <- changeMissings(pisa, varName = \"computer_age\",                         value = 1:4,                         missings = c(\"miss\", \"miss\", \"miss\", \"miss\"))  # Set a specific value to not missing pisa4 <- changeMissings(pisa2, varName = \"computer_age\",                         value = 5, missings = \"valid\")  # Add missing tags to multiple variables pisa5 <- changeMissings(pisa, varName = c(\"g8g9\", \"computer_age\"),                         value = c(-99, -98), missings = c(\"miss\", \"miss\"))"},{"path":"https://beckerbenj.github.io/eatGADS/reference/changeSPSSformat.html","id":null,"dir":"Reference","previous_headings":"","what":"Change SPSS format. — changeSPSSformat","title":"Change SPSS format. — changeSPSSformat","text":"Change SPSS format one multiple variables part GADSdat object.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/changeSPSSformat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change SPSS format. — changeSPSSformat","text":"","code":"changeSPSSformat(GADSdat, varName, format)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/changeSPSSformat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change SPSS format. — changeSPSSformat","text":"GADSdat GADSdat object imported via eatGADS. varName Character vector variable names. format single string containing new SPSS format, example 'A25' 'F10'.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/changeSPSSformat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change SPSS format. — changeSPSSformat","text":"Returns GADSdat object changed meta data..","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/changeSPSSformat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Change SPSS format. — changeSPSSformat","text":"Applied GADSdat all_GADSdat object, function wrapper getChangeMeta applyChangeMeta. SPSS format supplied following SPSS logic. '' represents character variables, 'F' represents numeric variables. number following letter represents maximum width. Optionally, another number can added dot, representing number decimals case numeric variable. instance, 'F8.2' used numeric variable maximum width 8 2 decimal numbers.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/changeSPSSformat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change SPSS format. — changeSPSSformat","text":"","code":"# change SPSS format for a single variable (numeric variable with no decimals) pisa2 <- changeSPSSformat(pisa, varName = \"idstud\",                           format = \"F10.0\")  # change SPSS format for multiple variables (numeric variable with no decimals) pisa2 <- changeSPSSformat(pisa, varName = c(\"idstud\", \"idschool\"),                           format = \"F10.0\")"},{"path":"https://beckerbenj.github.io/eatGADS/reference/changeValLabels.html","id":null,"dir":"Reference","previous_headings":"","what":"Change value labels. — changeValLabels","title":"Change value labels. — changeValLabels","text":"Change add value labels one multiple variables part GADSdat object.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/changeValLabels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change value labels. — changeValLabels","text":"","code":"changeValLabels(GADSdat, varName, value, valLabel)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/changeValLabels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change value labels. — changeValLabels","text":"GADSdat GADSdat object imported via eatGADS. varName Character vector containing variable names. value Numeric values labeled. valLabel Character vector new value labels. Labels applied ordering value.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/changeValLabels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change value labels. — changeValLabels","text":"Returns GADSdat object changed meta data.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/changeValLabels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Change value labels. — changeValLabels","text":"Applied GADSdat all_GADSdat object, function wrapper getChangeMeta applyChangeMeta. function supports changing multiple value labels (valLabel) well value labels multiple variables (varName) .","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/changeValLabels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change value labels. — changeValLabels","text":"","code":"# Change existing value labels pisa2 <- changeValLabels(pisa, varName = \"repeated\",                         value = c(1, 2),                         valLabel = c(\"no grade repetition\", \"grade repitition\"))  # Add value label to unlabeled value mtcars_g <- import_DF(mtcars) mtcars_g2 <- changeValLabels(mtcars_g, varName = \"cyl\",                              value = c(4, 6, 8),                              valLabel = c(\"four\", \"six\", \"eight\"))  # Add value labels to multiple variables at once mtcars_g3 <- changeValLabels(mtcars_g, varName = c(\"mpg\", \"cyl\", \"disp\"),                              value = c(-99, -98),                              valLabel = c(\"missing\", \"not applicable\"))"},{"path":"https://beckerbenj.github.io/eatGADS/reference/changeVarLabels.html","id":null,"dir":"Reference","previous_headings":"","what":"Change variable labels. — changeVarLabels","title":"Change variable labels. — changeVarLabels","text":"Change variable labels one multiple variables part GADSdat object.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/changeVarLabels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change variable labels. — changeVarLabels","text":"","code":"changeVarLabels(GADSdat, varName, varLabel)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/changeVarLabels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change variable labels. — changeVarLabels","text":"GADSdat GADSdat object imported via eatGADS. varName Character vector variable names. varLabel Character vector new variable labels.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/changeVarLabels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change variable labels. — changeVarLabels","text":"Returns GADSdat object changed meta data.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/changeVarLabels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Change variable labels. — changeVarLabels","text":"Applied GADSdat all_GADSdat object, function wrapper getChangeMeta applyChangeMeta.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/changeVarLabels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change variable labels. — changeVarLabels","text":"","code":"# Change one variable label pisa2 <- changeVarLabels(pisa, varName = \"repeated\",                          varLabel = c(\"Has a grade been repeated?\"))  # Change multiple variable labels pisa2 <- changeVarLabels(pisa, varName = c(\"repeated\", \"gender\"),                          varLabel = c(\"Has a grade been repeated?\",                                       \"Student gender\"))"},{"path":"https://beckerbenj.github.io/eatGADS/reference/changeVarNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Change Variable Names. — changeVarNames","title":"Change Variable Names. — changeVarNames","text":"Change variable names GADSdat all_GADSdat object.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/changeVarNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change Variable Names. — changeVarNames","text":"","code":"changeVarNames(GADSdat, oldNames, newNames, checkVarNames = TRUE)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/changeVarNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change Variable Names. — changeVarNames","text":"GADSdat GADSdat object imported via eatGADS. oldNames Vector containing old variable names. newNames Vector containing new variable names, identical order oldNames. checkVarNames Logical. new variable names checked checkVarNames?","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/changeVarNames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change Variable Names. — changeVarNames","text":"Returns GADSdat object changed variable names.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/changeVarNames.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Change Variable Names. — changeVarNames","text":"Applied GADSdat all_GADSdat object, function wrapper getChangeMeta applyChangeMeta","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/changeVarNames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change Variable Names. — changeVarNames","text":"","code":"# Change multiple variable name pisa2 <- changeVarNames(pisa, oldNames = c(\"idstud\", \"idschool\"),                         newNames = c(\"IDstud\", \"IDschool\"))"},{"path":"https://beckerbenj.github.io/eatGADS/reference/check4SPSS.html","id":null,"dir":"Reference","previous_headings":"","what":"Check SPSS Compliance of Meta Data — check4SPSS","title":"Check SPSS Compliance of Meta Data — check4SPSS","text":"Function check variable names labels, value labels missing codes comply SPSS requirements meta data.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/check4SPSS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check SPSS Compliance of Meta Data — check4SPSS","text":"","code":"check4SPSS(GADSdat)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/check4SPSS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check SPSS Compliance of Meta Data — check4SPSS","text":"GADSdat GADSdat object imported via eatGADS.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/check4SPSS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check SPSS Compliance of Meta Data — check4SPSS","text":"Returns list entries \"varNames_special\", \"varNames_length\", \"varLabels\", \"valLabels\" \"missings\".","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/check4SPSS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check SPSS Compliance of Meta Data — check4SPSS","text":"function measures length variable names (\"varNames_length\", maximum 64 characters) variable labels (\"varLabels\", maximum 256 characters), value labels (\"valLabels\", maximum 120 characters). Furthermore, missing codes counted (\"missings\", maximum three missing codes character variables) special characters flagged variable names (\"varNames_special\"). Check results reported back variable level, exception \"valLabels\", list entries per violating variable.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/check4SPSS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check SPSS Compliance of Meta Data — check4SPSS","text":"","code":"# Change example data set (create a violating label) pisa2 <- changeVarLabels(pisa, varName = \"computer_age\",                         varLabel = paste(rep(\"3\", 125), collapse = \"\"))  check4SPSS(pisa2) #> $varNames_special #> character(0) #>  #> $varNames_length #> character(0) #>  #> $varLabels #> character(0) #>  #> $valLabels #> character(0) #>  #> $missings #> character(0) #>"},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkEmptyValLabels.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Value Labels — checkEmptyValLabels","title":"Check Value Labels — checkEmptyValLabels","text":"Check value labels () value labels occurrence data (checkEmptyValLabels) (b) values value labels (checkMissingValLabels).","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkEmptyValLabels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Value Labels — checkEmptyValLabels","text":"","code":"checkEmptyValLabels(   GADSdat,   vars = namesGADS(GADSdat),   valueRange = NULL,   output = c(\"list\", \"data.frame\") )  checkMissingValLabels(   GADSdat,   vars = namesGADS(GADSdat),   classes = c(\"integer\"),   valueRange = NULL,   output = c(\"list\", \"data.frame\") )"},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkEmptyValLabels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Value Labels — checkEmptyValLabels","text":"GADSdat GADSdat object. vars Character vector variable names checkValLabels() applied. valueRange [optional] Numeric vector length 2: range numeric values checked? specified, numeric values returned strings omitted. output output structured \"list\" \"data.frame\"? classes Character vector classes checkMissingLabels() applied. Valid options \"integer\", \"double\", \"character\".","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkEmptyValLabels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Value Labels — checkEmptyValLabels","text":"Returns list length vars data.frame.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkEmptyValLabels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check Value Labels — checkEmptyValLabels","text":"NAs excluded check. Designated missing codes reported normally.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkEmptyValLabels.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Check Value Labels — checkEmptyValLabels","text":"checkEmptyValLabels(): check superfluous value labels checkMissingValLabels(): check missing value labels","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkEmptyValLabels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Value Labels — checkEmptyValLabels","text":"","code":"# Check a categorical and a metric variable checkMissingValLabels(pisa, vars = c(\"g8g9\", \"age\")) #> $g8g9 #> NULL #>  checkEmptyValLabels(pisa, vars = c(\"g8g9\", \"age\")) #> $g8g9 #> NULL #>  #> $age #> NULL #>   # Check while defining a specific value range checkMissingValLabels(pisa, vars = c(\"g8g9\", \"age\", \"idschool\"),               valueRange = c(0, 5)) #> $g8g9 #> NULL #>  #> $idschool #> $idschool$varLabel #> [1] \"School-ID\" #>  #> $idschool$missing_labels #> [1] 2 3 4 5 #>  #>  checkEmptyValLabels(pisa, vars = c(\"g8g9\", \"age\", \"idschool\"),               valueRange = c(0, 5)) #> $g8g9 #> NULL #>  #> $age #> NULL #>  #> $idschool #> NULL #>"},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkFormat.html","id":null,"dir":"Reference","previous_headings":"","what":"Check and Adjust SPSS Format — checkFormat","title":"Check and Adjust SPSS Format — checkFormat","text":"Function check SPSS format statements specified correctly GADSdat object.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkFormat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check and Adjust SPSS Format — checkFormat","text":"","code":"checkFormat(GADSdat, type = \"SPSS\", changeFormat = TRUE)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkFormat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check and Adjust SPSS Format — checkFormat","text":"GADSdat GADSdat object imported via eatGADS. type type='', function nchar used determine character lengths decimals rounded 16 decimal places. type='SPSS' additional width character variables added order let SPSS read lengthy characters correctly . changeFormat changeFormat=TRUE GADSdat meta data updated otherwise information reported.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkFormat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check and Adjust SPSS Format — checkFormat","text":"Returns GADSdat object.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkFormat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check and Adjust SPSS Format — checkFormat","text":"function compares SPSS format statements \"format\" actual character length decimal places variables GADSdat object meta data information. Mismatches reported can automatically adjusted.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkFormat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check and Adjust SPSS Format — checkFormat","text":"","code":"# Change example meta information (create a value label with incorrect missing code) pisa2 <- checkFormat(pisa) #> Variable ma_pv1 has more decimals than SPSS allows (18) and will be rounded to 16 decimal places. #> Variable ma_pv2 has more decimals than SPSS allows (18) and will be rounded to 16 decimal places. #> Variable ma_pv3 has more decimals than SPSS allows (18) and will be rounded to 16 decimal places. #> Variable ma_pv4 has more decimals than SPSS allows (18) and will be rounded to 16 decimal places. #> Variable ma_pv5 has more decimals than SPSS allows (18) and will be rounded to 16 decimal places. #> Variable rea_pv1 has more decimals than SPSS allows (17) and will be rounded to 16 decimal places. #> Variable rea_pv2 has more decimals than SPSS allows (17) and will be rounded to 16 decimal places. #> Variable rea_pv3 has more decimals than SPSS allows (17) and will be rounded to 16 decimal places. #> Variable rea_pv4 has more decimals than SPSS allows (18) and will be rounded to 16 decimal places. #> Variable rea_pv5 has more decimals than SPSS allows (17) and will be rounded to 16 decimal places. #> Variable sci_pv1 has more decimals than SPSS allows (17) and will be rounded to 16 decimal places. #> Variable sci_pv2 has more decimals than SPSS allows (17) and will be rounded to 16 decimal places. #> Variable sci_pv3 has more decimals than SPSS allows (17) and will be rounded to 16 decimal places. #> Variable sci_pv4 has more decimals than SPSS allows (17) and will be rounded to 16 decimal places. #> Variable sci_pv5 has more decimals than SPSS allows (17) and will be rounded to 16 decimal places. #> Format of Variable idstud will be changed from F8.0 to F3 #> Format of Variable idschool will be changed from F8.0 to F3 #> Format of Variable idclass will be changed from F8.0 to F3 #> Format of Variable schtype will be changed from F8.0 to F1 #> Format of Variable sameteach will be changed from F8.0 to F1 #> Format of Variable g8g9 will be changed from F8.0 to F1 #> Format of Variable ganztag will be changed from F8.0 to F1 #> Format of Variable classsize will be changed from F8.0 to F2 #> Format of Variable repeated will be changed from F8.0 to F1 #> Format of Variable gender will be changed from F8.0 to F1 #> Format of Variable age will be changed from F8.2 to F5.2 #> Format of Variable language will be changed from F8.0 to F2 #> Format of Variable migration will be changed from F8.0 to F1 #> Format of Variable hisced will be changed from F8.0 to F1 #> Format of Variable hisei will be changed from F8.2 to F2 #> Format of Variable homepos will be changed from F8.2 to F4.2 #> Format of Variable books will be changed from F8.0 to F1 #> Format of Variable pared will be changed from F8.2 to F2 #> Format of Variable computer_age will be changed from F8.0 to F1 #> Format of Variable internet_age will be changed from F8.0 to F1 #> Format of Variable int_use_a will be changed from F8.0 to F1 #> Format of Variable int_use_b will be changed from F8.0 to F1 #> Format of Variable truancy_a will be changed from F8.0 to F1 #> Format of Variable truancy_b will be changed from F8.0 to F1 #> Format of Variable truancy_c will be changed from F8.0 to F1 #> Format of Variable int_a will be changed from F8.0 to F1 #> Format of Variable int_b will be changed from F8.0 to F1 #> Format of Variable int_c will be changed from F8.0 to F1 #> Format of Variable int_d will be changed from F8.0 to F1 #> Format of Variable instmot_a will be changed from F8.0 to F1 #> Format of Variable instmot_b will be changed from F8.0 to F1 #> Format of Variable instmot_c will be changed from F8.0 to F1 #> Format of Variable instmot_d will be changed from F8.0 to F1 #> Format of Variable norms_a will be changed from F8.0 to F1 #> Format of Variable norms_b will be changed from F8.0 to F1 #> Format of Variable norms_c will be changed from F8.0 to F1 #> Format of Variable norms_d will be changed from F8.0 to F1 #> Format of Variable norms_e will be changed from F8.0 to F1 #> Format of Variable norms_f will be changed from F8.0 to F1 #> Format of Variable anxiety_a will be changed from F8.0 to F1 #> Format of Variable anxiety_b will be changed from F8.0 to F1 #> Format of Variable anxiety_c will be changed from F8.0 to F1 #> Format of Variable anxiety_d will be changed from F8.0 to F1 #> Format of Variable anxiety_e will be changed from F8.0 to F1 #> Format of Variable selfcon_a will be changed from F8.0 to F1 #> Format of Variable selfcon_b will be changed from F8.0 to F1 #> Format of Variable selfcon_c will be changed from F8.0 to F1 #> Format of Variable selfcon_d will be changed from F8.0 to F1 #> Format of Variable selfcon_e will be changed from F8.0 to F1 #> Format of Variable worketh_a will be changed from F8.0 to F1 #> Format of Variable worketh_b will be changed from F8.0 to F1 #> Format of Variable worketh_c will be changed from F8.0 to F1 #> Format of Variable worketh_d will be changed from F8.0 to F1 #> Format of Variable worketh_e will be changed from F8.0 to F1 #> Format of Variable worketh_f will be changed from F8.0 to F1 #> Format of Variable worketh_g will be changed from F8.0 to F1 #> Format of Variable worketh_h will be changed from F8.0 to F1 #> Format of Variable worketh_i will be changed from F8.0 to F1 #> Format of Variable intent_a will be changed from F8.0 to F1 #> Format of Variable intent_b will be changed from F8.0 to F1 #> Format of Variable intent_c will be changed from F8.0 to F1 #> Format of Variable intent_d will be changed from F8.0 to F1 #> Format of Variable intent_e will be changed from F8.0 to F1 #> Format of Variable behav_a will be changed from F8.0 to F1 #> Format of Variable behav_b will be changed from F8.0 to F1 #> Format of Variable behav_c will be changed from F8.0 to F1 #> Format of Variable behav_d will be changed from F8.0 to F1 #> Format of Variable behav_e will be changed from F8.0 to F1 #> Format of Variable behav_f will be changed from F8.0 to F1 #> Format of Variable behav_g will be changed from F8.0 to F1 #> Format of Variable behav_h will be changed from F8.0 to F1 #> Format of Variable teach_a will be changed from F8.0 to F1 #> Format of Variable teach_b will be changed from F8.0 to F1 #> Format of Variable teach_c will be changed from F8.0 to F1 #> Format of Variable teach_d will be changed from F8.0 to F1 #> Format of Variable teach_e will be changed from F8.0 to F1 #> Format of Variable cognact_a will be changed from F8.0 to F1 #> Format of Variable cognact_b will be changed from F8.0 to F1 #> Format of Variable cognact_c will be changed from F8.0 to F1 #> Format of Variable cognact_d will be changed from F8.0 to F1 #> Format of Variable cognact_e will be changed from F8.0 to F1 #> Format of Variable cognact_f will be changed from F8.0 to F1 #> Format of Variable cognact_g will be changed from F8.0 to F1 #> Format of Variable cognact_h will be changed from F8.0 to F1 #> Format of Variable cognact_i will be changed from F8.0 to F1 #> Format of Variable discpline_a will be changed from F8.0 to F1 #> Format of Variable discpline_b will be changed from F8.0 to F1 #> Format of Variable discpline_c will be changed from F8.0 to F1 #> Format of Variable discpline_d will be changed from F8.0 to F1 #> Format of Variable discpline_e will be changed from F8.0 to F1 #> Format of Variable relation_a will be changed from F8.0 to F1 #> Format of Variable relation_b will be changed from F8.0 to F1 #> Format of Variable relation_c will be changed from F8.0 to F1 #> Format of Variable relation_d will be changed from F8.0 to F1 #> Format of Variable relation_e will be changed from F8.0 to F1 #> Format of Variable belong_a will be changed from F8.0 to F1 #> Format of Variable belong_b will be changed from F8.0 to F1 #> Format of Variable belong_c will be changed from F8.0 to F1 #> Format of Variable belong_d will be changed from F8.0 to F1 #> Format of Variable belong_e will be changed from F8.0 to F1 #> Format of Variable belong_f will be changed from F8.0 to F1 #> Format of Variable belong_g will be changed from F8.0 to F1 #> Format of Variable belong_h will be changed from F8.0 to F1 #> Format of Variable belong_i will be changed from F8.0 to F1 #> Format of Variable attitud_a will be changed from F8.0 to F1 #> Format of Variable attitud_b will be changed from F8.0 to F1 #> Format of Variable attitud_c will be changed from F8.0 to F1 #> Format of Variable attitud_d will be changed from F8.0 to F1 #> Format of Variable attitud_e will be changed from F8.0 to F1 #> Format of Variable attitud_f will be changed from F8.0 to F1 #> Format of Variable attitud_g will be changed from F8.0 to F1 #> Format of Variable attitud_h will be changed from F8.0 to F1 #> Format of Variable grade_de will be changed from F8.0 to F1 #> Format of Variable grade_ma will be changed from F8.0 to F1 #> Format of Variable grade_bio will be changed from F8.0 to F1 #> Format of Variable grade_che will be changed from F8.0 to F1 #> Format of Variable grade_phy will be changed from F8.0 to F1 #> Format of Variable grade_sci will be changed from F8.0 to F1 #> Format of Variable ma_pv1 will be changed from F8.2 to F18.16 #> Format of Variable ma_pv2 will be changed from F8.2 to F18.16 #> Format of Variable ma_pv3 will be changed from F8.2 to F18.16 #> Format of Variable ma_pv4 will be changed from F8.2 to F18.16 #> Format of Variable ma_pv5 will be changed from F8.2 to F18.16 #> Format of Variable rea_pv1 will be changed from F8.2 to F18.16 #> Format of Variable rea_pv2 will be changed from F8.2 to F18.16 #> Format of Variable rea_pv3 will be changed from F8.2 to F18.16 #> Format of Variable rea_pv4 will be changed from F8.2 to F18.16 #> Format of Variable rea_pv5 will be changed from F8.2 to F18.16 #> Format of Variable sci_pv1 will be changed from F8.2 to F18.16 #> Format of Variable sci_pv2 will be changed from F8.2 to F18.16 #> Format of Variable sci_pv3 will be changed from F8.2 to F18.16 #> Format of Variable sci_pv4 will be changed from F8.2 to F18.16 #> Format of Variable sci_pv5 will be changed from F8.2 to F18.16"},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkMissings.html","id":null,"dir":"Reference","previous_headings":"","what":"Check and Adjust Missing Tags — checkMissings","title":"Check and Adjust Missing Tags — checkMissings","text":"Functions check missings tagged labeled correctly GADSdat object.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkMissings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check and Adjust Missing Tags — checkMissings","text":"","code":"checkMissings(   GADSdat,   missingLabel = \"missing\",   addMissingCode = TRUE,   addMissingLabel = FALSE )  checkMissingsByValues(GADSdat, missingValues = -50:-99, addMissingCode = TRUE)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkMissings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check and Adjust Missing Tags — checkMissings","text":"GADSdat GADSdat object imported via eatGADS. missingLabel Single regular expression indicating missing labels commonly named value labels. addMissingCode TRUE, missing tags added according missingLabel missingValues. addMissingLabel TRUE, \"generic missing\" added according occurrence \"miss\" \"missings\". often various value labels missings used, argument used great care. missingValues Numeric vector values commonly used missing values.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkMissings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check and Adjust Missing Tags — checkMissings","text":"Returns GADSdat object - specified - modified missing tags.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkMissings.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check and Adjust Missing Tags — checkMissings","text":"checkMissings() compares value labels (valLabels) missing tags (missings) GADSdat object meta data information. checkMissingsByValues() compares labeled values (value) missing tags (missings) GADSdat object meta data information. Mismatches reported can automatically adjusted. Note checks applied meta data information, actual data. detecting missing value labels, see checkMissingValLabels.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkMissings.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Check and Adjust Missing Tags — checkMissings","text":"checkMissings(): compare missing tags value labels checkMissingsByValues(): compare missing tags values certain range","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkMissings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check and Adjust Missing Tags — checkMissings","text":"","code":"# checkMissings pisa2 <- changeValLabels(pisa, varName = \"computer_age\",                         value = 5, valLabel = \"missing: No computer use\")  pisa3 <- checkMissings(pisa2) #> The following variables have value labels including the term 'missing' which are not coded as missing: #> computer_age #> 'miss' is inserted into column missings for 1 rows.  # checkMissingsByValues pisa4 <- changeValLabels(pisa, varName = \"computer_age\",                         value = c(-49, -90, -99), valLabel = c(\"test1\", \"test2\", \"test3\"))  pisa5 <- checkMissingsByValues(pisa4, missingValues = -50:-99) #> The following variables have values in the 'missingValues' range which are not coded as missing: #> computer_age #> 'miss' is inserted into column missings for 2 rows."},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkTrendStructure.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks compatibility of two eatGADS data bases. — checkTrendStructure","title":"Checks compatibility of two eatGADS data bases. — checkTrendStructure","text":"function checks data bases perform identical joins via foreign keys, contain variable names variables value labels. Results comparison reported data table level messages output list.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkTrendStructure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks compatibility of two eatGADS data bases. — checkTrendStructure","text":"","code":"checkTrendStructure(filePath1, filePath2)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkTrendStructure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks compatibility of two eatGADS data bases. — checkTrendStructure","text":"filePath1 Path first eatGADS .db file. filePath2 Path second eatGADS .db file.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkTrendStructure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks compatibility of two eatGADS data bases. — checkTrendStructure","text":"Returns report list.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkTrendStructure.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Checks compatibility of two eatGADS data bases. — checkTrendStructure","text":"error thrown key structure data table structure differs two data bases. Differences regarding meta data missing value labels variables labels (formatting) ignored. Reported differences regarding meta data can inspected via inspectMetaDifferences.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkUniqueness.html","id":null,"dir":"Reference","previous_headings":"","what":"Check uniqueness of a variable. — checkUniqueness","title":"Check uniqueness of a variable. — checkUniqueness","text":"Function check variable unique cases identifier variable.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkUniqueness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check uniqueness of a variable. — checkUniqueness","text":"","code":"checkUniqueness(GADSdat, varName, idVar)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkUniqueness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check uniqueness of a variable. — checkUniqueness","text":"GADSdat GADSdat object imported via eatGADS. varName Single string containing variable name check performed. idVar Single string containing identifier variable name.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkUniqueness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check uniqueness of a variable. — checkUniqueness","text":"Returns either TRUE variable unique within value idVar GADSdat object including unique cases.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkUniqueness.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check uniqueness of a variable. — checkUniqueness","text":"example missing values multiple imputed data stored long format, checking uniqueness variable within identifier can tricky. function automates task.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkUniqueness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check uniqueness of a variable. — checkUniqueness","text":"","code":"## create an example GADSdat iris2 <- iris iris2$Species <- as.character(iris2$Species) gads <- import_DF(iris2, checkVarNames = FALSE)  ## check uniqueness checkUniqueness(gads, varName = \"Sepal.Length\", idVar = \"Species\") #>     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species #> 1            5.1         3.5          1.4         0.2     setosa #> 2            4.9         3.0          1.4         0.2     setosa #> 3            4.7         3.2          1.3         0.2     setosa #> 4            4.6         3.1          1.5         0.2     setosa #> 5            5.0         3.6          1.4         0.2     setosa #> 6            5.4         3.9          1.7         0.4     setosa #> 7            4.6         3.4          1.4         0.3     setosa #> 8            5.0         3.4          1.5         0.2     setosa #> 9            4.4         2.9          1.4         0.2     setosa #> 10           4.9         3.1          1.5         0.1     setosa #> 11           5.4         3.7          1.5         0.2     setosa #> 12           4.8         3.4          1.6         0.2     setosa #> 13           4.8         3.0          1.4         0.1     setosa #> 14           4.3         3.0          1.1         0.1     setosa #> 15           5.8         4.0          1.2         0.2     setosa #> 16           5.7         4.4          1.5         0.4     setosa #> 17           5.4         3.9          1.3         0.4     setosa #> 18           5.1         3.5          1.4         0.3     setosa #> 19           5.7         3.8          1.7         0.3     setosa #> 20           5.1         3.8          1.5         0.3     setosa #> 21           5.4         3.4          1.7         0.2     setosa #> 22           5.1         3.7          1.5         0.4     setosa #> 23           4.6         3.6          1.0         0.2     setosa #> 24           5.1         3.3          1.7         0.5     setosa #> 25           4.8         3.4          1.9         0.2     setosa #> 26           5.0         3.0          1.6         0.2     setosa #> 27           5.0         3.4          1.6         0.4     setosa #> 28           5.2         3.5          1.5         0.2     setosa #> 29           5.2         3.4          1.4         0.2     setosa #> 30           4.7         3.2          1.6         0.2     setosa #> 31           4.8         3.1          1.6         0.2     setosa #> 32           5.4         3.4          1.5         0.4     setosa #> 33           5.2         4.1          1.5         0.1     setosa #> 34           5.5         4.2          1.4         0.2     setosa #> 35           4.9         3.1          1.5         0.2     setosa #> 36           5.0         3.2          1.2         0.2     setosa #> 37           5.5         3.5          1.3         0.2     setosa #> 38           4.9         3.6          1.4         0.1     setosa #> 39           4.4         3.0          1.3         0.2     setosa #> 40           5.1         3.4          1.5         0.2     setosa #> 41           5.0         3.5          1.3         0.3     setosa #> 42           4.5         2.3          1.3         0.3     setosa #> 43           4.4         3.2          1.3         0.2     setosa #> 44           5.0         3.5          1.6         0.6     setosa #> 45           5.1         3.8          1.9         0.4     setosa #> 46           4.8         3.0          1.4         0.3     setosa #> 47           5.1         3.8          1.6         0.2     setosa #> 48           4.6         3.2          1.4         0.2     setosa #> 49           5.3         3.7          1.5         0.2     setosa #> 50           5.0         3.3          1.4         0.2     setosa #> 51           7.0         3.2          4.7         1.4 versicolor #> 52           6.4         3.2          4.5         1.5 versicolor #> 53           6.9         3.1          4.9         1.5 versicolor #> 54           5.5         2.3          4.0         1.3 versicolor #> 55           6.5         2.8          4.6         1.5 versicolor #> 56           5.7         2.8          4.5         1.3 versicolor #> 57           6.3         3.3          4.7         1.6 versicolor #> 58           4.9         2.4          3.3         1.0 versicolor #> 59           6.6         2.9          4.6         1.3 versicolor #> 60           5.2         2.7          3.9         1.4 versicolor #> 61           5.0         2.0          3.5         1.0 versicolor #> 62           5.9         3.0          4.2         1.5 versicolor #> 63           6.0         2.2          4.0         1.0 versicolor #> 64           6.1         2.9          4.7         1.4 versicolor #> 65           5.6         2.9          3.6         1.3 versicolor #> 66           6.7         3.1          4.4         1.4 versicolor #> 67           5.6         3.0          4.5         1.5 versicolor #> 68           5.8         2.7          4.1         1.0 versicolor #> 69           6.2         2.2          4.5         1.5 versicolor #> 70           5.6         2.5          3.9         1.1 versicolor #> 71           5.9         3.2          4.8         1.8 versicolor #> 72           6.1         2.8          4.0         1.3 versicolor #> 73           6.3         2.5          4.9         1.5 versicolor #> 74           6.1         2.8          4.7         1.2 versicolor #> 75           6.4         2.9          4.3         1.3 versicolor #> 76           6.6         3.0          4.4         1.4 versicolor #> 77           6.8         2.8          4.8         1.4 versicolor #> 78           6.7         3.0          5.0         1.7 versicolor #> 79           6.0         2.9          4.5         1.5 versicolor #> 80           5.7         2.6          3.5         1.0 versicolor #> 81           5.5         2.4          3.8         1.1 versicolor #> 82           5.5         2.4          3.7         1.0 versicolor #> 83           5.8         2.7          3.9         1.2 versicolor #> 84           6.0         2.7          5.1         1.6 versicolor #> 85           5.4         3.0          4.5         1.5 versicolor #> 86           6.0         3.4          4.5         1.6 versicolor #> 87           6.7         3.1          4.7         1.5 versicolor #> 88           6.3         2.3          4.4         1.3 versicolor #> 89           5.6         3.0          4.1         1.3 versicolor #> 90           5.5         2.5          4.0         1.3 versicolor #> 91           5.5         2.6          4.4         1.2 versicolor #> 92           6.1         3.0          4.6         1.4 versicolor #> 93           5.8         2.6          4.0         1.2 versicolor #> 94           5.0         2.3          3.3         1.0 versicolor #> 95           5.6         2.7          4.2         1.3 versicolor #> 96           5.7         3.0          4.2         1.2 versicolor #> 97           5.7         2.9          4.2         1.3 versicolor #> 98           6.2         2.9          4.3         1.3 versicolor #> 99           5.1         2.5          3.0         1.1 versicolor #> 100          5.7         2.8          4.1         1.3 versicolor #> 101          6.3         3.3          6.0         2.5  virginica #> 102          5.8         2.7          5.1         1.9  virginica #> 103          7.1         3.0          5.9         2.1  virginica #> 104          6.3         2.9          5.6         1.8  virginica #> 105          6.5         3.0          5.8         2.2  virginica #> 106          7.6         3.0          6.6         2.1  virginica #> 107          4.9         2.5          4.5         1.7  virginica #> 108          7.3         2.9          6.3         1.8  virginica #> 109          6.7         2.5          5.8         1.8  virginica #> 110          7.2         3.6          6.1         2.5  virginica #> 111          6.5         3.2          5.1         2.0  virginica #> 112          6.4         2.7          5.3         1.9  virginica #> 113          6.8         3.0          5.5         2.1  virginica #> 114          5.7         2.5          5.0         2.0  virginica #> 115          5.8         2.8          5.1         2.4  virginica #> 116          6.4         3.2          5.3         2.3  virginica #> 117          6.5         3.0          5.5         1.8  virginica #> 118          7.7         3.8          6.7         2.2  virginica #> 119          7.7         2.6          6.9         2.3  virginica #> 120          6.0         2.2          5.0         1.5  virginica #> 121          6.9         3.2          5.7         2.3  virginica #> 122          5.6         2.8          4.9         2.0  virginica #> 123          7.7         2.8          6.7         2.0  virginica #> 124          6.3         2.7          4.9         1.8  virginica #> 125          6.7         3.3          5.7         2.1  virginica #> 126          7.2         3.2          6.0         1.8  virginica #> 127          6.2         2.8          4.8         1.8  virginica #> 128          6.1         3.0          4.9         1.8  virginica #> 129          6.4         2.8          5.6         2.1  virginica #> 130          7.2         3.0          5.8         1.6  virginica #> 131          7.4         2.8          6.1         1.9  virginica #> 132          7.9         3.8          6.4         2.0  virginica #> 133          6.4         2.8          5.6         2.2  virginica #> 134          6.3         2.8          5.1         1.5  virginica #> 135          6.1         2.6          5.6         1.4  virginica #> 136          7.7         3.0          6.1         2.3  virginica #> 137          6.3         3.4          5.6         2.4  virginica #> 138          6.4         3.1          5.5         1.8  virginica #> 139          6.0         3.0          4.8         1.8  virginica #> 140          6.9         3.1          5.4         2.1  virginica #> 141          6.7         3.1          5.6         2.4  virginica #> 142          6.9         3.1          5.1         2.3  virginica #> 143          5.8         2.7          5.1         1.9  virginica #> 144          6.8         3.2          5.9         2.3  virginica #> 145          6.7         3.3          5.7         2.5  virginica #> 146          6.7         3.0          5.2         2.3  virginica #> 147          6.3         2.5          5.0         1.9  virginica #> 148          6.5         3.0          5.2         2.0  virginica #> 149          6.2         3.4          5.4         2.3  virginica #> 150          5.9         3.0          5.1         1.8  virginica"},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkUniqueness2.html","id":null,"dir":"Reference","previous_headings":"","what":"Check uniqueness of a variable. — checkUniqueness2","title":"Check uniqueness of a variable. — checkUniqueness2","text":"Function check variable unique cases identifier variable. fast efficient version checkUniqueness always returns logical, non missing value length one.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkUniqueness2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check uniqueness of a variable. — checkUniqueness2","text":"","code":"checkUniqueness2(GADSdat, varName, idVar, impVar)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkUniqueness2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check uniqueness of a variable. — checkUniqueness2","text":"GADSdat GADSdat object imported via eatGADS. varName Single string containing variable name check performed. idVar Single string containing name identifier variable. impVar Single string containing name imputation number.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkUniqueness2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check uniqueness of a variable. — checkUniqueness2","text":"Returns logical length one.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkUniqueness2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check uniqueness of a variable. — checkUniqueness2","text":"example missing values multiple imputed data stored long format, checking uniqueness variable within identifier can tricky. function automates task via reshaping data wide format testing equality among reshaped variables. Similar functionality (via matrices) covered lme4::isNested, general performs similarly.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkUniqueness2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check uniqueness of a variable. — checkUniqueness2","text":"","code":"## create an example GADSdat l <- 1000 long_df <- data.table::data.table(id = sort(rep(1:l, 15)),                                v1 = sort(rep(1:l, 15)),                                  imp = rep(1:15, l)) gads <- import_DF(long_df) ## check uniqueness checkUniqueness2(gads, varName = \"v1\", idVar = \"id\", impVar = \"imp\") #> [1] TRUE"},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkValue.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for a specific value — checkValue","title":"Check for a specific value — checkValue","text":"Function look occurrences specific value GADSdat.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkValue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for a specific value — checkValue","text":"","code":"checkValue(GADSdat, value, vars = namesGADS(GADSdat))"},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkValue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for a specific value — checkValue","text":"GADSdat GADSdat object imported via eatGADS. value Single string indicating missing labels commonly named value labels. vars Character vector variable names checkValue applied.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkValue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for a specific value — checkValue","text":"named integer.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkValue.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check for a specific value — checkValue","text":"function checks occurrences specific value set variables (default: variables) GADSdat outputs vector containing count occurrences variables value occurs. explicitly supports checking NA.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkValue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for a specific value — checkValue","text":"","code":"# for all variables in the data checkValue(pisa, value = 99) #>   idstud idschool  #>        1        1   # only for specific variables in the data checkValue(pisa, vars = c(\"idschool\", \"g8g9\"), value = 99) #> idschool  #>        1"},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkVarNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Check names for SQLite column name conventions. — checkVarNames","title":"Check names for SQLite column name conventions. — checkVarNames","text":"Checks names SQLite column name conventions applies appropriate variable name changes GADSdat all_GADSdat objects.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkVarNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check names for SQLite column name conventions. — checkVarNames","text":"","code":"checkVarNames(GADSdat, checkKeywords = TRUE, checkDots = TRUE)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkVarNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check names for SQLite column name conventions. — checkVarNames","text":"GADSdat GADSdat all_GADSdat object. checkKeywords Logical. SQLite keywords checked modified? checkDots Logical. occurrences \".\" checked modified?","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkVarNames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check names for SQLite column name conventions. — checkVarNames","text":"Returns original object updated variable names.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkVarNames.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check names for SQLite column name conventions. — checkVarNames","text":"Invalid column names SQLite data base include SQLite keywords (see sqlite_keywords) column names \".\" . corresponding variable name changes appending suffix \"Var\" SQLite keywords changing \".\" variable names \"_\". Note avoiding \".\" variable names beneficial multiple reasons, avoiding confusion S3 methods R issues importing Stata.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/checkVarNames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check names for SQLite column name conventions. — checkVarNames","text":"","code":"# Change example data set (create an invalid variable name) pisa2 <- changeVarNames(pisa, oldNames = \"computer_age\",                         newNames = \"computer.age\") #> computer.age has been renamed to computer_age  pisa3 <- checkVarNames(pisa2)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/clean_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean temporary cache. — clean_cache","title":"Clean temporary cache. — clean_cache","text":"Deprecated. cached data base now cleaned R sessions ends automatically.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/clean_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean temporary cache. — clean_cache","text":"","code":"clean_cache(tempPath = tempdir())"},{"path":"https://beckerbenj.github.io/eatGADS/reference/clean_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean temporary cache. — clean_cache","text":"tempPath Local directory data base temporarily stored.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/clean_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean temporary cache. — clean_cache","text":"Returns nothing.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/clean_cache.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clean temporary cache. — clean_cache","text":"Cleans temporary cache, specified tempdir(). function executed end R session getGADS_fast getTrendGADS fast = TRUE used.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/cloneVariable.html","id":null,"dir":"Reference","previous_headings":"","what":"Clone a variable. — cloneVariable","title":"Clone a variable. — cloneVariable","text":"Clone variable part GADSdat object.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/cloneVariable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clone a variable. — cloneVariable","text":"","code":"cloneVariable(   GADSdat,   varName,   new_varName,   label_suffix = \"\",   checkVarName = TRUE )"},{"path":"https://beckerbenj.github.io/eatGADS/reference/cloneVariable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clone a variable. — cloneVariable","text":"GADSdat GADSdat object imported via eatGADS. varName Name variable cloned. new_varName Name new variable. label_suffix Suffix added variable label newly created variable GADSdat. checkVarName Logical. new_varName checked checkVarNames?","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/cloneVariable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clone a variable. — cloneVariable","text":"Returns GADSdat.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/cloneVariable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clone a variable. — cloneVariable","text":"variable simply duplicated assigned new name.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/cloneVariable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clone a variable. — cloneVariable","text":"","code":"# duplicate the variable schtype pisa_new <- cloneVariable(pisa, varName = \"schtype\", new_varName = \"schtype_new\")"},{"path":"https://beckerbenj.github.io/eatGADS/reference/collapseColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse two columns of a lookup table. — collapseColumns","title":"Collapse two columns of a lookup table. — collapseColumns","text":"Collapse two columns format single column lookup table created createLookup.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/collapseColumns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse two columns of a lookup table. — collapseColumns","text":"","code":"collapseColumns(lookup, recodeVars, prioritize)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/collapseColumns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse two columns of a lookup table. — collapseColumns","text":"lookup example lookup table data.frame created via createLookup. recodeVars Character vector column names collapsed (currently two variables supported). prioritize Character vector length 1. columns recodeVars prioritized, multiple values available? recodeVars length 1, argument can omitted.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/collapseColumns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse two columns of a lookup table. — collapseColumns","text":"Returns data.frame can used applyLookup, columns: variable Variable names value Old values value_new New values. Renamed /collapsed column.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/collapseColumns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Collapse two columns of a lookup table. — collapseColumns","text":"lookup table created createLookup, different recoding columns can specified addCols argument. might case two rater suggest recodes one rater corrects recodes another rater separate column. recoding columns filled , collapseColumns can used either: () Collapse two recoding columns one recoding column. might desirable, two columns contain missing values. prioritize can used specify, two columns prioritized columns contain valid values. (b) Format lookup table applyLookup, recodeVars single variable. simply renames single variable specified recodeVars.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/collapseColumns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapse two columns of a lookup table. — collapseColumns","text":"","code":"## (a) Collapse two columns # create example recode data.frame lookup_raw <- data.frame(variable = c(\"var1\"), value = c(\"germa\", \"German\", \"dscherman\"),            recode1 = c(NA, \"English\", \"German\"),            recode2 = c(\"German\", \"German\", NA), stringsAsFactors = FALSE)  # collapse columns lookup <- collapseColumns(lookup_raw, recodeVars = c(\"recode1\", \"recode2\"), prioritize = \"recode2\")  ## (b) Format one column # create example recode data.frame lookup_raw2 <- data.frame(variable = c(\"var1\"), value = c(\"germa\", \"German\", \"dscherman\"),            recode1 = c(\"German\", \"German\", \"German\"), stringsAsFactors = FALSE)  # collapse columns lookup2 <- collapseColumns(lookup_raw2, recodeVars = c(\"recode1\"))"},{"path":"https://beckerbenj.github.io/eatGADS/reference/collapseMC_Text.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode a multiple choice variable according to a character variable. — collapseMC_Text","title":"Recode a multiple choice variable according to a character variable. — collapseMC_Text","text":"Recode labeled integer variable (based multiple choice item), according character variable (e.g. open answer item).","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/collapseMC_Text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode a multiple choice variable according to a character variable. — collapseMC_Text","text":"","code":"collapseMC_Text(   GADSdat,   mc_var,   text_var,   mc_code4text,   var_suffix = \"_r\",   label_suffix = \"(recoded)\" )"},{"path":"https://beckerbenj.github.io/eatGADS/reference/collapseMC_Text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode a multiple choice variable according to a character variable. — collapseMC_Text","text":"GADSdat GADSdat object. mc_var variable name multiple choice variable. text_var variable name text variable. mc_code4text value label mc_var indicates information text variable used. var_suffix Variable name suffix newly created variables. NULL, variables overwritten. label_suffix Variable label suffix newly created variable (added meta data). NULL suffix added.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/collapseMC_Text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recode a multiple choice variable according to a character variable. — collapseMC_Text","text":"Returns GADSdat containing newly computed variable.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/collapseMC_Text.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recode a multiple choice variable according to a character variable. — collapseMC_Text","text":"Multiple choice variables can represented labeled integer variables GADSdat. Multiple choice items forced choice frequently contain open answer category. However, sometimes open answers overlap existing categories multiple choice item. collapseMC_Text allows recoding multiple choice variable based open answer variable. mc_code4text indicates entries text_var used. Additionally, entries text_var also used missings mc_var. New values mc_var added meta data, preserving initial ordering value labels. Newly added value labels sorted alphabetically. details see help vignette: vignette(\"recoding_forcedChoice\", package = \"eatGADS\").","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/collapseMC_Text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recode a multiple choice variable according to a character variable. — collapseMC_Text","text":"","code":"# Example gads example_df <- data.frame(ID = 1:5, mc = c(\"blue\", \"blue\", \"green\", \"other\", \"other\"),                         open = c(NA, NA, NA, \"yellow\", \"blue\"),                         stringsAsFactors = FALSE) example_df$mc <- as.factor(example_df$mc) gads <- import_DF(example_df)  # recode gads2 <- collapseMC_Text(gads, mc_var = \"mc\", text_var = \"open\",                         mc_code4text = \"other\") #> No rows removed from meta data. #> Adding meta data for the following variables: mc_r"},{"path":"https://beckerbenj.github.io/eatGADS/reference/collapseMultiMC_Text.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode multiple choice variable with multiple variables. — collapseMultiMC_Text","title":"Recode multiple choice variable with multiple variables. — collapseMultiMC_Text","text":"Recode multiple variables (representing single multiple choice item) based multiple character variables (representing text field).","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/collapseMultiMC_Text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode multiple choice variable with multiple variables. — collapseMultiMC_Text","text":"","code":"collapseMultiMC_Text(   GADSdat,   mc_vars,   text_vars,   mc_var_4text,   var_suffix = \"_r\",   label_suffix = \"(recoded)\",   invalid_miss_code = -98,   invalid_miss_label = \"Missing: Invalid response\",   notext_miss_code = -99,   notext_miss_label = \"Missing: By intention\" )"},{"path":"https://beckerbenj.github.io/eatGADS/reference/collapseMultiMC_Text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode multiple choice variable with multiple variables. — collapseMultiMC_Text","text":"GADSdat GADSdat object. mc_vars character vector variable names multiple choice variable. Names character vector corresponding values represented individual variables. Creation matchValues_varLabels recommended. text_vars character vector names text variables collapsed. mc_var_4text name multiple choice variable signals information text variable used. variable recoded according final status text variables. var_suffix Variable suffix newly created GADSdat. empty character, existing variables overwritten. label_suffix Suffix added variable label newly created modified variables GADSdat. invalid_miss_code Missing code given new character variables text entries recoded dichotomous variables. invalid_miss_label Value label invalid_miss_code. notext_miss_code Missing code given empty character variables. notext_miss_label Value label notext_miss_code.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/collapseMultiMC_Text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recode multiple choice variable with multiple variables. — collapseMultiMC_Text","text":"Returns GADSdat containing newly computed variables.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/collapseMultiMC_Text.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recode multiple choice variable with multiple variables. — collapseMultiMC_Text","text":"multiple choice item can answered ticking multiple boxes, multiple variables data set necessary represent item. case, additional text field answers can also contain multiple values . However, answers text field might redundant dummy variables. collapseMultiMC_Text allows recode multiple MC items kind based multiple text variables. recoding can prepared expanding single text variable (createLookup applyLookup_expandVar) matching dummy variables underlying values stored variable labels (matchValues_varLabels). function recodes dummy variables according character variables. Additionally, mc_var_4text variable recoded according final status text_vars (exception: text variables originally NA, mc_var_4text left ). Missing values character variables can represented either NAs empty characters. multiple choice variables specified mc_vars can contain values 0, 1 missing codes. value 1 must always represent \"category applies\". necessary, use recodeGADS recoding. cases text_vars contain values can recoded mc_vars, new text_vars given specific missing codes (see invalid_miss_code invalid_miss_label). remaining NAs character variables given specific missing code (notext_miss_code).","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/collapseMultiMC_Text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recode multiple choice variable with multiple variables. — collapseMultiMC_Text","text":"","code":"# Prepare example data mt2 <- data.frame(ID = 1:4, mc1 = c(1, 0, 0, 0), mc2 = c(0, 0, 0, 0), mc3 = c(0, 1, 1, 0),                   text1 = c(NA, \"Eng\", \"Aus\", \"Aus2\"), text2 = c(NA, \"Franz\", NA, \"Ger\"),                   stringsAsFactors = FALSE) mt2_gads <- import_DF(mt2) mt3_gads <- changeVarLabels(mt2_gads, varName = c(\"mc1\", \"mc2\", \"mc3\"),                             varLabel = c(\"Lang: Eng\", \"Aus spoken\", \"other\"))  ## All operations (see also respective help pages of functions for further explanations) mc_vars <- matchValues_varLabels(mt3_gads, mc_vars = c(\"mc1\", \"mc2\", \"mc3\"),             values = c(\"Aus\", \"Eng\", \"Eng\"), label_by_hand = c(\"other\" = \"mc3\"))  out_gads <- collapseMultiMC_Text(mt3_gads, mc_vars = mc_vars,              text_vars = c(\"text1\", \"text2\"), mc_var_4text = \"mc3\") #> No rows removed from meta data. #> Adding meta data for the following variables: mc1_r, mc2_r, mc3_r, text1_r, text2_r  out_gads2 <- multiChar2fac(out_gads, vars = c(\"text1_r\", \"text2_r\"))  final_gads <- remove2NAchar(out_gads2, vars = c(\"text1_r_r\", \"text2_r_r\"),                               max_num = 1, na_value = -99, na_label = \"missing: excessive answers\") #> Removing the following rows from meta data: text2_r_r #> No rows added to meta data."},{"path":"https://beckerbenj.github.io/eatGADS/reference/compareGADS.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare two GADS. — compareGADS","title":"Compare two GADS. — compareGADS","text":"Compare multiple variables two GADSdat all_GADSdat objects.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/compareGADS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare two GADS. — compareGADS","text":"","code":"compareGADS(   GADSdat_old,   GADSdat_new,   varNames,   output = c(\"list\", \"data.frame\", \"aggregated\") )"},{"path":"https://beckerbenj.github.io/eatGADS/reference/compareGADS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare two GADS. — compareGADS","text":"GADSdat_old GADSdat object imported via eatGADS. GADSdat_new GADSdat object imported via eatGADS. varNames Character string variable names compared. output output structured?","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/compareGADS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare two GADS. — compareGADS","text":"Returns either list \"equal\" data.frames single data.frame.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/compareGADS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare two GADS. — compareGADS","text":"Returns \"equal\" variable identical across objects data.frame containing frequency table values changed. Especially useful checks recoding.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/compareGADS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare two GADS. — compareGADS","text":"","code":"# Recode a GADS pisa2 <- recodeGADS(pisa, varName = \"schtype\",                         oldValues = 3, newValues = 9) pisa2 <- recodeGADS(pisa2, varName = \"language\",                         oldValues = 1, newValues = 15)  # Compare compareGADS(pisa, pisa2,             varNames = c(\"ganztag\", \"schtype\", \"language\"), output = \"list\") #> $ganztag #> [1] \"all equal\" #>  #> $schtype #>   value frequency                                  valLabel missings #> 1     3       111 schools with several courses of education    valid #>  #> $language #>   value frequency valLabel missings #> 1     1       436   German    valid #>  compareGADS(pisa, pisa2,             varNames = c(\"ganztag\", \"schtype\", \"language\"), output = \"data.frame\") #>   variable value frequency                                  valLabel missings #> 1  schtype     3       111 schools with several courses of education    valid #> 2 language     1       436                                    German    valid compareGADS(pisa, pisa2,              varNames = c(\"ganztag\", \"schtype\", \"language\"), output = \"aggregated\") #>   value                                  valLabel missings #> 1     3 schools with several courses of education    valid #> 2     1                                    German    valid"},{"path":"https://beckerbenj.github.io/eatGADS/reference/composeVar.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a composite variable. — composeVar","title":"Create a composite variable. — composeVar","text":"Create composite variable two variables.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/composeVar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a composite variable. — composeVar","text":"","code":"composeVar(GADSdat, sourceVars, primarySourceVar, newVar, checkVarName = TRUE)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/composeVar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a composite variable. — composeVar","text":"GADSdat GADSdat all_GADSdat object imported via eatGADS. sourceVars Character vector length two containing variable names represent sources information. primarySourceVar Character vector containing single variable name. sourceVars preferred? newVar Character vector containing name new composite variable. checkVarName Logical. newVar checked checkVarNames?","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/composeVar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a composite variable. — composeVar","text":"modified GADSdat.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/composeVar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a composite variable. — composeVar","text":"common use case creating composite variable multiple sources information. example, child parents asked child's native language. cases composite variable contains information variables, meaning one source preferred source used substitute missing values.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/composeVar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a composite variable. — composeVar","text":"","code":"# example data dat <- data.frame(ID = 1:4, nat_lang_child = c(\"Engl\", \"Ger\", \"missing\", \"missing\"), nat_lang_father = c(\"Engl\", \"Engl\", \"Ger\", \"missing\"), stringsAsFactors = TRUE) gads <- import_DF(dat) changeMissings(gads, \"nat_lang_child\", value = 3, missings = \"miss\") #> $dat #>   ID nat_lang_child nat_lang_father #> 1  1              1               1 #> 2  2              2               1 #> 3  3              3               2 #> 4  4              3               3 #>  #> $labels #>           varName varLabel format display_width labeled value valLabel missings #> 1              ID     <NA>   <NA>            NA      no    NA     <NA>     <NA> #> 2  nat_lang_child     <NA>   <NA>            NA     yes     1     Engl    valid #> 3  nat_lang_child     <NA>   <NA>            NA     yes     2      Ger    valid #> 4  nat_lang_child     <NA>   <NA>            NA     yes     3  missing     miss #> 5 nat_lang_father     <NA>   <NA>            NA     yes     1     Engl    valid #> 6 nat_lang_father     <NA>   <NA>            NA     yes     2      Ger    valid #> 7 nat_lang_father     <NA>   <NA>            NA     yes     3  missing    valid #>  #> attr(,\"class\") #> [1] \"GADSdat\" \"list\"    changeMissings(gads, \"nat_lang_father\", value = 3, missings = \"miss\") #> $dat #>   ID nat_lang_child nat_lang_father #> 1  1              1               1 #> 2  2              2               1 #> 3  3              3               2 #> 4  4              3               3 #>  #> $labels #>           varName varLabel format display_width labeled value valLabel missings #> 1              ID     <NA>   <NA>            NA      no    NA     <NA>     <NA> #> 2  nat_lang_child     <NA>   <NA>            NA     yes     1     Engl    valid #> 3  nat_lang_child     <NA>   <NA>            NA     yes     2      Ger    valid #> 4  nat_lang_child     <NA>   <NA>            NA     yes     3  missing    valid #> 5 nat_lang_father     <NA>   <NA>            NA     yes     1     Engl    valid #> 6 nat_lang_father     <NA>   <NA>            NA     yes     2      Ger    valid #> 7 nat_lang_father     <NA>   <NA>            NA     yes     3  missing     miss #>  #> attr(,\"class\") #> [1] \"GADSdat\" \"list\"     # compose variable composeVar(gads, sourceVars = c(\"nat_lang_child\", \"nat_lang_father\"),            primarySourceVar = \"nat_lang_child\", newVar = \"nat_lang_comp\") #> $dat #>   ID nat_lang_comp nat_lang_child nat_lang_father #> 1  1             1              1               1 #> 2  2             2              2               1 #> 3  3             3              3               2 #> 4  4             3              3               3 #>  #> $labels #>            varName varLabel format display_width labeled value valLabel #> 1               ID     <NA>   <NA>            NA      no    NA     <NA> #> 8    nat_lang_comp     <NA>   <NA>            NA     yes     1     Engl #> 9    nat_lang_comp     <NA>   <NA>            NA     yes     2      Ger #> 10   nat_lang_comp     <NA>   <NA>            NA     yes     3  missing #> 2   nat_lang_child     <NA>   <NA>            NA     yes     1     Engl #> 3   nat_lang_child     <NA>   <NA>            NA     yes     2      Ger #> 4   nat_lang_child     <NA>   <NA>            NA     yes     3  missing #> 5  nat_lang_father     <NA>   <NA>            NA     yes     1     Engl #> 6  nat_lang_father     <NA>   <NA>            NA     yes     2      Ger #> 7  nat_lang_father     <NA>   <NA>            NA     yes     3  missing #>    missings #> 1      <NA> #> 8     valid #> 9     valid #> 10    valid #> 2     valid #> 3     valid #> 4     valid #> 5     valid #> 6     valid #> 7     valid #>  #> attr(,\"class\") #> [1] \"GADSdat\" \"list\""},{"path":"https://beckerbenj.github.io/eatGADS/reference/convertCase.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify upper and lower case for strings. — convertCase","title":"Modify upper and lower case for strings. — convertCase","text":"Convert character vector, character variables data.frame selected variables GADSdat upper (\"uppper\"), lower (\"lower\"), first letter upper everything else lower case (\"upperFirst\").","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/convertCase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify upper and lower case for strings. — convertCase","text":"","code":"convertCase(x, case = c(\"lower\", \"upper\", \"upperFirst\"), ...)  # S3 method for class 'GADSdat' convertCase(x, case = c(\"lower\", \"upper\", \"upperFirst\"), vars, ...)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/convertCase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify upper and lower case for strings. — convertCase","text":"x character vector, data.frame, GADSdat. case Character vector length 1. case strings converted ? Available options \"lower\", \"upper\", \"upperFirst\". ... arguments passed methods. vars Character vector. variables GADSdat conversion applied ?","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/convertCase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify upper and lower case for strings. — convertCase","text":"Returns converted object.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/convertCase.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Modify upper and lower case for strings. — convertCase","text":"convertCase(GADSdat): convert case GADSdats","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/convertCase.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify upper and lower case for strings. — convertCase","text":"","code":"# for character convertCase(c(\"Hi\", \"HEllo\", \"greaT\"), case = \"upperFirst\") #> [1] \"Hi\"    \"Hello\" \"Great\"  # for GADSdat input_g <- import_DF(data.frame(v1 = 1:3, v2 = c(\"Hi\", \"HEllo\", \"greaT\"),                           stringsAsFactors = FALSE)) convertCase(input_g, case = \"upperFirst\", vars = \"v2\") #> $dat #>   v1    v2 #> 1  1    Hi #> 2  2 Hello #> 3  3 Great #>  #> $labels #>    varName varLabel format display_width labeled value valLabel missings #> v1      v1     <NA>   <NA>            NA      no    NA     <NA>     <NA> #> v2      v2     <NA>   <NA>            NA      no    NA     <NA>     <NA> #>  #> attr(,\"class\") #> [1] \"GADSdat\" \"list\""},{"path":"https://beckerbenj.github.io/eatGADS/reference/createGADS.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an eatGADS data base. — createGADS","title":"Create an eatGADS data base. — createGADS","text":"Creates relational data base containing hierarchically stored data meta information (e.g. value variable labels).","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/createGADS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an eatGADS data base. — createGADS","text":"","code":"createGADS(allList, pkList, fkList, filePath)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/createGADS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an eatGADS data base. — createGADS","text":"allList object created via mergeLabels. pkList List primary keys. fkList List foreign keys. filePath Path db file write (including name); end '.db'.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/createGADS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an eatGADS data base. — createGADS","text":"Creates data base given path, returns NULL.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/createGADS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an eatGADS data base. — createGADS","text":"Uses createDB eatDB package create relational data base. details define keys see documentation createDB.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/createGADS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an eatGADS data base. — createGADS","text":"","code":"# see createDB vignette"},{"path":"https://beckerbenj.github.io/eatGADS/reference/createLookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract values for recoding. — createLookup","title":"Extract values for recoding. — createLookup","text":"Extract unique values one multiple variables GADSdat object recoding (e.g. via Excel spreadsheet).","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/createLookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract values for recoding. — createLookup","text":"","code":"createLookup(GADSdat, recodeVars, sort_by = NULL, addCols = c(\"value_new\"))"},{"path":"https://beckerbenj.github.io/eatGADS/reference/createLookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract values for recoding. — createLookup","text":"GADSdat GADSdat object. recodeVars Character vector variable names recoded. sort_by column (variable /value) long format data.frame sorted? NULL, sorting performed. addCols Character vector additional column names recoding purposes.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/createLookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract values for recoding. — createLookup","text":"Returns data frame long format following variables: variable Variables specified recodeVars value Unique values variables specified recodeVars value_new default addCols. different additional column names supplied, column missing.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/createLookup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract values for recoding. — createLookup","text":"recoding one multiple variables complex, lookup table can created later application via applyLookup applyLookup_expandVar. function allows extraction values multiple variables sorting unique values via variable /values. addCols specified lookup table formatted via collapseColumns, can applied recode data.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/createLookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract values for recoding. — createLookup","text":"","code":"# create example GADS dat <- data.frame(ID = 1:4, var1 = c(NA, \"Eng\", \"Aus\", \"Aus2\"),                   var2 = c(NA, \"French\", \"Ger\", \"Ita\"),                   stringsAsFactors = FALSE) gads <- import_DF(dat)  # create Lookup table for recoding lookup <- createLookup(gads, recodeVars = c(\"var1\", \"var2\"), sort_by = c(\"value\", \"variable\"))  # create Lookup table for recoding by multiple recoders lookup2 <- createLookup(gads, recodeVars = c(\"var1\", \"var2\"), sort_by = c(\"value\", \"variable\"),                         addCols = c(\"value_recoder1\", \"value_recoder2\"))"},{"path":"https://beckerbenj.github.io/eatGADS/reference/createNumCheck.html","id":null,"dir":"Reference","previous_headings":"","what":"Create data.frame for specification of numerical plausibility checks. — createNumCheck","title":"Create data.frame for specification of numerical plausibility checks. — createNumCheck","text":"numerical variables without value labels GADSdat selected data.frame created, allows specification minima maxima.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/createNumCheck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create data.frame for specification of numerical plausibility checks. — createNumCheck","text":"","code":"createNumCheck(GADSdat)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/createNumCheck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create data.frame for specification of numerical plausibility checks. — createNumCheck","text":"GADSdat GADSdat object.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/createNumCheck.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create data.frame for specification of numerical plausibility checks. — createNumCheck","text":"data.frame following variables: variable numerical variables GADSdat varLabel Corresponding variable labels min Minimum value specific variable. max Maximum value specific variable. value_new value inserted values exceed specified range?","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/createNumCheck.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create data.frame for specification of numerical plausibility checks. — createNumCheck","text":"function currently development.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/createNumCheck.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create data.frame for specification of numerical plausibility checks. — createNumCheck","text":"","code":"# tbd"},{"path":"https://beckerbenj.github.io/eatGADS/reference/createVariable.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a variable. — createVariable","title":"Create a variable. — createVariable","text":"Create empty variable part GADSdat object.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/createVariable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a variable. — createVariable","text":"","code":"createVariable(GADSdat, varName, checkVarName = TRUE)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/createVariable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a variable. — createVariable","text":"GADSdat GADSdat object imported via eatGADS. varName Name variable cloned. checkVarName Logical. varName checked checkVarNames?","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/createVariable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a variable. — createVariable","text":"Returns GADSdat.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/createVariable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a variable. — createVariable","text":"","code":"# create a new variable pisa_new <- createVariable(pisa, varName = \"new_variable\")"},{"path":"https://beckerbenj.github.io/eatGADS/reference/dropDuplicateIDs.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop duplicate IDs in a GADSdat. — dropDuplicateIDs","title":"Drop duplicate IDs in a GADSdat. — dropDuplicateIDs","text":"Drop rows duplicate IDs GADSdat object based numbers missing values.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/dropDuplicateIDs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop duplicate IDs in a GADSdat. — dropDuplicateIDs","text":"","code":"dropDuplicateIDs(GADSdat, ID, varNames = setdiff(namesGADS(GADSdat), ID))"},{"path":"https://beckerbenj.github.io/eatGADS/reference/dropDuplicateIDs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop duplicate IDs in a GADSdat. — dropDuplicateIDs","text":"GADSdat GADSdat object. ID Name ID variable. varNames Character vector variable names: Sum missing values variables decide rows kept. Per default, variables except ID variable used.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/dropDuplicateIDs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop duplicate IDs in a GADSdat. — dropDuplicateIDs","text":"Returns GADSdat duplicate ID rows removed.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/dropDuplicateIDs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Drop duplicate IDs in a GADSdat. — dropDuplicateIDs","text":"duplicate IDs occur, often desirable keep row least missing information. Therefore, dropDuplicateIDs drops rows based number missing values specified variables (varNames). multiple rows number missing values, warning issued first respective rows kept.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/dropDuplicateIDs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop duplicate IDs in a GADSdat. — dropDuplicateIDs","text":"","code":"# create example data set gads_ori <- import_DF(data.frame(id_var = c(1, 2, 5, 4, 4),   var1 = c(1, 2, -99, 1, -99))) gads_ori <- changeMissings(gads_ori, varName = \"var1\",   value = -99, missings = \"miss\")  # drop duplicate IDs dropDuplicateIDs(gads_ori, ID = \"id_var\") #> $dat #>   id_var var1 #> 1      1    1 #> 2      2    2 #> 3      5  -99 #> 4      4    1 #>  #> $labels #>   varName varLabel format display_width labeled value valLabel missings #> 1  id_var     <NA>   <NA>            NA      no    NA     <NA>     <NA> #> 2    var1     <NA>   <NA>            NA     yes   -99     <NA>     miss #>  #> attr(,\"class\") #> [1] \"GADSdat\" \"list\""},{"path":"https://beckerbenj.github.io/eatGADS/reference/dummies2char.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform dummy variables to character variables. — dummies2char","title":"Transform dummy variables to character variables. — dummies2char","text":"Convert set dummy variables set character variables.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/dummies2char.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform dummy variables to character variables. — dummies2char","text":"","code":"dummies2char(GADSdat, dummies, dummyValues, charNames, checkVarNames = TRUE)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/dummies2char.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform dummy variables to character variables. — dummies2char","text":"GADSdat GADSdat object. dummies character vector names dummy variables. dummyValues vector values dummy variables represent. charNames character vector containing new variable names. checkVarNames Logical. charNames checked checkVarNames?","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/dummies2char.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform dummy variables to character variables. — dummies2char","text":"Returns GADSdat.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/dummies2char.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform dummy variables to character variables. — dummies2char","text":"set dummy variables transformed equal number character variables. character variables aligned left remaining character variables set NA. new variable missing codes respective dummy variable reused.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/dummies2char.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform dummy variables to character variables. — dummies2char","text":"","code":"## create an example GADSdat dummy_df <- data.frame(d1 = c(\"eng\", \"no eng\", \"eng\"),                       d2 = c(\"french\", \"french\", \"no french\"),                       d3 = c(\"no ger\", \"ger\", \"no ger\"),                       stringsAsFactors = TRUE) dummy_g <- import_DF(dummy_df)  ## transform dummy variables dummy_g2 <- dummies2char(dummy_g, dummies = c(\"d1\", \"d2\", \"d3\"),                         dummyValues = c(\"english\", \"french\", \"german\"),                         charNames = c(\"char1\", \"char2\", \"char3\"))"},{"path":"https://beckerbenj.github.io/eatGADS/reference/eatGADS-package.html","id":null,"dir":"Reference","previous_headings":"","what":"eatGADS: Data management of hierarchical SPSS files via R and SQLite — eatGADS-package","title":"eatGADS: Data management of hierarchical SPSS files via R and SQLite — eatGADS-package","text":"eatGADS package provides various functionality, mainly: importing data, data meta data cleaning, creating fixed form SQLite data base using SQLite data base.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/eatGADS-package.html","id":"importing-data","dir":"Reference","previous_headings":"","what":"Importing data","title":"eatGADS: Data management of hierarchical SPSS files via R and SQLite — eatGADS-package","text":"SPSS data (.sav) can imported via import_spss. import functions exist well: import_stata importing Stata data (.dta), import_DF importing R data.frames, import_RDS importing R data.frames saved .RDS files, import_raw well import_raw2 importing data raw data meta data files.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/eatGADS-package.html","id":"data-and-meta-data-cleaning","dir":"Reference","previous_headings":"","what":"Data and meta data cleaning","title":"eatGADS: Data management of hierarchical SPSS files via R and SQLite — eatGADS-package","text":"Data cleaning functions include functions recoding data (e.g., recodeGADS) re-ordering variables (e.g., relocateVariable). Meta data cleaning functions include functions changing variables labels (e.g., changeVarLabels), changing value labels changeValLabels modifying missings tags changeMissings.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/eatGADS-package.html","id":"creating-a-gads-data-base","dir":"Reference","previous_headings":"","what":"Creating a GADS data base","title":"eatGADS: Data management of hierarchical SPSS files via R and SQLite — eatGADS-package","text":"Hierarchical data sets combined via mergeLabels data base created via createGADS. , package eatDB utilized. See also createDB.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/eatGADS-package.html","id":"using-the-gads","dir":"Reference","previous_headings":"","what":"Using the GADS","title":"eatGADS: Data management of hierarchical SPSS files via R and SQLite — eatGADS-package","text":"content data base can obtained via namesGADS. Data extracted data base via getGADS single GADS via getTrendGADS trend analysis. resulting object GADSdat object. Meta data can extracted via extractMeta, either GADSdat object directly data base. Data can extracted GADSdat object via extractData.","code":""},{"path":[]},{"path":"https://beckerbenj.github.io/eatGADS/reference/eatGADS-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"eatGADS: Data management of hierarchical SPSS files via R and SQLite — eatGADS-package","text":"Maintainer: Benjamin Becker b.becker@iqb.hu-berlin.de contributors: Karoline Sachse [contributor] Johanna Busse [contributor]","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/emptyTheseVariables.html","id":null,"dir":"Reference","previous_headings":"","what":"Set variables to NA. — emptyTheseVariables","title":"Set variables to NA. — emptyTheseVariables","text":"Set values within one multiple variables NA.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/emptyTheseVariables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set variables to NA. — emptyTheseVariables","text":"","code":"emptyTheseVariables(GADSdat, vars, label_suffix = \"\")"},{"path":"https://beckerbenj.github.io/eatGADS/reference/emptyTheseVariables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set variables to NA. — emptyTheseVariables","text":"GADSdat GADSdat object. vars Character vector variable names set NA. label_suffix Suffix added variable labels affected variables GADSdat.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/emptyTheseVariables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set variables to NA. — emptyTheseVariables","text":"Returns recoded GADSdat.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/emptyTheseVariables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set variables to NA. — emptyTheseVariables","text":"","code":"# empty multiple variables pisa2 <- emptyTheseVariables(pisa, vars = c(\"idstud\", \"idschool\"))"},{"path":"https://beckerbenj.github.io/eatGADS/reference/equalGADS.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if two GADSdat objects are (nearly) equal — equalGADS","title":"Test if two GADSdat objects are (nearly) equal — equalGADS","text":"Run tests check whether two GADSdat objects (nearly) equal. Variable names, number rows data, meta data data differences checked reported list output.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/equalGADS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if two GADSdat objects are (nearly) equal — equalGADS","text":"","code":"equalGADS(   target,   current,   id = NULL,   metaExceptions = c(\"display_width\", \"labeled\"),   tolerance = sqrt(.Machine$double.eps) )"},{"path":"https://beckerbenj.github.io/eatGADS/reference/equalGADS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if two GADSdat objects are (nearly) equal — equalGADS","text":"target GADSdat object. current GADSdat object. id character vector length 1 containing unique identifier column GADSdat. specified, GADSdat ordered according ID comparing data. metaExceptions certain meta data columns excluded comparison? tolerance numeric value greater equal 0. Differences smaller tolerance reported. default value close 1.5e-8.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/equalGADS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if two GADSdat objects are (nearly) equal — equalGADS","text":"Returns list.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/equalGADS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test if two GADSdat objects are (nearly) equal — equalGADS","text":"detailed checks individual variables can performed via inspectDifferences inspectMetaDifferences.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/export_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform a GADSdat to a tibble — export_tibble","title":"Transform a GADSdat to a tibble — export_tibble","text":"haven's read_spss stores data together meta data (e.g. value variable labels) tibble attributes variable level. function transforms GADSdat object tibble.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/export_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform a GADSdat to a tibble — export_tibble","text":"","code":"export_tibble(GADSdat)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/export_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform a GADSdat to a tibble — export_tibble","text":"GADSdat GADSdat object imported via eatGADS.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/export_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform a GADSdat to a tibble — export_tibble","text":"Returns tibble.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/export_tibble.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform a GADSdat to a tibble — export_tibble","text":"function mainly intended internal use. documentation see also write_spss.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/export_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform a GADSdat to a tibble — export_tibble","text":"","code":"pisa_tbl <- export_tibble(pisa)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/extractData.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Data — extractData","title":"Extract Data — extractData","text":"Extract data.frame GADSdat object analyses R. Value labels can  selectively applied via defining convertLabels covertVariables.  extracting meta data see extractMeta.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/extractData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Data — extractData","text":"","code":"extractData(   GADSdat,   convertMiss = TRUE,   convertLabels = c(\"character\", \"factor\", \"numeric\"),   convertVariables = NULL,   dropPartialLabels = TRUE )"},{"path":"https://beckerbenj.github.io/eatGADS/reference/extractData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Data — extractData","text":"GADSdat GADSdat object. convertMiss values tagged missing values recoded NA? convertLabels \"numeric\", values remain numerics. \"factor\" \"character\", values recoded labels. Corresponding variable type applied. convertVariables Character vector variables names, labels applied . variables remain numeric variables data. specified [default], value labels applied variables labels available. Variable names actual GADS silently dropped. dropPartialLabels value labels partially labeled variables dropped? TRUE, partial labels dropped. FALSE, variable converted class specified convertLabels.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/extractData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Data — extractData","text":"Returns data frame.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/extractData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Data — extractData","text":"GADSdat object includes actual data (GADSdat$dat) corresponding meta data information (GADSdat$labels). extractData extracts data applies relevant meta data value level (missing conversion, value labels), data can used analyses R. Variable labels retained label attributes column level. factor extracted via convertLabels == \"factor\", attempt made preserve underlying integers. possible, warning issued. SPSS almost limitations regarding underlying values labeled integers R's factor format strict (0, integers increasing + 1), procedure can lead frequent problems.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/extractData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Data — extractData","text":"","code":"# Extract Data for Analysis dat <- extractData(pisa)  # convert labeled variables to factors dat <- extractData(pisa, convertLabels = \"factor\")  # convert only some variables to factor, all others remain numeric dat <- extractData(pisa, convertLabels = \"factor\", convertVariables = c(\"schtype\", \"ganztag\"))  # convert only some variables to character, all others remain numeric dat <- extractData(pisa, convertLabels = \"factor\", convertVariables = c(\"schtype\", \"ganztag\")) # schtype is now character table(dat$schtype) #>  #>                Gymnasium (academic track)  #>                                       221  #>                                Realschule  #>                                       168  #> schools with several courses of education  #>                                       111  # schtype remains numeric table(dat$gender) #>  #>   1   2  #> 257 243"},{"path":"https://beckerbenj.github.io/eatGADS/reference/extractData2.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Data 2 — extractData2","title":"Extract Data 2 — extractData2","text":"Extract data.frame GADSdat object analyses R. Per default, missing codes applied value labels dropped. Alternatively, value labels can selectively applied via labels2character, labels2factor, labels2ordered. extracting meta data see extractMeta.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/extractData2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Data 2 — extractData2","text":"","code":"extractData2(   GADSdat,   convertMiss = TRUE,   labels2character = NULL,   labels2factor = NULL,   labels2ordered = NULL,   dropPartialLabels = TRUE )"},{"path":"https://beckerbenj.github.io/eatGADS/reference/extractData2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Data 2 — extractData2","text":"GADSdat GADSdat object. convertMiss values tagged missing values recoded NA? labels2character variables values recoded labels? resulting variables type character. labels2factor variables values recoded labels? resulting variables type factor. labels2ordered variables values recoded labels? resulting variables type ordered. dropPartialLabels value labels partially labeled variables dropped? TRUE, partial labels dropped. FALSE, variable converted class specified labels2character, labels2factor, labels2ordered.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/extractData2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Data 2 — extractData2","text":"Returns data frame.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/extractData2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Data 2 — extractData2","text":"GADSdat object includes actual data (GADSdat$dat) corresponding meta data information (GADSdat$labels). extractData2 extracts data applies relevant meta data value level (missing tags, value labels), data can used analyses R. Variable labels retained label attributes column level. factor extracted via labels2factor labels2ordered, attempt made preserve underlying integers. possible, warning issued. SPSS almost limitations regarding underlying values labeled integers R's factor format strict (0, integers increasing + 1), procedure can lead frequent problems. multiple values variable assigned value label variable transformed character, factor, ordered, warning issued transformation correctly performed.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/extractData2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Data 2 — extractData2","text":"","code":"# Extract Data for Analysis dat <- extractData2(pisa)  # convert only some variables to character, all others remain numeric dat <- extractData2(pisa, labels2character = c(\"schtype\", \"ganztag\"))  # convert only some variables to factor, all others remain numeric dat <- extractData2(pisa, labels2factor = c(\"schtype\", \"ganztag\"))  # convert all labeled variables to factors dat <- extractData2(pisa, labels2factor = namesGADS(pisa))  # convert somme variables to factor, some to character dat <- extractData2(pisa, labels2character = c(\"schtype\", \"ganztag\"),                           labels2factor = c(\"migration\"))"},{"path":"https://beckerbenj.github.io/eatGADS/reference/extractDataOld.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Data while merging linking errors. — extractDataOld","title":"Extract Data while merging linking errors. — extractDataOld","text":"Support linking error data bases removed eatGADS. extractDataOld provides (time ) backwards compatibility, linking errors can still merged automatically.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/extractDataOld.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Data while merging linking errors. — extractDataOld","text":"","code":"extractDataOld(   GADSdat,   convertMiss = TRUE,   convertLabels = \"character\",   dropPartialLabels = TRUE,   convertVariables = NULL )"},{"path":"https://beckerbenj.github.io/eatGADS/reference/extractDataOld.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Data while merging linking errors. — extractDataOld","text":"GADSdat GADSdat object. convertMiss values coded missing values recoded NA? convertLabels \"numeric\", values remain numerics. \"factor\" \"character\", values recoded labels. Corresponding variable type applied. dropPartialLabels value labels partially labeled variables dropped? TRUE, partial labels dropped. FALSE, variable converted class specified convertLabels. convertVariables Character vector variables names, labels applied . specified (default), value labels applied variables labels available. Variable names actual GADS silently dropped.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/extractDataOld.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Data while merging linking errors. — extractDataOld","text":"Returns data frame.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/extractDataOld.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Data while merging linking errors. — extractDataOld","text":"See extractData current functionality.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/extractGADSdat.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract single GADSdat from all_GADSdat — extractGADSdat","title":"Extract single GADSdat from all_GADSdat — extractGADSdat","text":"Function extract single GADSdat all_GADSdat object.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/extractGADSdat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract single GADSdat from all_GADSdat — extractGADSdat","text":"","code":"extractGADSdat(all_GADSdat, name)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/extractGADSdat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract single GADSdat from all_GADSdat — extractGADSdat","text":"all_GADSdat all_GADSdat object name character vector length 1 name GADSdat","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/extractGADSdat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract single GADSdat from all_GADSdat — extractGADSdat","text":"Returns GADSdat object.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/extractGADSdat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract single GADSdat from all_GADSdat — extractGADSdat","text":"GADSdat objects can merged single all_GADSdat object via mergeLabels. function, performs reverse action, extracting single GADSdat object.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/extractGADSdat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract single GADSdat from all_GADSdat — extractGADSdat","text":"","code":"# see createGADS vignette"},{"path":"https://beckerbenj.github.io/eatGADS/reference/extractMeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Meta Data — extractMeta","title":"Get Meta Data — extractMeta","text":"Extract meta data (e.g. variable values labels) eatGADS object. can GADSdat, all_GADSdat, labels data.frame, path existing data base.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/extractMeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Meta Data — extractMeta","text":"","code":"extractMeta(GADSobject, vars = NULL)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/extractMeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Meta Data — extractMeta","text":"GADSobject Either GADSdat object path existing eatGADS data base. vars character vector containing variable names. NULL (default), available meta information returned.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/extractMeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Meta Data — extractMeta","text":"Returns long format data frame meta information.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/extractMeta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Meta Data — extractMeta","text":"Meta data stored tidily GADSdat objects separate long format data frame. information can extracted single multiple variables.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/extractMeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Meta Data — extractMeta","text":"","code":"# Extract Meta data from data base db_path <- system.file(\"extdata\", \"pisa.db\", package = \"eatGADS\") extractMeta(db_path, vars = c(\"schtype\", \"sameteach\")) #>       varName                               varLabel format display_width #> 358 sameteach Same math teacher in both school years   F8.0            NA #> 359 sameteach Same math teacher in both school years   F8.0            NA #> 360   schtype                           School track   F8.0            NA #> 361   schtype                           School track   F8.0            NA #> 362   schtype                           School track   F8.0            NA #>     labeled value                                  valLabel missings data_table #> 358     yes     1                                        No    valid      noImp #> 359     yes     2                                       Yes    valid      noImp #> 360     yes     1                Gymnasium (academic track)    valid      noImp #> 361     yes     2                                Realschule    valid      noImp #> 362     yes     3 schools with several courses of education    valid      noImp  # Extract Meta data from loaded/imported GADS extractMeta(pisa, vars = c(\"schtype\", \"sameteach\")) #>     varName                               varLabel format display_width labeled #> 5   schtype                           School track   F8.0            NA     yes #> 6   schtype                           School track   F8.0            NA     yes #> 7   schtype                           School track   F8.0            NA     yes #> 8 sameteach Same math teacher in both school years   F8.0            NA     yes #> 9 sameteach Same math teacher in both school years   F8.0            NA     yes #>   value                                  valLabel missings #> 5     1                Gymnasium (academic track)    valid #> 6     2                                Realschule    valid #> 7     3 schools with several courses of education    valid #> 8     1                                        No    valid #> 9     2                                       Yes    valid"},{"path":"https://beckerbenj.github.io/eatGADS/reference/extractVars.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract or remove variables from a GADSdat. — extractVars","title":"Extract or remove variables from a GADSdat. — extractVars","text":"Extract remove variables meta data GADSdat object.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/extractVars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract or remove variables from a GADSdat. — extractVars","text":"","code":"extractVars(GADSdat, vars)  removeVars(GADSdat, vars)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/extractVars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract or remove variables from a GADSdat. — extractVars","text":"GADSdat GADSdat object. vars character vector containing variables names GADSdat.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/extractVars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract or remove variables from a GADSdat. — extractVars","text":"Returns GADSdat object.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/extractVars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract or remove variables from a GADSdat. — extractVars","text":"functions simply perform variable removal extraction underlying data.frame GADSdat object followed calling updateMeta.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/extractVars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract or remove variables from a GADSdat. — extractVars","text":"","code":"## create an example GADSdat example_df <- data.frame(ID = 1:4,                         age = c(12, 14, 16, 13),                         citizenship1 = c(\"German\", \"English\", \"Polish\", \"Chinese\"),                         citizenship2 = c(NA, \"German\", \"Chinese\", \"Polish\"),                         stringsAsFactors = TRUE) gads <- import_DF(example_df)  ## remove variables from GADSdat gads2 <- removeVars(gads, vars = c(\"citizenship2\", \"age\")) #> Removing the following rows from meta data: age, citizenship2 #> No rows added to meta data.  ## extract GADSdat with specific variables gads3 <- extractVars(gads, vars = c(\"ID\", \"citizenship1\")) #> Removing the following rows from meta data: age, citizenship2 #> No rows added to meta data."},{"path":"https://beckerbenj.github.io/eatGADS/reference/fac2dummies.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform a factor variable to dummy variables. — fac2dummies","title":"Transform a factor variable to dummy variables. — fac2dummies","text":"Convert factor variable n levels n dummy variables.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/fac2dummies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform a factor variable to dummy variables. — fac2dummies","text":"","code":"fac2dummies(GADSdat, var)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/fac2dummies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform a factor variable to dummy variables. — fac2dummies","text":"GADSdat data.frame GADSdat object. var character vector name factor variable.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/fac2dummies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform a factor variable to dummy variables. — fac2dummies","text":"Returns GADSdat containing newly computed variables.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/fac2dummies.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform a factor variable to dummy variables. — fac2dummies","text":"Newly created variables named original variable suffix \"_a\", \"_b\" . Variable labels created using original variable label (available) adding value label corresponding level. missing codes forwarded dummy variables.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/fac2dummies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform a factor variable to dummy variables. — fac2dummies","text":"","code":"## create an example GADSdat suppressMessages(gads <- import_DF(iris))  ## transform factor variable gads2 <- fac2dummies(gads, var = \"Species\") #> The following dummy variables have been created: Species_a, Species_b, Species_c"},{"path":"https://beckerbenj.github.io/eatGADS/reference/fac2dummies_complex.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform a complex factor variable to dummy variables. — fac2dummies_complex","title":"Transform a complex factor variable to dummy variables. — fac2dummies_complex","text":"Convert factor variable complex factor levels (factor levels contain combinations factor levels) dummy variables. Dummy variables coded 1 (\"yes\") 0 (\"\").","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/fac2dummies_complex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform a complex factor variable to dummy variables. — fac2dummies_complex","text":"","code":"fac2dummies_complex(GADSdat, var)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/fac2dummies_complex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform a complex factor variable to dummy variables. — fac2dummies_complex","text":"GADSdat data.frame GADSdat object. var character vector name factor variable.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/fac2dummies_complex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform a complex factor variable to dummy variables. — fac2dummies_complex","text":"Returns GADSdat containing newly computed variables.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/fac2dummies_complex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform a complex factor variable to dummy variables. — fac2dummies_complex","text":"basic functionality function analogous fac2dummies. However, function expects factor levels go 9. Higher numbers treated combinations factor levels, example \"13\" \"1\" \"3\".","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/fac2dummies_complex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform a complex factor variable to dummy variables. — fac2dummies_complex","text":"","code":"## create an example GADSdat df_fac <- data.frame(id = 1:6, fac = c(\"Opt a\", \"Opt c, Opt b\", \"Opt c\", \"Opt b\", \"Opt a, Opt b\", \"Opt a, Opt b, Opt c\"), stringsAsFactors = TRUE) g_fac <- import_DF(df_fac) g_fac <- recodeGADS(g_fac, varName = \"fac\", oldValues = c(1, 2, 3, 4, 5, 6),                      newValues = c(1, 12, 123, 2, 3, 23))  ## transform factor variable fac2dummies_complex(g_fac, \"fac\") #> The following dummy variables have been created: fac_a, fac_b, fac_c #> $dat #>   id fac fac_a fac_b fac_c #> 1  1   1     1     0     0 #> 2  2  23     0     1     1 #> 3  3   3     0     0     1 #> 4  4   2     0     1     0 #> 5  5  12     1     1     0 #> 6  6 123     1     1     1 #>  #> $labels #>    varName   varLabel format display_width labeled value            valLabel #> 1       id       <NA>   <NA>            NA      no    NA                <NA> #> 2      fac       <NA>   <NA>            NA     yes     1               Opt a #> 3      fac       <NA>   <NA>            NA     yes     2               Opt b #> 4      fac       <NA>   <NA>            NA     yes     3               Opt c #> 5      fac       <NA>   <NA>            NA     yes    12        Opt a, Opt b #> 6      fac       <NA>   <NA>            NA     yes    23        Opt c, Opt b #> 7      fac       <NA>   <NA>            NA     yes   123 Opt a, Opt b, Opt c #> 8    fac_a fac: Opt a   F2.0            NA     yes     0                  no #> 9    fac_a fac: Opt a   F2.0            NA     yes     1                 yes #> 10   fac_b fac: Opt b   F2.0            NA     yes     0                  no #> 11   fac_b fac: Opt b   F2.0            NA     yes     1                 yes #> 12   fac_c fac: Opt c   F2.0            NA     yes     0                  no #> 13   fac_c fac: Opt c   F2.0            NA     yes     1                 yes #>    missings #> 1      <NA> #> 2     valid #> 3     valid #> 4     valid #> 5     valid #> 6     valid #> 7     valid #> 8     valid #> 9     valid #> 10    valid #> 11    valid #> 12    valid #> 13    valid #>  #> attr(,\"class\") #> [1] \"GADSdat\" \"list\""},{"path":"https://beckerbenj.github.io/eatGADS/reference/fillImputations.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill imputed values. — fillImputations","title":"Fill imputed values. — fillImputations","text":"Fill imputed values imputed GADSdat_imp object original, imputed values GADSdat.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/fillImputations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill imputed values. — fillImputations","text":"","code":"fillImputations(GADSdat, GADSdat_imp, varName, varName_imp = varName, id, imp)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/fillImputations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill imputed values. — fillImputations","text":"GADSdat GADSdat object. GADSdat_imp GADSdat object. varName character vector length 1 containing variable name GADSdat. varName_imp character vector length 1 containing variable name GADSdat_imp. id character vector length 1 containing unique identifier column GADSdat. imp character vector length 1 containing imputation number GADSdat_imp.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/fillImputations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fill imputed values. — fillImputations","text":"modified GADSdat_imp..","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/fillImputations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fill imputed values. — fillImputations","text":"function fills missing values imputed variable imputed variable. provides parts functionality subImputations check whether values mistakenly imputed. However, performance increased substantially.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/fillImputations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fill imputed values. — fillImputations","text":"","code":"# tbd"},{"path":"https://beckerbenj.github.io/eatGADS/reference/fixEncoding.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove special characters. — fixEncoding","title":"Remove special characters. — fixEncoding","text":"Remove special characters character vector GADSdat object. Also suitable fix encoding problems character vector GADSdat object. See details available options.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/fixEncoding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove special characters. — fixEncoding","text":"","code":"fixEncoding(x, input = c(\"other\", \"ASCII\", \"windows1250\", \"BRISE\"))"},{"path":"https://beckerbenj.github.io/eatGADS/reference/fixEncoding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove special characters. — fixEncoding","text":"x character vector GADSdat object. input encoding used import_spss.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/fixEncoding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove special characters. — fixEncoding","text":"modified character vector GADSdat object.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/fixEncoding.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove special characters. — fixEncoding","text":"option \"\" replaces correctly encoded special signs. option \"ASCII\" works strings encoded presumably using UTF-8 imported using ASCII encoding. option \"windows1250\" works strings encoded presumably using UTF-8 imported using windows-1250 encoding. option \"BRISE\" covers unique case used FDZ IQB. entries upper case, special characters also transformed upper case (e.g., \"AE\" instead \"Ae\").","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/fixEncoding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove special characters. — fixEncoding","text":"","code":"fixEncoding(c(\"\\U00C4pfel\", \"\\U00C4PFEL\", paste0(\"\\U00DC\", \"ben\"), paste0(\"\\U00DC\", \"BEN\"))) #> [1] \"Aepfel\" \"AEPFEL\" \"Ueben\"  \"UEBEN\""},{"path":"https://beckerbenj.github.io/eatGADS/reference/getChangeMeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract table for Meta Data Changes. — getChangeMeta","title":"Extract table for Meta Data Changes. — getChangeMeta","text":"Function obtain data frame GADSdat object changes meta data variable value level.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/getChangeMeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract table for Meta Data Changes. — getChangeMeta","text":"","code":"getChangeMeta(GADSdat, level = \"variable\")"},{"path":"https://beckerbenj.github.io/eatGADS/reference/getChangeMeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract table for Meta Data Changes. — getChangeMeta","text":"GADSdat GADSdat object imported via eatGADS. level 'variable' 'value'.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/getChangeMeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract table for Meta Data Changes. — getChangeMeta","text":"Returns meta data sheet variables including corresponding change columns.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/getChangeMeta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract table for Meta Data Changes. — getChangeMeta","text":"Changes variable level include variable names (varName), variable labels (varLabel), SPSS format ((format)) display width (display_width). Changes value level include values (value), value labels (valLabel) missing codes (missings).","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/getChangeMeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract table for Meta Data Changes. — getChangeMeta","text":"","code":"# For changes on variable level varChangeTable <- getChangeMeta(pisa, level = \"variable\")  # For changes on value level valChangeTable <- getChangeMeta(pisa, level = \"value\")"},{"path":"https://beckerbenj.github.io/eatGADS/reference/getGADS.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data from GADS data base. — getGADS","title":"Get data from GADS data base. — getGADS","text":"Extracts variables GADS data base. specified variables extracted. Note selection determines format data.frame extracted.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/getGADS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data from GADS data base. — getGADS","text":"","code":"getGADS(vSelect = NULL, filePath)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/getGADS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data from GADS data base. — getGADS","text":"vSelect Character vector variable names. filePath Path existing eatGADS data base file.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/getGADS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data from GADS data base. — getGADS","text":"Returns GADSdat object.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/getGADS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get data from GADS data base. — getGADS","text":"See createDB dbPull explanation query merging processes.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/getGADS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data from GADS data base. — getGADS","text":"","code":"# Use data base within package db_path <- system.file(\"extdata\", \"pisa.db\", package = \"eatGADS\") pisa_gads <- getGADS(db_path, vSelect = c(\"schtype\", \"sameteach\"))"},{"path":"https://beckerbenj.github.io/eatGADS/reference/getGADS_fast.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data from GADS data base fast from server directory. — getGADS_fast","title":"Get data from GADS data base fast from server directory. — getGADS_fast","text":"Extracts variables eatGADS data base. specified variables extracted. Note selection determines format data.frame extracted. CAREFUL: function uses local temporary directory speed loading data base server caches data base locally running R session. temporary data base removed automatically running R session terminated.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/getGADS_fast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data from GADS data base fast from server directory. — getGADS_fast","text":"","code":"getGADS_fast(vSelect = NULL, filePath, tempPath = tempdir())"},{"path":"https://beckerbenj.github.io/eatGADS/reference/getGADS_fast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data from GADS data base fast from server directory. — getGADS_fast","text":"vSelect Character vector variable names. filePath Path existing eatGADS data base file. tempPath Local directory data base can temporarily stored. Using default recommended.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/getGADS_fast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data from GADS data base fast from server directory. — getGADS_fast","text":"Returns GADSdat object.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/getGADS_fast.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get data from GADS data base fast from server directory. — getGADS_fast","text":"random temporary directory used caching data base removed, R sessions terminates. See createDB dbPull explanation query merging processes.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/getTrendGADS.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data for trend reports. — getTrendGADS","title":"Get data for trend reports. — getTrendGADS","text":"Extracts variables multiple eatGADS data bases. Data can extracted GADSdat object via extractData. extracting meta data data base GADSdat object see extractMeta. speed data loading, getGADS_fast used per default.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/getTrendGADS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data for trend reports. — getTrendGADS","text":"","code":"getTrendGADS(   filePaths,   vSelect = NULL,   years,   fast = TRUE,   tempPath = tempdir(),   verbose = TRUE )"},{"path":"https://beckerbenj.github.io/eatGADS/reference/getTrendGADS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data for trend reports. — getTrendGADS","text":"filePaths Character vectors paths eatGADS db files. vSelect Variables GADS selected (character vector). years numeric vector identical length filePaths. fast getGADS_fast used data loading instead getGADS? Using default heavily recommended. tempPath directory, GADS temporarily stored. Using default heavily recommended. verbose loading process reported?","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/getTrendGADS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data for trend reports. — getTrendGADS","text":"Returns GADSdat object.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/getTrendGADS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get data for trend reports. — getTrendGADS","text":"function extracts data multiple GADS data bases. data bases created via createGADS. data bases joined via rbind() variable year added, corresponding argument years. GADSdat object can used via extractData. See createDB dbPull explanation querying merging processes.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/getTrendGADS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data for trend reports. — getTrendGADS","text":"","code":"# See getGADS vignette"},{"path":"https://beckerbenj.github.io/eatGADS/reference/getTrendGADSOld.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data for trend reports. — getTrendGADSOld","title":"Get data for trend reports. — getTrendGADSOld","text":"Support linking error data bases removed eatGADS. getGADSold provides (time ) backwards compatibility, linking errors can still extracted automatically.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/getTrendGADSOld.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data for trend reports. — getTrendGADSOld","text":"","code":"getTrendGADSOld(   filePath1,   filePath2,   lePath = NULL,   vSelect = NULL,   years,   fast = TRUE,   tempPath = tempdir() )"},{"path":"https://beckerbenj.github.io/eatGADS/reference/getTrendGADSOld.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data for trend reports. — getTrendGADSOld","text":"filePath1 Path first eatGADS db file. filePath2 Path second eatGADS db file. lePath Path linking error db file. NULL, linking errors added data. vSelect Variables GADS selected (character vector). years numeric vector length 2. first elements corresponds filePath1, second element filePath2. fast getGADS_fast used data loading instead getGADS? Using default heavily recommended. tempPath directory, GADS temporarily stored. Using default heavily recommended.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/getTrendGADSOld.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data for trend reports. — getTrendGADSOld","text":"Returns GADSdat object.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/getTrendGADSOld.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get data for trend reports. — getTrendGADSOld","text":"See getGADS current functionality.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/getTrendGADSOld.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data for trend reports. — getTrendGADSOld","text":"","code":"# See getGADS vignette"},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_DF.html","id":null,"dir":"Reference","previous_headings":"","what":"Import R data.frame — import_DF","title":"Import R data.frame — import_DF","text":"Function import data.frame object use eatGADS extracting value labels factors.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_DF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import R data.frame — import_DF","text":"","code":"import_DF(df, checkVarNames = TRUE)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_DF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import R data.frame — import_DF","text":"df data.frame. checkVarNames variable names checked violations SQLite R naming rules?","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_DF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import R data.frame — import_DF","text":"Returns list actual data dat data frame meta information long format labels.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_DF.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import R data.frame — import_DF","text":"Factors integers labeled variable levels. import_DF extracts labels stores separate meta data data.frame. See import_spss detailed information.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_DF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import R data.frame — import_DF","text":"","code":"dat <- import_DF(iris, checkVarNames = FALSE)  # Inspect Meta data extractMeta(dat) #>        varName varLabel format display_width labeled value   valLabel missings #> 1 Sepal.Length     <NA>   <NA>            NA      no    NA       <NA>     <NA> #> 2  Sepal.Width     <NA>   <NA>            NA      no    NA       <NA>     <NA> #> 3 Petal.Length     <NA>   <NA>            NA      no    NA       <NA>     <NA> #> 4  Petal.Width     <NA>   <NA>            NA      no    NA       <NA>     <NA> #> 5      Species     <NA>   <NA>            NA     yes     1     setosa    valid #> 6      Species     <NA>   <NA>            NA     yes     2 versicolor    valid #> 7      Species     <NA>   <NA>            NA     yes     3  virginica    valid  # Extract Data dat <- extractData(dat, convertLabels = \"character\")"},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_RDS.html","id":null,"dir":"Reference","previous_headings":"","what":"Import RDS file — import_RDS","title":"Import RDS file — import_RDS","text":"Function import data.frame stored .RDS file extracting value labels factors.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_RDS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import RDS file — import_RDS","text":"","code":"import_RDS(filePath, checkVarNames = TRUE)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_RDS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import RDS file — import_RDS","text":"filePath Source file location, ending .RDS. checkVarNames variable names checked violations SQLite R naming rules?","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_RDS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import RDS file — import_RDS","text":"Returns list actual data dat data frame meta information long format labels.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_RDS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import RDS file — import_RDS","text":"Factors integers labeled variable levels. import_RDS extracts labels stores separate meta data data.frame. See import_DF detailed information. function wrapper around import_DF.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_convertLabel.html","id":null,"dir":"Reference","previous_headings":"","what":"Import an object imported via convertLabel — import_convertLabel","title":"Import an object imported via convertLabel — import_convertLabel","text":"Function import data.frame object created convertLabel use eatGADS. possible, importing data via import_spss always preferred.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_convertLabel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import an object imported via convertLabel — import_convertLabel","text":"","code":"import_convertLabel(df, checkVarNames = TRUE)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_convertLabel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import an object imported via convertLabel — import_convertLabel","text":"df data.frame. checkVarNames variable names checked violations SQLite R naming rules?","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_convertLabel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import an object imported via convertLabel — import_convertLabel","text":"Returns list actual data dat data frame meta information long format labels.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_convertLabel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import an object imported via convertLabel — import_convertLabel","text":"convertLabel R package eatAnalysis converts object imported via read.spss (foreign package) data.frame factors variable labels stored variable attributes.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Import R data frame with explicit meta data sheets — import_raw","title":"Import R data frame with explicit meta data sheets — import_raw","text":"Function import data.frame object use eatGADS adding explicit variable value meta information separate data.frames.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import R data frame with explicit meta data sheets — import_raw","text":"","code":"import_raw(df, varLabels, valLabels = NULL, checkVarNames = TRUE)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import R data frame with explicit meta data sheets — import_raw","text":"df data.frame. varLabels data.frame containing variable labels. variables data exactly one column data.frame. valLabels data.frame containing value labels. referenced variables appear data, variables data receive value labels. Can omitted. checkVarNames variable names checked violations SQLite R naming rules?","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import R data frame with explicit meta data sheets — import_raw","text":"Returns list actual data dat meta information long format labels.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_raw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import R data frame with explicit meta data sheets — import_raw","text":"argument varLables contain exactly two variables, namely varName varLabel. valLables contain exactly four variables, namely varName, value, valLabel missings. column value can contain numerical values. column missings can contain values \"valid\" \"miss\". Variables type factor supported data.frames.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import R data frame with explicit meta data sheets — import_raw","text":"","code":"dat <- data.frame(ID = 1:5, grade = c(1, 1, 2, 3, 1)) varLabels <- data.frame(varName = c(\"ID\", \"grade\"),                        varLabel = c(\"Person Identifier\", \"School grade Math\"),                        stringsAsFactors = FALSE) valLabels <- data.frame(varName = c(\"grade\", \"grade\", \"grade\"),                        value = c(1, 2, 3),                        valLabel = c(\"very good\", \"good\", \"sufficient\"),                        missings = c(\"valid\", \"valid\", \"valid\"),                        stringsAsFactors = FALSE)  gads <- import_raw(df = dat, varLabels = varLabels, valLabels = valLabels, checkVarNames = FALSE)  # Inspect Meta data extractMeta(gads) #>   varName          varLabel format display_width labeled value   valLabel #> 1      ID Person Identifier   <NA>            NA      no    NA       <NA> #> 2   grade School grade Math   <NA>            NA     yes     1  very good #> 3   grade School grade Math   <NA>            NA     yes     2       good #> 4   grade School grade Math   <NA>            NA     yes     3 sufficient #>   missings #> 1     <NA> #> 2    valid #> 3    valid #> 4    valid  # Extract Data dat <- extractData(gads, convertLabels = \"character\")"},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_raw2.html","id":null,"dir":"Reference","previous_headings":"","what":"Import R data frame with a explicit meta data sheet — import_raw2","title":"Import R data frame with a explicit meta data sheet — import_raw2","text":"Function create GADSdat object based dat data.frame labels data.frame.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_raw2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import R data frame with a explicit meta data sheet — import_raw2","text":"","code":"import_raw2(dat, labels)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_raw2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import R data frame with a explicit meta data sheet — import_raw2","text":"dat dat data.frame containing actual data. labels labels data.frame containing meta data.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_raw2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import R data frame with a explicit meta data sheet — import_raw2","text":"Returns GADSdat object.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_raw2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import R data frame with a explicit meta data sheet — import_raw2","text":"GADSdat basically list two elements: dat labels data.frame. elements separated, can cleanly tied together import_raw2. function performs extensive checks integrity resulting GADSdat object. See import_spss import_raw details.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_raw2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import R data frame with a explicit meta data sheet — import_raw2","text":"","code":"dat <- data.frame(ID = 1:5, grade = c(1, 1, 2, 3, 1)) varLabels <- data.frame(varName = c(\"ID\", \"grade\"),                        varLabel = c(\"Person Identifier\", \"School grade Math\"),                        stringsAsFactors = FALSE) valLabels <- data.frame(varName = c(\"grade\", \"grade\", \"grade\"),                        value = c(1, 2, 3),                        valLabel = c(\"very good\", \"good\", \"sufficient\"),                        missings = c(\"valid\", \"valid\", \"valid\"),                        stringsAsFactors = FALSE)  gads <- import_raw(df = dat, varLabels = varLabels, valLabels = valLabels, checkVarNames = FALSE)  # separate the GADSdat object dat <- gads$dat labels <- gads$labels  # rejoin it dat <- import_raw2(dat, labels)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_spss.html","id":null,"dir":"Reference","previous_headings":"","what":"Import SPSS data — import_spss","title":"Import SPSS data — import_spss","text":"Function import .sav files extracting meta information, e.g. variable value labels.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_spss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import SPSS data — import_spss","text":"","code":"import_spss(   filePath,   checkVarNames = TRUE,   labeledStrings = c(\"drop\", \"keep\", \"transform\"),   encoding = NULL )"},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_spss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import SPSS data — import_spss","text":"filePath Source file location, ending .sav. checkVarNames variable names checked violations SQLite R naming rules? labeledStrings strings labeled values allowed? \"drop\" (default), labeled strings dropped NAs occur meta data. \"transform\", underlying values transformed numeric. \"keep\", value labels stay untouched. However, latter possibly corrupts labeled values. encoding character encoding used file. default, NULL, use encoding specified file, sometimes value incorrect useful able override .","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_spss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import SPSS data — import_spss","text":"Returns list actual data dat data frame meta information long format labels.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_spss.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import SPSS data — import_spss","text":"SPSS files (.sav) store variable value labels assign specific formatting variables. import_spss imports data SPSS, storing meta-information separately long format data frame. Value labels missing labels used identify missing values (see checkMissings). Time date variables converted character. special cases, .sav files seem consist mix different encoding types. cases, haven might throw error encoding argument specified UTF-8 selected encoding. circumvent problem recommend using encoding = \"ASCII\" fixing resulting issues manually. example, fixEncoding provides fixes encoding issues specific German language.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_spss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import SPSS data — import_spss","text":"","code":"# Use spss data from within package spss_path <- system.file(\"extdata\", \"pisa.zsav\", package = \"eatGADS\") pisa_gads <- import_spss(spss_path)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_stata.html","id":null,"dir":"Reference","previous_headings":"","what":"Import Stata data — import_stata","title":"Import Stata data — import_stata","text":"Function import .dta files extracting meta information, e.g. variable value labels.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_stata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import Stata data — import_stata","text":"","code":"import_stata(filePath, checkVarNames = TRUE, labeledStrings = FALSE)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_stata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import Stata data — import_stata","text":"filePath Source file location, ending .dta. checkVarNames variable names checked violations SQLite R naming rules? labeledStrings strings labeled values allowed? possibly corrupts labeled values.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_stata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import Stata data — import_stata","text":"Returns list actual data dat data frame meta information long format labels.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_stata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import Stata data — import_stata","text":"Stata files (.dta) store variable value labels assign specific formatting variables. import_stata imports data Stata, storing meta-information separately long format data frame. Time date variables converted character.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Import tibble — import_tibble","title":"Import tibble — import_tibble","text":"Function import tibble extracting meta information, e.g. variable value labels.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import tibble — import_tibble","text":"","code":"import_tibble(   tibble,   checkVarNames = TRUE,   labeledStrings = c(\"drop\", \"keep\", \"transform\") )"},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import tibble — import_tibble","text":"tibble tibble object. checkVarNames variable names checked violations SQLite R naming rules? labeledStrings strings labeled values allowed? \"drop\" (default), labeled strings dropped NAs occur meta data. \"transform\", underlying values transformed numeric. \"keep\", value labels stay untouched. However, latter possibly corrupts labeled values.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import tibble — import_tibble","text":"Returns list actual data dat data frame meta information long format labels.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_tibble.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import tibble — import_tibble","text":"Tibbles may store variable value labels well missing tags via labelled class. import_tibble restructures meta information separately long format data.frame. Value labels missing tags used identify missing tags (see checkMissings). Time date variables converted character.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/import_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import tibble — import_tibble","text":"","code":"# Use spss data from within package spss_path <- system.file(\"extdata\", \"pisa.zsav\", package = \"eatGADS\") pisa_gads <- import_spss(spss_path)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/insertVariable.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorder a single variable in a GADSdat. — insertVariable","title":"Reorder a single variable in a GADSdat. — insertVariable","text":"Deprecated. Please use relocateVariable instead.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/insertVariable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorder a single variable in a GADSdat. — insertVariable","text":"","code":"insertVariable(GADSdat, var, after = NULL)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/insertVariable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reorder a single variable in a GADSdat. — insertVariable","text":"GADSdat GADSdat object. var Character string variable name sorted. Character string variable name var inserted. NULL, var inserted beginning GADSdat.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/inspectDifferences.html","id":null,"dir":"Reference","previous_headings":"","what":"Inspect differences in a variable. — inspectDifferences","title":"Inspect differences in a variable. — inspectDifferences","text":"Inspect differences within single GADSdat two GADSdat objects specific variable.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/inspectDifferences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inspect differences in a variable. — inspectDifferences","text":"","code":"inspectDifferences(   GADSdat,   varName,   other_GADSdat = GADSdat,   other_varName = varName,   id )"},{"path":"https://beckerbenj.github.io/eatGADS/reference/inspectDifferences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inspect differences in a variable. — inspectDifferences","text":"GADSdat GADSdat object. varName character vector length 1 containing variable name. other_GADSdat second GADSdat object. omitted, assumed variables part first GADSdat. other_varName character vector length 1 containing variable name. omitted, assumed variables identical names (supplied varName). id character vector length 1 containing unique identifier column GADSdat.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/inspectDifferences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inspect differences in a variable. — inspectDifferences","text":"list.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/inspectDifferences.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inspect differences in a variable. — inspectDifferences","text":"Two GADSdat objects can compared using equalGADS. differences data specific variables two objects occur, variables can inspected using inspectDifferences. Differences meta data-level can inspected via inspectMetaDifferences.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/inspectDifferences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inspect differences in a variable. — inspectDifferences","text":"","code":"# create a second GADS with different data pisa2 <- pisa pisa2$dat$age[400:nrow(pisa$dat)] <- sample(pisa2$dat$age[400:nrow(pisa$dat)])  # inspect via equalGADS() equalGADS(pisa, pisa2) #> $names_not_in_1 #> character(0) #>  #> $names_not_in_2 #> character(0) #>  #> $data_nrow #> [1] \"all.equal\" #>  #> $data_differences #> [1] \"age\" #>  #> $meta_data_differences #> character(0) #>   # inspect via inspectDifferences() inspectDifferences(GADSdat = pisa, varName = \"age\", other_GADSdat = pisa2, id = \"idstud\") #> $cross_table #>        other_GADSdat #> GADSdat 13.92 14 14.42 14.5 14.58 14.67 14.75 14.83 14.92 15 15.08 15.17 15.25 #>   13.92     1  0     0    0     0     0     0     0     0  0     0     0     0 #>   14        0  1     0    0     0     0     0     0     0  0     0     0     0 #>   14.42     0  0     1    0     0     0     0     0     0  0     0     0     0 #>   14.5      0  0     0    2     0     0     0     0     0  0     0     0     0 #>   14.58     0  0     0    0     8     0     0     0     0  0     0     0     0 #>   14.67     0  0     0    0     0     7     0     0     0  0     0     0     0 #>   14.75     0  0     0    0     0     0    10     0     0  0     0     0     0 #>   14.83     0  0     0    0     0     0     0    11     0  1     0     0     0 #>   14.92     0  0     0    0     0     0     0     0    27  1     0     0     0 #>   15        0  0     0    0     0     0     0     0     0 30     1     1     0 #>   15.08     0  0     0    0     0     0     1     0     0  1    21     0     0 #>   15.17     0  0     0    0     0     0     0     0     0  0     1    32     1 #>   15.25     0  0     0    0     0     0     0     0     0  0     1     0    17 #>   15.33     0  0     0    0     1     0     0     1     1  1     0     1     1 #>   15.42     0  0     0    0     0     0     0     0     0  0     0     0     0 #>   15.5      0  0     0    0     0     0     0     1     0  1     0     1     0 #>   15.58     0  0     0    0     0     0     0     1     1  0     0     1     0 #>   15.67     0  0     0    0     1     0     1     1     0  0     0     0     0 #>   15.75     0  0     0    0     0     0     0     0     1  0     0     0     1 #>   15.83     0  0     0    0     0     0     0     0     1  0     0     1     0 #>   15.92     0  0     0    0     0     0     0     0     0  0     0     0     0 #>   16        0  0     0    0     0     0     0     0     0  0     0     1     0 #>   16.08     0  0     0    0     0     0     0     0     0  0     0     0     0 #>   16.17     0  0     0    0     0     0     0     0     0  0     0     0     0 #>   16.25     0  0     0    0     0     0     1     0     0  0     0     0     0 #>   16.33     0  0     0    0     0     0     0     1     0  1     0     0     2 #>        other_GADSdat #> GADSdat 15.33 15.42 15.5 15.58 15.67 15.75 15.83 15.92 16 16.08 16.17 16.25 #>   13.92     0     0    0     0     0     0     0     0  0     0     0     0 #>   14        0     0    0     0     0     0     0     0  0     0     0     0 #>   14.42     0     0    0     0     0     0     0     0  0     0     0     0 #>   14.5      0     0    0     0     0     0     0     0  0     0     0     0 #>   14.58     0     0    0     1     0     0     0     0  0     0     0     0 #>   14.67     0     0    0     0     0     0     0     0  0     0     0     0 #>   14.75     0     0    0     1     0     1     1     0  0     0     0     0 #>   14.83     0     0    0     0     1     0     1     0  0     0     0     0 #>   14.92     2     0    1     0     0     0     0     0  0     0     0     0 #>   15        0     0    0     1     0     0     0     0  2     0     0     1 #>   15.08     0     0    1     0     0     0     0     0  0     0     0     0 #>   15.17     0     1    1     0     0     1     0     0  0     0     0     0 #>   15.25     1     0    2     1     0     0     0     0  0     0     0     0 #>   15.33    22     0    0     0     0     0     0     1  0     0     0     0 #>   15.42     0    28    0     2     0     0     0     1  0     1     0     1 #>   15.5      0     0   37     0     1     1     0     0  0     0     1     0 #>   15.58     1     1    0    23     2     0     0     0  0     0     0     1 #>   15.67     2     0    1     0    24     0     1     0  0     0     0     0 #>   15.75     1     0    0     0     1    22     1     0  1     0     0     0 #>   15.83     0     2    0     1     0     0    23     0  0     0     0     0 #>   15.92     0     0    0     0     1     0     0    10  0     1     0     0 #>   16        0     0    0     0     0     1     1     0  7     0     0     0 #>   16.08     0     0    0     1     0     0     0     0  0     3     0     0 #>   16.17     0     0    0     0     1     0     0     0  0     0     7     0 #>   16.25     0     1    0     0     0     1     0     0  0     0     0     0 #>   16.33     0     0    0     0     0     1     0     0  0     0     0     0 #>        other_GADSdat #> GADSdat 16.33 #>   13.92     0 #>   14        0 #>   14.42     0 #>   14.5      0 #>   14.58     1 #>   14.67     0 #>   14.75     0 #>   14.83     2 #>   14.92     0 #>   15        0 #>   15.08     0 #>   15.17     1 #>   15.25     0 #>   15.33     0 #>   15.42     0 #>   15.5      0 #>   15.58     0 #>   15.67     0 #>   15.75     0 #>   15.83     0 #>   15.92     0 #>   16        0 #>   16.08     1 #>   16.17     0 #>   16.25     0 #>   16.33    32 #>  #> $unequal_IDs #>  [1] 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 #> [20] 421 422 423 424 425 426 428 429 430 431 432 433 434 435 436 437 438 439 440 #> [39] 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 457 458 459 460 #> [58] 461 462 463 464 465 466 467 468 469 470 471 472 473 474 476 478 479 480 481 #> [77] 482 483 484 486 487 488 490 491 492 493 494 495 496 497 498 500 501 502 #>"},{"path":"https://beckerbenj.github.io/eatGADS/reference/inspectMetaDifferences.html","id":null,"dir":"Reference","previous_headings":"","what":"Inspect meta data differences in a variable. — inspectMetaDifferences","title":"Inspect meta data differences in a variable. — inspectMetaDifferences","text":"Inspect meta data differences within single GADSdat two GADSdat objects GADSdat data bases regarding specific variable.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/inspectMetaDifferences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inspect meta data differences in a variable. — inspectMetaDifferences","text":"","code":"inspectMetaDifferences(   GADSdat,   varName,   other_GADSdat = GADSdat,   other_varName = varName )"},{"path":"https://beckerbenj.github.io/eatGADS/reference/inspectMetaDifferences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inspect meta data differences in a variable. — inspectMetaDifferences","text":"GADSdat GADSdat object. varName character vector length 1 containing variable name. other_GADSdat second GADSdat object. omitted, assumed variables part first GADSdat. other_varName character vector length 1 containing variable name. omitted, assumed variables identical names (supplied varName).","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/inspectMetaDifferences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inspect meta data differences in a variable. — inspectMetaDifferences","text":"list.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/inspectMetaDifferences.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inspect meta data differences in a variable. — inspectMetaDifferences","text":"Two GADSdat objects can compared using equalGADS. meta data differences specific variables two objects occur, variables can inspected using inspectMetaDifferences. data-level differences specific variable, see inspectDifferences.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/inspectMetaDifferences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inspect meta data differences in a variable. — inspectMetaDifferences","text":"","code":"# create a second GADS with different meta data pisa2 <- pisa pisa2 <- changeVarLabels(pisa2, varName = \"sameteach\", varLabel = \"Same math teacher\") pisa2 <- recodeGADS(pisa2, varName = \"sameteach\", oldValues = c(1, 2), newValues = c(0, 1))  # inspect via equalGADS() equalGADS(pisa, pisa2) #> $names_not_in_1 #> character(0) #>  #> $names_not_in_2 #> character(0) #>  #> $data_nrow #> [1] \"all.equal\" #>  #> $data_differences #> [1] \"sameteach\" #>  #> $meta_data_differences #> [1] \"sameteach\" #>   # inspect via inspectMetaDifferences() inspectMetaDifferences(GADSdat = pisa, varName = \"sameteach\", other_GADSdat = pisa2) #> $varDiff #>                         GADSdat_varLabel other_GADSdat_varLabel #> 1 Same math teacher in both school years      Same math teacher #>  #> $valDiff #>   value GADSdat_valLabel GADSdat_missings other_GADSdat_valLabel #> 1     0             <NA>             <NA>                     No #> 2     1               No            valid                    Yes #> 3     2              Yes            valid                   <NA> #>   other_GADSdat_missings #> 1                  valid #> 2                  valid #> 3                   <NA> #>"},{"path":"https://beckerbenj.github.io/eatGADS/reference/labelsGADS.html","id":null,"dir":"Reference","previous_headings":"","what":"Labels from relational eatGADS data base. — labelsGADS","title":"Labels from relational eatGADS data base. — labelsGADS","text":"Returns variable value labels variables eatGADS data base.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/labelsGADS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Labels from relational eatGADS data base. — labelsGADS","text":"","code":"labelsGADS(filePath)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/labelsGADS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Labels from relational eatGADS data base. — labelsGADS","text":"filePath Path existing eatGADS data base.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/labelsGADS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Labels from relational eatGADS data base. — labelsGADS","text":"Returns long format data frame including variable names, labels, values, value labels missing labels.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/labelsGADS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Labels from relational eatGADS data base. — labelsGADS","text":"Variable, value missing labels stored original SPSS-files factors R files converted long format storage data base. labelsGADS returns long format data frame.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/labelsGADS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Labels from relational eatGADS data base. — labelsGADS","text":"","code":"# Extract Meta data from data base db_path <- system.file(\"extdata\", \"pisa.db\", package = \"eatGADS\") metaData <- labelsGADS(db_path)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/matchValues_varLabels.html","id":null,"dir":"Reference","previous_headings":"","what":"Match regular expressions and variable names. — matchValues_varLabels","title":"Match regular expressions and variable names. — matchValues_varLabels","text":"Using variable labels, matchValues_varLabels matches vector regular expressions set variable names.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/matchValues_varLabels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match regular expressions and variable names. — matchValues_varLabels","text":"","code":"matchValues_varLabels(GADSdat, mc_vars, values, label_by_hand = character(0))"},{"path":"https://beckerbenj.github.io/eatGADS/reference/matchValues_varLabels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match regular expressions and variable names. — matchValues_varLabels","text":"GADSdat GADSdat object. mc_vars vector containing names variables, matched according variable labels. values character vector containing regular expressions varLabel column searched. label_by_hand Additional value - mc_var pairs. Necessary, mc_vars value exists.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/matchValues_varLabels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match regular expressions and variable names. — matchValues_varLabels","text":"Returns named character vector. Values vector variable names GADSdat, names vector regular expressions.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/matchValues_varLabels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Match regular expressions and variable names. — matchValues_varLabels","text":"Multiple choice items can stored multiple dichotomous variables information variable stored variable labels. function collapseMultiMC_Text can used collapse dichotomous variables character variable, requires character vector variables names multiple choice variables. matchValues_varLabels creates vector based matching regular expressions (values) variable labels. Note variables mc_vars assigned exactly one value (vice versa). variable name missing output, error thrown. case, label_by_hand argument used specify regular expression variable name pair manually.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/matchValues_varLabels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Match regular expressions and variable names. — matchValues_varLabels","text":"","code":"# Prepare example data mt2 <- data.frame(ID = 1:4, mc1 = c(1, 0, 0, 0), mc2 = c(0, 0, 0, 0), mc3 = c(0, 1, 1, 0),                   text1 = c(NA, \"Eng\", \"Aus\", \"Aus2\"), text2 = c(NA, \"Franz\", NA, NA),                   stringsAsFactors = FALSE)  mt2_gads <- import_DF(mt2)  mt3_gads <- changeVarLabels(mt2_gads, varName = c(\"mc1\", \"mc2\", \"mc3\"),                            varLabel = c(\"Lang: Eng\", \"Aus spoken\", \"other\"))  out <- matchValues_varLabels(mt3_gads, mc_vars = c(\"mc1\", \"mc2\", \"mc3\"),                             values = c(\"Aus\", \"Eng\", \"Eng\"),                             label_by_hand = c(\"other\" = \"mc3\"))"},{"path":"https://beckerbenj.github.io/eatGADS/reference/merge.GADSdat.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge two GADSdat objects into a single GADSdat object. — merge.GADSdat","title":"Merge two GADSdat objects into a single GADSdat object. — merge.GADSdat","text":"secure way merge data meta data two GADSdat objects. Currently, limited merging options supported.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/merge.GADSdat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge two GADSdat objects into a single GADSdat object. — merge.GADSdat","text":"","code":"# S3 method for class 'GADSdat' merge(   x,   y,   by,   all = TRUE,   all.x = all,   all.y = all,   missingValue = NULL,   missingValLabel = NULL,   ... )"},{"path":"https://beckerbenj.github.io/eatGADS/reference/merge.GADSdat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge two GADSdat objects into a single GADSdat object. — merge.GADSdat","text":"x GADSdat object imported via eatGADS. y GADSdat object imported via eatGADS. character vector. character vector (either full join inner join). .x See merge. .y See merge. missingValue numeric value used replace missing values introduced merge. missingValLabel value label assigned variables missingValue inserted. ... arguments currently supported included R CMD checks.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/merge.GADSdat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge two GADSdat objects into a single GADSdat object. — merge.GADSdat","text":"Returns GADSdat object.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/merge.GADSdat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Merge two GADSdat objects into a single GADSdat object. — merge.GADSdat","text":"duplicate variables (except variables specified argument), variables removed y. meta data joined remaining variables via rbind. function supports automatically recoding missing values created merging designated missing code (missingValue) value label (missingValLabel).","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/mergeLabels.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare data and metadata — mergeLabels","title":"Prepare data and metadata — mergeLabels","text":"Transform multiple GADSdat objects list ready data base creation.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/mergeLabels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare data and metadata — mergeLabels","text":"","code":"mergeLabels(...)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/mergeLabels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare data and metadata — mergeLabels","text":"... GADSdat objects, named arguments correct merge order.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/mergeLabels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare data and metadata — mergeLabels","text":"Returns all_GADSdat object, consists list list data frames \"datList\" single data frame containing meta data information \"allLabels\".","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/mergeLabels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare data and metadata — mergeLabels","text":"function createGADS takes multiple GADSdat objects input. function preserves ordering objects supplied, used merging order createGADS. Additionally, separate lists meta information GADSdat merged data frame unique identifier added.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/mergeLabels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare data and metadata — mergeLabels","text":"","code":"# see createGADS vignette"},{"path":"https://beckerbenj.github.io/eatGADS/reference/miss2NA.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode Missings to NA — miss2NA","title":"Recode Missings to NA — miss2NA","text":"Recode Missings NA according missing labels label data.frame.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/miss2NA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode Missings to NA — miss2NA","text":"","code":"miss2NA(GADSdat)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/miss2NA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode Missings to NA — miss2NA","text":"GADSdat GADSdat object.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/miss2NA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recode Missings to NA — miss2NA","text":"Returns data.frame NA instead missing codes.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/miss2NA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recode Missings to NA — miss2NA","text":"Missings imported values via import_spss. Using value labels labels data.frame, miss2NA recodes missings codes NA. function mainly intended internal use.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/multiChar2fac.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform one or multiple character variables to factor. — multiChar2fac","title":"Transform one or multiple character variables to factor. — multiChar2fac","text":"Convert one multiple character variables factors. multiple variables converted, common set value labels created,  identical across variables. Existing value labels preserved.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/multiChar2fac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform one or multiple character variables to factor. — multiChar2fac","text":"","code":"multiChar2fac(   GADSdat,   vars,   var_suffix = \"_r\",   label_suffix = \"(recoded)\",   convertCases = NULL )"},{"path":"https://beckerbenj.github.io/eatGADS/reference/multiChar2fac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform one or multiple character variables to factor. — multiChar2fac","text":"GADSdat data.frame GADSdat object. vars character vector variables transformed factor. var_suffix Variable suffix newly created GADSdat. empty character, existing variables overwritten. label_suffix Suffix added variable label newly created variable GADSdat. convertCases cases transformed variables? Default NULL leaves cases . Available options converting cases lower case ('lower'), upper case ('upper'), first letter upper case, everything else lower case ('upperFirst').","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/multiChar2fac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform one or multiple character variables to factor. — multiChar2fac","text":"Returns GADSdat containing newly computed variable.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/multiChar2fac.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform one or multiple character variables to factor. — multiChar2fac","text":"set variables possible values, desirable variables share value labels, even values occur individual variables. function allows transformation multiple character variables factors assimilating value labels. SPSS format newly created variables set F10.0. current limitation function prior conversion, variables specified vars must identical meta data value level (value labels missing tags). necessary, missing codes can set transformation via checkMissings setting missing codes depending value labels variables changeMissings setting missing codes specific values specific variable. argument convertCases uses function convertCase internally. See respective documentation details.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/multiChar2fac.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform one or multiple character variables to factor. — multiChar2fac","text":"","code":"## create an example GADSdat example_df <- data.frame(ID = 1:4,                         citizenship1 = c(\"German\", \"English\", \"missing by design\", \"Chinese\"),                         citizenship2 = c(\"missing\", \"German\", \"missing by design\", \"Polish\"),                         stringsAsFactors = FALSE) gads <- import_DF(example_df)  ## transform one character variable gads2 <- multiChar2fac(gads, vars = \"citizenship1\")  ## transform multiple character variables gads2 <- multiChar2fac(gads, vars = c(\"citizenship1\", \"citizenship2\"))  ## set values to missings gads3 <- checkMissings(gads2, missingLabel = \"missing\") #> The following variables have value labels including the term 'missing' which are not coded as missing: #> citizenship1_r, citizenship2_r #> 'miss' is inserted into column missings for 4 rows."},{"path":"https://beckerbenj.github.io/eatGADS/reference/namesGADS.html","id":null,"dir":"Reference","previous_headings":"","what":"Variables names of a GADS. — namesGADS","title":"Variables names of a GADS. — namesGADS","text":"Variables names GADSdat object, all_GADSdat object eatGADS data base.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/namesGADS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variables names of a GADS. — namesGADS","text":"","code":"namesGADS(GADS)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/namesGADS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variables names of a GADS. — namesGADS","text":"GADS GADSdat object, all_GADSdat path existing eatGADS data base.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/namesGADS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variables names of a GADS. — namesGADS","text":"Returns character vector named list character vectors.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/namesGADS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Variables names of a GADS. — namesGADS","text":"function applied GADSdat object, character vector variable names returned. function applied all_GADSdat object path eatGADS data base, named list returned. list entry represents data table object.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/namesGADS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variables names of a GADS. — namesGADS","text":"","code":"# Extract variable names from data base db_path <- system.file(\"extdata\", \"pisa.db\", package = \"eatGADS\") namesGADS(db_path) #> $noImp #>   [1] \"idstud\"       \"idschool\"     \"idclass\"      \"schtype\"      \"sameteach\"    #>   [6] \"g8g9\"         \"ganztag\"      \"classsize\"    \"repeated\"     \"gender\"       #>  [11] \"age\"          \"language\"     \"migration\"    \"hisced\"       \"hisei\"        #>  [16] \"homepos\"      \"books\"        \"pared\"        \"computer_age\" \"internet_age\" #>  [21] \"int_use_a\"    \"int_use_b\"    \"truancy_a\"    \"truancy_b\"    \"truancy_c\"    #>  [26] \"int_a\"        \"int_b\"        \"int_c\"        \"int_d\"        \"instmot_a\"    #>  [31] \"instmot_b\"    \"instmot_c\"    \"instmot_d\"    \"norms_a\"      \"norms_b\"      #>  [36] \"norms_c\"      \"norms_d\"      \"norms_e\"      \"norms_f\"      \"anxiety_a\"    #>  [41] \"anxiety_b\"    \"anxiety_c\"    \"anxiety_d\"    \"anxiety_e\"    \"selfcon_a\"    #>  [46] \"selfcon_b\"    \"selfcon_c\"    \"selfcon_d\"    \"selfcon_e\"    \"worketh_a\"    #>  [51] \"worketh_b\"    \"worketh_c\"    \"worketh_d\"    \"worketh_e\"    \"worketh_f\"    #>  [56] \"worketh_g\"    \"worketh_h\"    \"worketh_i\"    \"intent_a\"     \"intent_b\"     #>  [61] \"intent_c\"     \"intent_d\"     \"intent_e\"     \"behav_a\"      \"behav_b\"      #>  [66] \"behav_c\"      \"behav_d\"      \"behav_e\"      \"behav_f\"      \"behav_g\"      #>  [71] \"behav_h\"      \"teach_a\"      \"teach_b\"      \"teach_c\"      \"teach_d\"      #>  [76] \"teach_e\"      \"cognact_a\"    \"cognact_b\"    \"cognact_c\"    \"cognact_d\"    #>  [81] \"cognact_e\"    \"cognact_f\"    \"cognact_g\"    \"cognact_h\"    \"cognact_i\"    #>  [86] \"discpline_a\"  \"discpline_b\"  \"discpline_c\"  \"discpline_d\"  \"discpline_e\"  #>  [91] \"relation_a\"   \"relation_b\"   \"relation_c\"   \"relation_d\"   \"relation_e\"   #>  [96] \"belong_a\"     \"belong_b\"     \"belong_c\"     \"belong_d\"     \"belong_e\"     #> [101] \"belong_f\"     \"belong_g\"     \"belong_h\"     \"belong_i\"     \"attitud_a\"    #> [106] \"attitud_b\"    \"attitud_c\"    \"attitud_d\"    \"attitud_e\"    \"attitud_f\"    #> [111] \"attitud_g\"    \"attitud_h\"    \"grade_de\"     \"grade_ma\"     \"grade_bio\"    #> [116] \"grade_che\"    \"grade_phy\"    \"grade_sci\"    #>  #> $PVs #> [1] \"idstud\"    \"dimension\" \"imp\"       \"value\"     #>   # Extract variable names  from loaded/imported GADS namesGADS(pisa) #>   [1] \"idstud\"       \"idschool\"     \"idclass\"      \"schtype\"      \"sameteach\"    #>   [6] \"g8g9\"         \"ganztag\"      \"classsize\"    \"repeated\"     \"gender\"       #>  [11] \"age\"          \"language\"     \"migration\"    \"hisced\"       \"hisei\"        #>  [16] \"homepos\"      \"books\"        \"pared\"        \"computer_age\" \"internet_age\" #>  [21] \"int_use_a\"    \"int_use_b\"    \"truancy_a\"    \"truancy_b\"    \"truancy_c\"    #>  [26] \"int_a\"        \"int_b\"        \"int_c\"        \"int_d\"        \"instmot_a\"    #>  [31] \"instmot_b\"    \"instmot_c\"    \"instmot_d\"    \"norms_a\"      \"norms_b\"      #>  [36] \"norms_c\"      \"norms_d\"      \"norms_e\"      \"norms_f\"      \"anxiety_a\"    #>  [41] \"anxiety_b\"    \"anxiety_c\"    \"anxiety_d\"    \"anxiety_e\"    \"selfcon_a\"    #>  [46] \"selfcon_b\"    \"selfcon_c\"    \"selfcon_d\"    \"selfcon_e\"    \"worketh_a\"    #>  [51] \"worketh_b\"    \"worketh_c\"    \"worketh_d\"    \"worketh_e\"    \"worketh_f\"    #>  [56] \"worketh_g\"    \"worketh_h\"    \"worketh_i\"    \"intent_a\"     \"intent_b\"     #>  [61] \"intent_c\"     \"intent_d\"     \"intent_e\"     \"behav_a\"      \"behav_b\"      #>  [66] \"behav_c\"      \"behav_d\"      \"behav_e\"      \"behav_f\"      \"behav_g\"      #>  [71] \"behav_h\"      \"teach_a\"      \"teach_b\"      \"teach_c\"      \"teach_d\"      #>  [76] \"teach_e\"      \"cognact_a\"    \"cognact_b\"    \"cognact_c\"    \"cognact_d\"    #>  [81] \"cognact_e\"    \"cognact_f\"    \"cognact_g\"    \"cognact_h\"    \"cognact_i\"    #>  [86] \"discpline_a\"  \"discpline_b\"  \"discpline_c\"  \"discpline_d\"  \"discpline_e\"  #>  [91] \"relation_a\"   \"relation_b\"   \"relation_c\"   \"relation_d\"   \"relation_e\"   #>  [96] \"belong_a\"     \"belong_b\"     \"belong_c\"     \"belong_d\"     \"belong_e\"     #> [101] \"belong_f\"     \"belong_g\"     \"belong_h\"     \"belong_i\"     \"attitud_a\"    #> [106] \"attitud_b\"    \"attitud_c\"    \"attitud_d\"    \"attitud_e\"    \"attitud_f\"    #> [111] \"attitud_g\"    \"attitud_h\"    \"grade_de\"     \"grade_ma\"     \"grade_bio\"    #> [116] \"grade_che\"    \"grade_phy\"    \"grade_sci\"    \"ma_pv1\"       \"ma_pv2\"       #> [121] \"ma_pv3\"       \"ma_pv4\"       \"ma_pv5\"       \"rea_pv1\"      \"rea_pv2\"      #> [126] \"rea_pv3\"      \"rea_pv4\"      \"rea_pv5\"      \"sci_pv1\"      \"sci_pv2\"      #> [131] \"sci_pv3\"      \"sci_pv4\"      \"sci_pv5\""},{"path":"https://beckerbenj.github.io/eatGADS/reference/orderLike.html","id":null,"dir":"Reference","previous_headings":"","what":"Order the variables in a GADSdat. — orderLike","title":"Order the variables in a GADSdat. — orderLike","text":"Order variables GADSdat according character vector. discrepancies two sets, warning issued.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/orderLike.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Order the variables in a GADSdat. — orderLike","text":"","code":"orderLike(GADSdat, newOrder)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/orderLike.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Order the variables in a GADSdat. — orderLike","text":"GADSdat GADSdat object. newOrder character vector containing order variables.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/orderLike.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Order the variables in a GADSdat. — orderLike","text":"Returns GADSdat object.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/orderLike.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Order the variables in a GADSdat. — orderLike","text":"variables dat labels section ordered. Variables contained character vector moved end data.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/pisa.html","id":null,"dir":"Reference","previous_headings":"","what":"PISA Plus Example Data — pisa","title":"PISA Plus Example Data — pisa","text":"small example data set German PISA Plus campus files distributed Forschungsdatenzentrum, IQB.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/pisa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PISA Plus Example Data — pisa","text":"","code":"pisa"},{"path":"https://beckerbenj.github.io/eatGADS/reference/pisa.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"PISA Plus Example Data — pisa","text":"data.frame 500 rows 133 variables, including: idstud Person ID variable idschool School ID variable schtype School type ...","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/pisa.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"PISA Plus Example Data — pisa","text":"Research Data Center Institute Educational Quality Improvement (2020). Programme International Student Assessment - Plus 2012, 2013 (PISA Plus 2012-2013) - Campus File (Version 1) [Data set]. Berlin: Institute Educational Quality Improvement. doi:10.5159/IQB_PISA_Plus_2012-13_CF_v1","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/recode2NA.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode values to NA. — recode2NA","title":"Recode values to NA. — recode2NA","text":"Recode multiple values multiple variables GADSdat NA.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/recode2NA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode values to NA. — recode2NA","text":"","code":"recode2NA(GADSdat, recodeVars = namesGADS(GADSdat), value = \"\")"},{"path":"https://beckerbenj.github.io/eatGADS/reference/recode2NA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode values to NA. — recode2NA","text":"GADSdat GADSdat object. recodeVars Character vector variable names recoded. value values recoded NA?","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/recode2NA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recode values to NA. — recode2NA","text":"Returns recoded GADSdat.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/recode2NA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recode values to NA. — recode2NA","text":"value labels given specified value, warning issued. Number recodes per variable reported. data set imported .sav, character variables frequently contain empty strings. Especially parts data written .xlsx, can cause problems (e.g. look tables createLookup), function write .xlsx convert empty strings NAs. recodeString2NA can used recode empty strings NA beforehand.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/recode2NA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recode values to NA. — recode2NA","text":"","code":"# create example GADS dat <- data.frame(ID = 1:4, var1 = c(\"\", \"Eng\", \"Aus\", \"Aus2\"),                   var2 = c(\"\", \"French\", \"Ger\", \"Ita\"),                   stringsAsFactors = FALSE) gads <- import_DF(dat)  # recode empty strings gads2 <- recode2NA(gads) #> Recodes in variable ID: 0 #> Recodes in variable var1: 1 #> Recodes in variable var2: 1  # recode numeric value gads3 <- recode2NA(gads, recodeVars = \"ID\", value = 1:3) #> Recodes in variable ID: 3"},{"path":"https://beckerbenj.github.io/eatGADS/reference/recodeGADS.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode variables. — recodeGADS","title":"Recode variables. — recodeGADS","text":"Recode one multiple variables part GADSdat all_GADSdat object.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/recodeGADS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode variables. — recodeGADS","text":"","code":"recodeGADS(   GADSdat,   varName,   oldValues,   newValues,   existingMeta = c(\"stop\", \"value\", \"value_new\", \"drop\", \"ignore\") )"},{"path":"https://beckerbenj.github.io/eatGADS/reference/recodeGADS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode variables. — recodeGADS","text":"GADSdat GADSdat object imported via eatGADS. varName Name variable recoded. oldValues Vector containing old values. newValues Vector containing new values (respective order oldValues). existingMeta values recoded, meta data used (see details)?","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/recodeGADS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recode variables. — recodeGADS","text":"Returns GADSdat.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/recodeGADS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recode variables. — recodeGADS","text":"Applied GADSdat all_GADSdat object, function wrapper getChangeMeta applyChangeMeta. Beyond , unlabeled variables values recoded well. oldValues newValues matched ordering function call. changes performed value levels, recoding existing values can occur. cases, existingMeta determines resulting meta data conflicts handled, either raising error occur (\"stop\"), keeping original meta data value (\"value\"), using meta data changeTable , incomplete, recoded value (\"value_new\"), leaving respective meta data untouched (\"ignore\"). Furthermore, one might recode multiple old values new value. currently possible existingMeta = \"drop\", drops related meta data value level, existingMeta = \"ignore\", leaves related meta data value level untouched. Missing values (NA) supported oldValues newValues. recoding values NA see recode2NA instead. recoding character variables, using lookup tables via createLookup recommended. changing value labels see changeValLabels.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/recodeGADS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recode variables. — recodeGADS","text":"","code":"# Example gads example_df <- data.frame(ID = 1:5, color = c(\"blue\", \"blue\", \"green\", \"other\", \"other\"),                         animal = c(\"dog\", \"Dog\", \"cat\", \"hors\", \"horse\"),                         age = c(NA, 16, 15, 23, 50),                         stringsAsFactors = FALSE) example_df$animal <- as.factor(example_df$animal) gads <- import_DF(example_df)  # simple recode gads2 <- recodeGADS(gads, varName = \"animal\",                    oldValues = c(3, 4), newValues = c(7, 8))"},{"path":"https://beckerbenj.github.io/eatGADS/reference/recodeNA2missing.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode NAs to Missing. — recodeNA2missing","title":"Recode NAs to Missing. — recodeNA2missing","text":"Recode NAs multiple variables GADSdat numeric value value label missing tag.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/recodeNA2missing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode NAs to Missing. — recodeNA2missing","text":"","code":"recodeNA2missing(   GADSdat,   recodeVars = namesGADS(GADSdat),   value = -99,   valLabel = \"missing\" )"},{"path":"https://beckerbenj.github.io/eatGADS/reference/recodeNA2missing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode NAs to Missing. — recodeNA2missing","text":"GADSdat GADSdat object. recodeVars Character vector variable names recoded. value value NAs recoded ? valLabel value label value assigned?","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/recodeNA2missing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recode NAs to Missing. — recodeNA2missing","text":"Returns recoded GADSdat.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/recodeNA2missing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recode NAs to Missing. — recodeNA2missing","text":"value label missing tag added variables contain NAs recoded. variable existing value label value, existing value label overwritten missing tag added. corresponding warning issued.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/recodeNA2missing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recode NAs to Missing. — recodeNA2missing","text":"","code":"# create example GADS dat <- data.frame(ID = 1:4, age = c(NA, 18, 21, 23),                   siblings = c(0, 2, NA, NA)) gads <- import_DF(dat)  # recode NAs gads2 <- recodeNA2missing(gads)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/recodeString2NA.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode a string to NA. — recodeString2NA","title":"Recode a string to NA. — recodeString2NA","text":"Deprecated, use recode2NA instead..","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/recodeString2NA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode a string to NA. — recodeString2NA","text":"","code":"recodeString2NA(GADSdat, recodeVars = namesGADS(GADSdat), string = \"\")"},{"path":"https://beckerbenj.github.io/eatGADS/reference/recodeString2NA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode a string to NA. — recodeString2NA","text":"GADSdat GADSdat object. recodeVars Character vector variable names recoded. string string recoded NA?","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/recodeString2NA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recode a string to NA. — recodeString2NA","text":"Returns recoded GADSdat.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/relocateVariable.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorder a single variable in a GADSdat. — relocateVariable","title":"Reorder a single variable in a GADSdat. — relocateVariable","text":"Reorder single variable GADSdat. variable (var) can inserted right another variable () beginning GADSdat via = NULL.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/relocateVariable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorder a single variable in a GADSdat. — relocateVariable","text":"","code":"relocateVariable(GADSdat, var, after = NULL)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/relocateVariable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reorder a single variable in a GADSdat. — relocateVariable","text":"GADSdat GADSdat object. var Character string variable name sorted. Character string variable name var inserted. NULL, var inserted beginning GADSdat.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/relocateVariable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reorder a single variable in a GADSdat. — relocateVariable","text":"Returns GADSdat object.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/relocateVariable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reorder a single variable in a GADSdat. — relocateVariable","text":"variables dat labels section ordered. reordering whole GADSdat, see orderLike.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/relocateVariable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reorder a single variable in a GADSdat. — relocateVariable","text":"","code":"# Insert variable 'migration' after variable 'idclass' pisa2 <- relocateVariable(pisa, var = \"migration\", after = \"idclass\")  # Insert variable 'idclass' at the beginning of the data set pisa2 <- relocateVariable(pisa, var = \"idclass\", after = NULL)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/remove2NAchar.html","id":null,"dir":"Reference","previous_headings":"","what":"Shorten multiple text variables while giving NA codes. — remove2NAchar","title":"Shorten multiple text variables while giving NA codes. — remove2NAchar","text":"Shorten text variables certain number coding overflowing answers complete missings.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/remove2NAchar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shorten multiple text variables while giving NA codes. — remove2NAchar","text":"","code":"remove2NAchar(GADSdat, vars, max_num = 2, na_value, na_label)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/remove2NAchar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shorten multiple text variables while giving NA codes. — remove2NAchar","text":"GADSdat GADSdat object. vars character vector names text variables. max_num Maximum number text variables. Additional text variables removed NA codes given accordingly. na_value NA value given cases many values text variables. na_label value label given na_value.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/remove2NAchar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shorten multiple text variables while giving NA codes. — remove2NAchar","text":"Returns modified GADSdat.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/remove2NAchar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shorten multiple text variables while giving NA codes. — remove2NAchar","text":"cases, multiple text variables contain information one variable (e.g. multiple answers open item). case, sometimes number text variables displaying variable limited. remove2NAchar allows shortening multiple character variables, means character variables max_num removed GADSdat. Cases, valid responses removed variables coded missings (using na_value na_label).","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/remove2NAchar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shorten multiple text variables while giving NA codes. — remove2NAchar","text":"","code":"## create an example GADSdat example_df <- data.frame(ID = 1:4,                         citizenship1 = c(\"German\", \"English\", \"missing by design\", \"Chinese\"),                         citizenship2 = c(NA, \"German\", \"missing by design\", \"Polish\"),                         citizenship3 = c(NA, NA, NA, \"German\"),                         stringsAsFactors = FALSE) gads <- import_DF(example_df)  ## shorten character variables gads2 <- remove2NAchar(gads, vars = c(\"citizenship1\", \"citizenship2\", \"citizenship3\"),                       na_value = -99, na_label = \"missing: too many answers\") #> Removing the following rows from meta data: citizenship3 #> No rows added to meta data."},{"path":"https://beckerbenj.github.io/eatGADS/reference/removeEmptyValLabels.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove unused value labels and missing tags. — removeEmptyValLabels","title":"Remove unused value labels and missing tags. — removeEmptyValLabels","text":"Remove unused value labels missing tags variable part GADSdat object.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/removeEmptyValLabels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove unused value labels and missing tags. — removeEmptyValLabels","text":"","code":"removeEmptyValLabels(GADSdat, vars, whichValLabels = c(\"miss\", \"valid\", \"all\"))"},{"path":"https://beckerbenj.github.io/eatGADS/reference/removeEmptyValLabels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove unused value labels and missing tags. — removeEmptyValLabels","text":"GADSdat GADSdat object imported via eatGADS. vars Character string variable names. whichValLabels unused missing value tags labels (\"miss\"), unused value labels non-missing values (\"valid\"), (\"\") removed?","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/removeEmptyValLabels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove unused value labels and missing tags. — removeEmptyValLabels","text":"Returns GADSdat object changed meta data.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/removeEmptyValLabels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove unused value labels and missing tags. — removeEmptyValLabels","text":"","code":"gads <- import_DF(data.frame(v1 = 1)) gads <- changeMissings(gads, varName = \"v1\", value = c(-99, -98), missings = c(\"miss\", \"miss\")) gads <- changeValLabels(gads, varName = \"v1\", value = c(-99), valLabel = c(\"not reached\"))  gads2 <- removeEmptyValLabels(gads, vars = \"v1\")"},{"path":"https://beckerbenj.github.io/eatGADS/reference/removeValLabels.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove value labels and missing tags. — removeValLabels","title":"Remove value labels and missing tags. — removeValLabels","text":"Remove meta data specific values (value) single variable (varName). includes value labels missings tags.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/removeValLabels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove value labels and missing tags. — removeValLabels","text":"","code":"removeValLabels(GADSdat, varName, value, valLabel = NULL)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/removeValLabels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove value labels and missing tags. — removeValLabels","text":"GADSdat GADSdat object imported via eatGADS. varName Character string variable name. value Numeric values. valLabel [optional] Regular expressions value labels corresponding value.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/removeValLabels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove value labels and missing tags. — removeValLabels","text":"Returns GADSdat object changed meta data.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/removeValLabels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove value labels and missing tags. — removeValLabels","text":"argument valLabel provided function checks value valLabel pairs meta data match arguments.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/removeValLabels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove value labels and missing tags. — removeValLabels","text":"","code":"# Remove a label based on value extractMeta(pisa, \"schtype\") #>   varName     varLabel format display_width labeled value #> 5 schtype School track   F8.0            NA     yes     1 #> 6 schtype School track   F8.0            NA     yes     2 #> 7 schtype School track   F8.0            NA     yes     3 #>                                    valLabel missings #> 5                Gymnasium (academic track)    valid #> 6                                Realschule    valid #> 7 schools with several courses of education    valid pisa2 <- removeValLabels(pisa, varName = \"schtype\", value = 1) extractMeta(pisa2, \"schtype\") #>   varName     varLabel format display_width labeled value #> 6 schtype School track   F8.0            NA     yes     2 #> 7 schtype School track   F8.0            NA     yes     3 #>                                    valLabel missings #> 6                                Realschule    valid #> 7 schools with several courses of education    valid  # Remove multiple labels based on value extractMeta(pisa, \"schtype\") #>   varName     varLabel format display_width labeled value #> 5 schtype School track   F8.0            NA     yes     1 #> 6 schtype School track   F8.0            NA     yes     2 #> 7 schtype School track   F8.0            NA     yes     3 #>                                    valLabel missings #> 5                Gymnasium (academic track)    valid #> 6                                Realschule    valid #> 7 schools with several courses of education    valid pisa3 <- removeValLabels(pisa, varName = \"schtype\", value = 1:3) extractMeta(pisa3, \"schtype\") #>   varName     varLabel format display_width labeled value valLabel missings #> 5 schtype School track   F8.0            NA      no    NA     <NA>     <NA>  # Remove multiple labels based on value - valLabel combination extractMeta(pisa, \"schtype\") #>   varName     varLabel format display_width labeled value #> 5 schtype School track   F8.0            NA     yes     1 #> 6 schtype School track   F8.0            NA     yes     2 #> 7 schtype School track   F8.0            NA     yes     3 #>                                    valLabel missings #> 5                Gymnasium (academic track)    valid #> 6                                Realschule    valid #> 7 schools with several courses of education    valid pisa4 <- removeValLabels(pisa, varName = \"schtype\",                         value = 1:3, valLabel = c(\"Gymnasium\", \"other\", \"several courses\")) extractMeta(pisa4, \"schtype\") #>   varName     varLabel format display_width labeled value   valLabel missings #> 6 schtype School track   F8.0            NA     yes     2 Realschule    valid"},{"path":"https://beckerbenj.github.io/eatGADS/reference/reuseMeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Use meta data for variables from another GADSdat. — reuseMeta","title":"Use meta data for variables from another GADSdat. — reuseMeta","text":"Transfer meta information one GADSdat another one multiple variables.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/reuseMeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use meta data for variables from another GADSdat. — reuseMeta","text":"","code":"reuseMeta(   GADSdat,   varName,   other_GADSdat,   other_varName = NULL,   missingLabels = NULL,   addValueLabels = FALSE )"},{"path":"https://beckerbenj.github.io/eatGADS/reference/reuseMeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use meta data for variables from another GADSdat. — reuseMeta","text":"GADSdat GADSdat object imported via eatGADS. varName Character vector names variables get new meta data. other_GADSdat GADSdat object imported via eatGADS including desired meta information. Can either GADSdat, eatGADS data base all_GADSdat object. other_varName Character vector names variables other_GADSdat contain meta data copied. missingLabels meta data missing values treated? NULL, missing values transferred labels. \"drop\", missing labels dropped (useful imputed data). \"leave\", missing labels remain untouched. \"\", valid value labels dropped. addValueLabels value labels added meta information retained?","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/reuseMeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use meta data for variables from another GADSdat. — reuseMeta","text":"Returns original object updated meta data.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/reuseMeta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use meta data for variables from another GADSdat. — reuseMeta","text":"Transfer meta information can mean substituting complete meta information, adding value labels, adding \"valid\" adding \"miss\" missing labels. See arguments missingLabels addValueLabels details.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/reuseMeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use meta data for variables from another GADSdat. — reuseMeta","text":"","code":"# see createGADS vignette"},{"path":"https://beckerbenj.github.io/eatGADS/reference/splitGADS.html","id":null,"dir":"Reference","previous_headings":"","what":"Split GADSdat into hierarchy levels. — splitGADS","title":"Split GADSdat into hierarchy levels. — splitGADS","text":"Split GADSdat multiple, specified hierarchical levels.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/splitGADS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split GADSdat into hierarchy levels. — splitGADS","text":"","code":"splitGADS(GADSdat, nameList)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/splitGADS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split GADSdat into hierarchy levels. — splitGADS","text":"GADSdat GADSdat object. nameList list character vectors. names list correspond hierarchy levels.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/splitGADS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split GADSdat into hierarchy levels. — splitGADS","text":"Returns all_GADSdat object, consists list list data frames \"datList\" single data frame containing meta data information \"allLabels\". details see also mergeLabels.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/splitGADS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Split GADSdat into hierarchy levels. — splitGADS","text":"function takes GADSdat object splits desired hierarchical levels (all_GADSdat object). Hierarchy level variable also accessible meta data via column data_table. variable names included nameList, missing variables dropped.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/splitGADS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split GADSdat into hierarchy levels. — splitGADS","text":"","code":"# see createGADS vignette"},{"path":"https://beckerbenj.github.io/eatGADS/reference/stringAsNumeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform string to numeric. — stringAsNumeric","title":"Transform string to numeric. — stringAsNumeric","text":"Transform string variable within GADSdat all_GADSdat object numeric variable.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/stringAsNumeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform string to numeric. — stringAsNumeric","text":"","code":"stringAsNumeric(GADSdat, varName)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/stringAsNumeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform string to numeric. — stringAsNumeric","text":"GADSdat GADSdat object imported via eatGADS. varName Character string variable name.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/stringAsNumeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform string to numeric. — stringAsNumeric","text":"Returns GADSdat object changed variable.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/stringAsNumeric.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform string to numeric. — stringAsNumeric","text":"Applied GADSdat all_GADSdat object, function uses asNumericIfPossible change variable class changes format column meta data.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/subImputations.html","id":null,"dir":"Reference","previous_headings":"","what":"Substitute imputed values. — subImputations","title":"Substitute imputed values. — subImputations","text":"Substitute imputed values imputed GADSdat_imp object original, imputed values GADSdat.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/subImputations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Substitute imputed values. — subImputations","text":"","code":"subImputations(GADSdat, GADSdat_imp, varName, varName_imp = varName, id, imp)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/subImputations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substitute imputed values. — subImputations","text":"GADSdat GADSdat object. GADSdat_imp GADSdat object. varName character vector length 1 containing variable name GADSdat. varName_imp character vector length 1 containing variable name GADSdat_imp. id character vector length 1 containing unique identifier column GADSdat. imp character vector length 1 containing imputation number GADSdat_imp.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/subImputations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Substitute imputed values. — subImputations","text":"modified GADSdat_imp..","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/subImputations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Substitute imputed values. — subImputations","text":"two cases values substituted: () missings varName_imp, (b) values imputed even though valid information varName.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/subImputations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Substitute imputed values. — subImputations","text":"","code":"# tbd"},{"path":"https://beckerbenj.github.io/eatGADS/reference/updateMeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Update meta data. — updateMeta","title":"Update meta data. — updateMeta","text":"Update meta data GADSdat all_GADSdat object according variables new data object.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/updateMeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update meta data. — updateMeta","text":"","code":"updateMeta(GADSdat, newDat, checkVarNames = TRUE)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/updateMeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update meta data. — updateMeta","text":"GADSdat GADSdat all_GADSdat object. newDat data.frame list data.frames modified data. tibbles data.tables currently supported need transformed data.frames beforehand. checkVarNames Logical. new variable names checked checkVarNames?","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/updateMeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update meta data. — updateMeta","text":"Returns original object updated meta data (removes factors data).","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/updateMeta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update meta data. — updateMeta","text":"data GADSdat all_GADSdat changed (supplied via newDat), updateMeta assimilates corresponding meta data set. variables removed, corresponding meta data also removed. variables added, empty meta data added variables. Factors transformed numerical levels added meta data set.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/updateMeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update meta data. — updateMeta","text":"","code":"# see createGADS vignette"},{"path":"https://beckerbenj.github.io/eatGADS/reference/write_spss.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a GADSdat object to a file — write_spss","title":"Write a GADSdat object to a file — write_spss","text":"Write GADSdat object, contains meta information value variable labels SPSS file (sav) Stata file (dta). See 'details' important limitations.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/write_spss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a GADSdat object to a file — write_spss","text":"","code":"write_spss(GADSdat, filePath)  write_stata(GADSdat, filePath)"},{"path":"https://beckerbenj.github.io/eatGADS/reference/write_spss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a GADSdat object to a file — write_spss","text":"GADSdat GADSdat object. filePath Path sav file write.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/write_spss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a GADSdat object to a file — write_spss","text":"Writes file disc, returns NULL.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/write_spss.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write a GADSdat object to a file — write_spss","text":"provided functionality relies havens write_sav write_dta functions. Currently known limitations write_spss : ) value labels long character variables (> A10) dropped, b) specific conditions long character variables (> A254) incorrectly displayed multiple character variables SPSS, c) exporting date time variables currently supported, d) missing tags slightly incompatible SPSS eatGADS eatGADS supports unlimited discrete missing tags (range missing tags) SPSS supports three discrete missing tags ranges missing tags. purpose, variable assigned three discrete missing tags, write_spss() (precisely export_tibble) performs silent conversion discrete missing tags missing range. conversion affects value labels values data tagged missing, error issued. Currently known limitations write_stata : ) Variable format dropped, b) missing codes dropped.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/write_spss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a GADSdat object to a file — write_spss","text":"","code":"# write to spss tmp <- tempfile(fileext = \".sav\") write_spss(pisa, tmp) #> NULL  # write to stata tmp <- tempfile(fileext = \".dta\") write_stata(pisa, tmp) #> Warning: Missing codes and variable formats are dropped when writing to '.dta'. #> NULL"},{"path":"https://beckerbenj.github.io/eatGADS/reference/write_spss2.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a GADSdat object to txt and SPSS syntax — write_spss2","title":"Write a GADSdat object to txt and SPSS syntax — write_spss2","text":"Write GADSdat object text file (txt) accompanying SPSS syntax file containing meta information (e.g. value variable labels).","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/write_spss2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a GADSdat object to txt and SPSS syntax — write_spss2","text":"","code":"write_spss2(   GADSdat,   txtPath,   spsPath = NULL,   savPath = NULL,   dec = \".\",   fileEncoding = \"UTF-8\",   chkFormat = TRUE,   ... )"},{"path":"https://beckerbenj.github.io/eatGADS/reference/write_spss2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a GADSdat object to txt and SPSS syntax — write_spss2","text":"GADSdat GADSdat object. txtPath Path .txt file write, including file name ending .txt. default. spsPath Path .sps file write, including file name ending .sps. Default Path txtPath. savPath Path .sav file write, including file name ending .sav. Default Path spsPath. dec Decimal delimiter SPSS version. values dec \",\" \".\" implemented yet. fileEncoding Data file encoding SPSS. Default \"UTF-8\". chkFormat Whether format checks via checkFormat performed. ... Arguments pass checkFormat particular changeFormat=FALSE needed.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/write_spss2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a GADSdat object to txt and SPSS syntax — write_spss2","text":"Writes txt sav file disc, returns nothing.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/write_spss2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write a GADSdat object to txt and SPSS syntax — write_spss2","text":"function based eatPreps writeSpss function currently development.","code":""},{"path":"https://beckerbenj.github.io/eatGADS/reference/write_spss2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a GADSdat object to txt and SPSS syntax — write_spss2","text":"","code":"# write to spss tmp_txt <- tempfile(fileext = \".txt\") write_spss2(pisa, txtPath = tmp_txt) #> Variable ma_pv1 has more decimals than SPSS allows (18) and will be rounded to 16 decimal places. #> Variable ma_pv2 has more decimals than SPSS allows (18) and will be rounded to 16 decimal places. #> Variable ma_pv3 has more decimals than SPSS allows (18) and will be rounded to 16 decimal places. #> Variable ma_pv4 has more decimals than SPSS allows (18) and will be rounded to 16 decimal places. #> Variable ma_pv5 has more decimals than SPSS allows (18) and will be rounded to 16 decimal places. #> Variable rea_pv1 has more decimals than SPSS allows (17) and will be rounded to 16 decimal places. #> Variable rea_pv2 has more decimals than SPSS allows (17) and will be rounded to 16 decimal places. #> Variable rea_pv3 has more decimals than SPSS allows (17) and will be rounded to 16 decimal places. #> Variable rea_pv4 has more decimals than SPSS allows (18) and will be rounded to 16 decimal places. #> Variable rea_pv5 has more decimals than SPSS allows (17) and will be rounded to 16 decimal places. #> Variable sci_pv1 has more decimals than SPSS allows (17) and will be rounded to 16 decimal places. #> Variable sci_pv2 has more decimals than SPSS allows (17) and will be rounded to 16 decimal places. #> Variable sci_pv3 has more decimals than SPSS allows (17) and will be rounded to 16 decimal places. #> Variable sci_pv4 has more decimals than SPSS allows (17) and will be rounded to 16 decimal places. #> Variable sci_pv5 has more decimals than SPSS allows (17) and will be rounded to 16 decimal places. #> Format of Variable idstud will be changed from F8.0 to F3 #> Format of Variable idschool will be changed from F8.0 to F3 #> Format of Variable idclass will be changed from F8.0 to F3 #> Format of Variable schtype will be changed from F8.0 to F1 #> Format of Variable sameteach will be changed from F8.0 to F1 #> Format of Variable g8g9 will be changed from F8.0 to F1 #> Format of Variable ganztag will be changed from F8.0 to F1 #> Format of Variable classsize will be changed from F8.0 to F2 #> Format of Variable repeated will be changed from F8.0 to F1 #> Format of Variable gender will be changed from F8.0 to F1 #> Format of Variable age will be changed from F8.2 to F5.2 #> Format of Variable language will be changed from F8.0 to F2 #> Format of Variable migration will be changed from F8.0 to F1 #> Format of Variable hisced will be changed from F8.0 to F1 #> Format of Variable hisei will be changed from F8.2 to F2 #> Format of Variable homepos will be changed from F8.2 to F4.2 #> Format of Variable books will be changed from F8.0 to F1 #> Format of Variable pared will be changed from F8.2 to F2 #> Format of Variable computer_age will be changed from F8.0 to F1 #> Format of Variable internet_age will be changed from F8.0 to F1 #> Format of Variable int_use_a will be changed from F8.0 to F1 #> Format of Variable int_use_b will be changed from F8.0 to F1 #> Format of Variable truancy_a will be changed from F8.0 to F1 #> Format of Variable truancy_b will be changed from F8.0 to F1 #> Format of Variable truancy_c will be changed from F8.0 to F1 #> Format of Variable int_a will be changed from F8.0 to F1 #> Format of Variable int_b will be changed from F8.0 to F1 #> Format of Variable int_c will be changed from F8.0 to F1 #> Format of Variable int_d will be changed from F8.0 to F1 #> Format of Variable instmot_a will be changed from F8.0 to F1 #> Format of Variable instmot_b will be changed from F8.0 to F1 #> Format of Variable instmot_c will be changed from F8.0 to F1 #> Format of Variable instmot_d will be changed from F8.0 to F1 #> Format of Variable norms_a will be changed from F8.0 to F1 #> Format of Variable norms_b will be changed from F8.0 to F1 #> Format of Variable norms_c will be changed from F8.0 to F1 #> Format of Variable norms_d will be changed from F8.0 to F1 #> Format of Variable norms_e will be changed from F8.0 to F1 #> Format of Variable norms_f will be changed from F8.0 to F1 #> Format of Variable anxiety_a will be changed from F8.0 to F1 #> Format of Variable anxiety_b will be changed from F8.0 to F1 #> Format of Variable anxiety_c will be changed from F8.0 to F1 #> Format of Variable anxiety_d will be changed from F8.0 to F1 #> Format of Variable anxiety_e will be changed from F8.0 to F1 #> Format of Variable selfcon_a will be changed from F8.0 to F1 #> Format of Variable selfcon_b will be changed from F8.0 to F1 #> Format of Variable selfcon_c will be changed from F8.0 to F1 #> Format of Variable selfcon_d will be changed from F8.0 to F1 #> Format of Variable selfcon_e will be changed from F8.0 to F1 #> Format of Variable worketh_a will be changed from F8.0 to F1 #> Format of Variable worketh_b will be changed from F8.0 to F1 #> Format of Variable worketh_c will be changed from F8.0 to F1 #> Format of Variable worketh_d will be changed from F8.0 to F1 #> Format of Variable worketh_e will be changed from F8.0 to F1 #> Format of Variable worketh_f will be changed from F8.0 to F1 #> Format of Variable worketh_g will be changed from F8.0 to F1 #> Format of Variable worketh_h will be changed from F8.0 to F1 #> Format of Variable worketh_i will be changed from F8.0 to F1 #> Format of Variable intent_a will be changed from F8.0 to F1 #> Format of Variable intent_b will be changed from F8.0 to F1 #> Format of Variable intent_c will be changed from F8.0 to F1 #> Format of Variable intent_d will be changed from F8.0 to F1 #> Format of Variable intent_e will be changed from F8.0 to F1 #> Format of Variable behav_a will be changed from F8.0 to F1 #> Format of Variable behav_b will be changed from F8.0 to F1 #> Format of Variable behav_c will be changed from F8.0 to F1 #> Format of Variable behav_d will be changed from F8.0 to F1 #> Format of Variable behav_e will be changed from F8.0 to F1 #> Format of Variable behav_f will be changed from F8.0 to F1 #> Format of Variable behav_g will be changed from F8.0 to F1 #> Format of Variable behav_h will be changed from F8.0 to F1 #> Format of Variable teach_a will be changed from F8.0 to F1 #> Format of Variable teach_b will be changed from F8.0 to F1 #> Format of Variable teach_c will be changed from F8.0 to F1 #> Format of Variable teach_d will be changed from F8.0 to F1 #> Format of Variable teach_e will be changed from F8.0 to F1 #> Format of Variable cognact_a will be changed from F8.0 to F1 #> Format of Variable cognact_b will be changed from F8.0 to F1 #> Format of Variable cognact_c will be changed from F8.0 to F1 #> Format of Variable cognact_d will be changed from F8.0 to F1 #> Format of Variable cognact_e will be changed from F8.0 to F1 #> Format of Variable cognact_f will be changed from F8.0 to F1 #> Format of Variable cognact_g will be changed from F8.0 to F1 #> Format of Variable cognact_h will be changed from F8.0 to F1 #> Format of Variable cognact_i will be changed from F8.0 to F1 #> Format of Variable discpline_a will be changed from F8.0 to F1 #> Format of Variable discpline_b will be changed from F8.0 to F1 #> Format of Variable discpline_c will be changed from F8.0 to F1 #> Format of Variable discpline_d will be changed from F8.0 to F1 #> Format of Variable discpline_e will be changed from F8.0 to F1 #> Format of Variable relation_a will be changed from F8.0 to F1 #> Format of Variable relation_b will be changed from F8.0 to F1 #> Format of Variable relation_c will be changed from F8.0 to F1 #> Format of Variable relation_d will be changed from F8.0 to F1 #> Format of Variable relation_e will be changed from F8.0 to F1 #> Format of Variable belong_a will be changed from F8.0 to F1 #> Format of Variable belong_b will be changed from F8.0 to F1 #> Format of Variable belong_c will be changed from F8.0 to F1 #> Format of Variable belong_d will be changed from F8.0 to F1 #> Format of Variable belong_e will be changed from F8.0 to F1 #> Format of Variable belong_f will be changed from F8.0 to F1 #> Format of Variable belong_g will be changed from F8.0 to F1 #> Format of Variable belong_h will be changed from F8.0 to F1 #> Format of Variable belong_i will be changed from F8.0 to F1 #> Format of Variable attitud_a will be changed from F8.0 to F1 #> Format of Variable attitud_b will be changed from F8.0 to F1 #> Format of Variable attitud_c will be changed from F8.0 to F1 #> Format of Variable attitud_d will be changed from F8.0 to F1 #> Format of Variable attitud_e will be changed from F8.0 to F1 #> Format of Variable attitud_f will be changed from F8.0 to F1 #> Format of Variable attitud_g will be changed from F8.0 to F1 #> Format of Variable attitud_h will be changed from F8.0 to F1 #> Format of Variable grade_de will be changed from F8.0 to F1 #> Format of Variable grade_ma will be changed from F8.0 to F1 #> Format of Variable grade_bio will be changed from F8.0 to F1 #> Format of Variable grade_che will be changed from F8.0 to F1 #> Format of Variable grade_phy will be changed from F8.0 to F1 #> Format of Variable grade_sci will be changed from F8.0 to F1 #> Format of Variable ma_pv1 will be changed from F8.2 to F18.16 #> Format of Variable ma_pv2 will be changed from F8.2 to F18.16 #> Format of Variable ma_pv3 will be changed from F8.2 to F18.16 #> Format of Variable ma_pv4 will be changed from F8.2 to F18.16 #> Format of Variable ma_pv5 will be changed from F8.2 to F18.16 #> Format of Variable rea_pv1 will be changed from F8.2 to F18.16 #> Format of Variable rea_pv2 will be changed from F8.2 to F18.16 #> Format of Variable rea_pv3 will be changed from F8.2 to F18.16 #> Format of Variable rea_pv4 will be changed from F8.2 to F18.16 #> Format of Variable rea_pv5 will be changed from F8.2 to F18.16 #> Format of Variable sci_pv1 will be changed from F8.2 to F18.16 #> Format of Variable sci_pv2 will be changed from F8.2 to F18.16 #> Format of Variable sci_pv3 will be changed from F8.2 to F18.16 #> Format of Variable sci_pv4 will be changed from F8.2 to F18.16 #> Format of Variable sci_pv5 will be changed from F8.2 to F18.16"},{"path":[]},{"path":"https://beckerbenj.github.io/eatGADS/news/index.html","id":"new-features-1-1-1-9000","dir":"Changelog","previous_headings":"","what":"new features","title":"eatGADS 1.1.1.9000","text":"dropDuplicateIDs() allows dropping duplicate IDs based number missings selected variables (#67) changeValLabels() changeMissings() allow changing value labels missing tags multiple variables (#33) recodeGADS() allows recoding multiple variables (#107) merge.GADSdat() allows automatically assigning NAs created merging missing code value label (#1)","code":""},{"path":"https://beckerbenj.github.io/eatGADS/news/index.html","id":"bug-fixes-1-1-1-9000","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"eatGADS 1.1.1.9000","text":"extractData2() extractData() longer throw error multiple values variable labeled NA (#96) extractData2() extractData() longer produce error multiple duplicate value labels variable extractData2() extractData() longer produce warning multiple duplicate value labels occur tagged transformed NA anyway (#98) extractData2() extractData() now provide consistent output values NA value label (#100) inspectMetaDifferences() now correctly reports differences meta data differing row names (#102) hot fix existingMeta argument recodeGADS() applyChangeMeta(), ignored values recoded (#104) fix unclear documentation removeValLabels() (#111) fix changeMissings() bug dropped single, existing value label threw error (#121) checkMissingValLabels() now correctly recognizes large integers (#124)","code":""},{"path":"https://beckerbenj.github.io/eatGADS/news/index.html","id":"eatgads-111","dir":"Changelog","previous_headings":"","what":"eatGADS 1.1.1","title":"eatGADS 1.1.1","text":"CRAN release: 2024-10-09","code":""},{"path":"https://beckerbenj.github.io/eatGADS/news/index.html","id":"new-features-1-1-1","dir":"Changelog","previous_headings":"","what":"new features","title":"eatGADS 1.1.1","text":"inspectDifferences() inspectMetaDifferences() now allow comparisons variables within GADSdat object (#62) new function import_tibble() allows importing tibbles GADSdat objects (#88)","code":""},{"path":"https://beckerbenj.github.io/eatGADS/news/index.html","id":"bug-fixes-1-1-1","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"eatGADS 1.1.1","text":"applyLookup() now works multiple variables contain NAs (#68) applyChangeMeta() recodeGADS() now correctly perform recodings (throw errors) multiple meta data conflicts occur (#57) removeEmptyValLabels() removing unused missing tags value labels (#4) extractData() extractData2() now correctly apply value labels, even value value label conflicts exist write_spss2() now also handles variables containing NA values format also NA (#72) changeMissings() now correctly changes missing labels values variables partially non-existent values /valLabels (#73) autoRecode() now correctly overwrites existing variable var_suffix = \"\" (#84) output inspectMetaDifferences() now correctly named even differences variable labels SPSS format occur (#81) extractData2() extractData() now correctly transform variables duplicate value labels (#77)","code":""},{"path":"https://beckerbenj.github.io/eatGADS/news/index.html","id":"documentation-1-1-1","dir":"Changelog","previous_headings":"","what":"documentation","title":"eatGADS 1.1.1","text":"import_spss vignette updated use extractData2() instead extractData()","code":""},{"path":"https://beckerbenj.github.io/eatGADS/news/index.html","id":"internal-1-1-1","dir":"Changelog","previous_headings":"","what":"internal","title":"eatGADS 1.1.1","text":"refactored extractData() use extractData2() internally (#82)","code":""},{"path":"https://beckerbenj.github.io/eatGADS/news/index.html","id":"eatgads-110","dir":"Changelog","previous_headings":"","what":"eatGADS 1.1.0","title":"eatGADS 1.1.0","text":"CRAN release: 2023-08-25","code":""},{"path":"https://beckerbenj.github.io/eatGADS/news/index.html","id":"new-features-1-1-0","dir":"Changelog","previous_headings":"","what":"new features","title":"eatGADS 1.1.0","text":"equalGADS() now allows pre-sorting data identifier variable updateMeta(), applyChangeMeta(), changeVarNames(), cloneVariable(), createVariable(), composeVar(), dummies2char() now optional checks new variables names via checkVarNames argument reuseMeta() now can use multiple variables inspectMetaDifferences() now can applied data bases well recodeNA2missing() recoding NAs specific missing code recode2NA() now allows recoding multiple values returns warning, recoded values existing value labels recoded variables updateMeta() now compatible extractData() extractData2() S3 method extractData2() now available trend_GADSdat objects recodeGADS() applyChangeMeta() allow recoding values without recoding value labels (via existingMeta = \"ignore\") insertVariable() renamed relocateVariable() clarity. Variables can now inserted beginning GADSdat cloneVariable() autoRecode() now allow automatic appending variable label suffixes via label_suffix argument new function emptyTheseVariables() allows setting multiple variables NA","code":""},{"path":"https://beckerbenj.github.io/eatGADS/news/index.html","id":"bug-fixes-1-1-0","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"eatGADS 1.1.0","text":"import_spss() now removes duplicate meta data rows, caused error , e.g., recodeGADS() export_tibble() write_spss() now throw error conversion four discrete missing tags missing range undesired side effects bug fix checkMissingsByValues(), now correctly reports missing tags outside specified value range bug fix cloneVariable(), now new variables names also SQLite keywords longer throw error (fixed conflicts caused checkVarName())","code":""},{"path":"https://beckerbenj.github.io/eatGADS/news/index.html","id":"eatgads-100","dir":"Changelog","previous_headings":"","what":"eatGADS 1.0.0","title":"eatGADS 1.0.0","text":"CRAN release: 2023-04-06","code":""},{"path":"https://beckerbenj.github.io/eatGADS/news/index.html","id":"new-features-1-0-0","dir":"Changelog","previous_headings":"","what":"new features","title":"eatGADS 1.0.0","text":"multiChar2fac() now allows converting upper lower cases via convertCases argument checkMissingsByValues() checking missing tags specific, labeled values (value range) import_spss() informative error message checkMissingValLabels() now allows checks specific variable classes checkMissingValLabels() now offers data.frame output format extractData2() better usability support ordered factors fixEncoding() now supports imports windows-1250 imported files via import_spss() UTF-8 encoding import_spss() now transforms DATEATIME ADATE variables character, assigning appropriate format cloneVariable() duplicating existing variable new name createVariable() creating new, empty variable insertVariable() changing position variable data set autoRecode() automatically recoding (numerical) variables","code":""},{"path":"https://beckerbenj.github.io/eatGADS/news/index.html","id":"bug-fixes-1-0-0","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"eatGADS 1.0.0","text":"bug fix multiChar2fac() cases existing value labels (values labeled greater zero) composeVar() now correctly prioritizes variables missing values changeMissings() now longer add arbitrary value labels newly tagged values bug fix checkUniqueness2() cases differing numbers cases per imputed data set bug fix changeValLabels() mixture already existing new values bug fixes import_spss() setting labeledStirngs = \"transform\" bug fix import_spss() variables missing tags value labels (missing tags dropped )","code":""},{"path":"https://beckerbenj.github.io/eatGADS/news/index.html","id":"eatgads-0200","dir":"Changelog","previous_headings":"","what":"eatGADS 0.20.0","title":"eatGADS 0.20.0","text":"CRAN release: 2022-06-24 extractData() adds now variable labels label attribute resulting data.frame numeric tolerance can now specified within equalGADS() fixed warnings getTrendGADS() inspectMetaDifferences() inspecting meta differences two GADSdats single variable checkUniqueness2() faster checking variable unique within identifier variable fixEncoding() fixing encoding issues caused import via import_spss() using ASCII encoding composeVar() combining information two variables third variable subImputations() now works differing varName varName_imp fillImputations() efficiently filling missing values imputed variables via imputed variables checkFormat() now works correctly variables without value labels checkFormat() now works correctly variables purely NAs import_raw() now works correctly variables provided integers reuseMeta() now works correctly variables occur multiple sheets data base all_GADSdat","code":""},{"path":"https://beckerbenj.github.io/eatGADS/news/index.html","id":"eatgads-0191","dir":"Changelog","previous_headings":"","what":"eatGADS 0.19.1","title":"eatGADS 0.19.1","text":"CRAN release: 2022-01-27 fix permanent URL redirect README","code":""},{"path":[]},{"path":"https://beckerbenj.github.io/eatGADS/news/index.html","id":"breaking-changes-0-19-0","dir":"Changelog","previous_headings":"","what":"breaking changes","title":"eatGADS 0.19.0","text":"getTrendGADS() now supports multiple measurement points support linking errors dropped extractData() now supports multiple measurement points support linking errors dropped trend example data bases implemented getTrendGADSOld() extractDataOld() provide backward compatibility checkLEStructure() deprecated import_spss() now can automatically transform labeled missing tagged character values via changed labeledStrings argument","code":""},{"path":"https://beckerbenj.github.io/eatGADS/news/index.html","id":"major-changes-0-19-0","dir":"Changelog","previous_headings":"","what":"major changes","title":"eatGADS 0.19.0","text":"assimilateValLabels() assimilating value labels multiple variables cbind.GADSdat() method binding multiple GADSdat objects column calculateScale() calculating scales item sets checkUniqueness() checking uniqueness variable within id variable","code":""},{"path":"https://beckerbenj.github.io/eatGADS/news/index.html","id":"minor-changes-0-19-0","dir":"Changelog","previous_headings":"","what":"minor changes","title":"eatGADS 0.19.0","text":"clarifications additional explanations vignettes (meta_data) bug fix updateMeta() (added variables now checked illegal naming)","code":""},{"path":"https://beckerbenj.github.io/eatGADS/news/index.html","id":"eatgads-0181","dir":"Changelog","previous_headings":"","what":"eatGADS 0.18.1","title":"eatGADS 0.18.1","text":"CRAN release: 2021-10-06 equalGADS() now ignores irrelevant format differences (F8.0 vs F8) fix JSS link vignette","code":""},{"path":"https://beckerbenj.github.io/eatGADS/news/index.html","id":"eatgads-0180","dir":"Changelog","previous_headings":"","what":"eatGADS 0.18.0","title":"eatGADS 0.18.0","text":"applyChangeMeta() changeValLabels() now automatically assign \"valid\" missings columns labeled values bug fix equalGADS() (meta data differences solely due different meta data sorting now ignored) equalGADS() can now exclude certain meta data columns comparison checkFormat() checking modifyingSPSS format type compatibility actual data check4SPSS() checking SPSS meta data conventions requirements changeVarNames() applyChangeMeta() now enforce SQLite3 naming conventions bug fixes write_spss2() bug fix applyChangeMeta(): now recognizes differences NAs old columns checking change table","code":""},{"path":"https://beckerbenj.github.io/eatGADS/news/index.html","id":"eatgads-0170","dir":"Changelog","previous_headings":"","what":"eatGADS 0.17.0","title":"eatGADS 0.17.0","text":"CRAN release: 2021-07-19 inspectDifferences() now checks whether variable type GADSdats subImputations() substituting imputations original, imputed values applyChangeMeta() now returns informative error variable sets GADSdat changeTable differ applyChangeMeta() tries convert value columns changeTable numeric throwing error dummies2char() recoding set dummy variables set left filled character variables fac2dummies() fac2dummies_complex() recoding labeled factor variable multiple labeled dummy variables equalGADS() comparing complete structure content two GADSdat objects inspectDifferences() comparing specific variables reuseMeta() now allows transferring value labels values coded missing checkEmptyValLabels() checkMissingValLabels() provide cleaner output write_spss2() writing .sav files via text file SPSS syntax import_spss() write_spss() now deal correctly missing codes character variables recodeGADS() allows recoding unlabeled variables values import_spss() now takes encoding argument work around faulty defaults","code":""},{"path":"https://beckerbenj.github.io/eatGADS/news/index.html","id":"internal-0-17-0","dir":"Changelog","previous_headings":"","what":"Internal","title":"eatGADS 0.17.0","text":"better performance applyChangeMeta() value level bug fix import_spss() (columns forced double imported instead integer) bug fix fac2dummies_complex() (value labels dummy variables tagged valid) bug fixes recodeGADS() bug fix removeValLabels() (single value label removed) bug fixes collapseMultiMC_Text() (left_fill() drop_empty()) bug fix remove2NAchar() (partially labeled variables) bug fix multiChar2fac() (partially labeled variables) bug fix applyLookup_expandVar() (removed unnecessary messages) warnings removed import_spss() (haven patch labeled character variables)","code":""},{"path":"https://beckerbenj.github.io/eatGADS/news/index.html","id":"eatgads-0160","dir":"Changelog","previous_headings":"","what":"eatGADS 0.16.0","title":"eatGADS 0.16.0","text":"CRAN release: 2021-02-23 checkEmptyValLabels() checkMissingValLabels() comparing values data value labels compareGADS() comparing multiple variables two GADSdats recodeGADS() allows recoding (multiple) values existing values now, argument existingMeta added recodeGADS() allows recoding NA now recode2NA() allows recoding numeric character values NA recodeString2NA() deprecated bug fix collapseColumns() (now supports new_value column name look table) checkValue() now returns occurrence count vector instead giving message checkValue() now works subset variables (via argument vars) checkValue() now supports checking NA removeValLabels() now can remove specific value - valLabel pairs required changing value labels inside recodeGADS() via newValueLabels deprecated (use changeValLabels()instead) applyChangeMeta() now works data.frames (compatibility excel import export) import_spss() now supports variables type datetime import_stata() write_stata() exporting importing Stata files","code":""},{"path":"https://beckerbenj.github.io/eatGADS/news/index.html","id":"internal-0-16-0","dir":"Changelog","previous_headings":"","what":"Internal","title":"eatGADS 0.16.0","text":"check_GADSdat() now checks duplicate value rows switch travis appVeyor Github Action applyChangeMeta() checks format_new column now illegal entries applyChangeMeta() throws error result corrupted meta data applyChangeMeta() orders meta data within variable (ascending value) better performance applyChangeMeta() value level bug fix applyChangeMeta() missings_new changed Setup revdepcheck","code":""},{"path":"https://beckerbenj.github.io/eatGADS/news/index.html","id":"eatgads-0152","dir":"Changelog","previous_headings":"","what":"eatGADS 0.15.2","title":"eatGADS 0.15.2","text":"CRAN release: 2020-11-25 Initial release CRAN.","code":""}]
